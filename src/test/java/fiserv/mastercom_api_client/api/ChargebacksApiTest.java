/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.api;

import fiserv.mastercom_api_client.ApiException;
import fiserv.mastercom_api_client.model.ChargebackImageStatusRequest;
import fiserv.mastercom_api_client.model.ChargebackImageStatusResponse;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedRequest;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedResponse;
import fiserv.mastercom_api_client.model.ChargebackResponse;
import fiserv.mastercom_api_client.model.ChargebackStatusRequest;
import fiserv.mastercom_api_client.model.ChargebackStatusResponse;
import fiserv.mastercom_api_client.model.CreateChargebackRequest;
import fiserv.mastercom_api_client.model.DocumentResponseStructure;
import fiserv.mastercom_api_client.model.LoadDataForChargebackResponse;
import fiserv.mastercom_api_client.model.LoadDataForChargebacksRequest;
import fiserv.mastercom_api_client.model.UpdateChargebackRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * API tests for ChargebacksApi
 */
@Disabled
public class ChargebacksApiTest {

    private final ChargebacksApi api = new ChargebacksApi();

    /**
     * Issuers and acquirers use this endpoint to acknowledge a chargeback or second presentment. Acknowledging a chargeback or second presentment moves the claim from the Unworked queue to the Worked queue. Acknowledging the chargeback or second presentment does not close the claim. Issuers and acquirers may take further actions on acknowledged claims.   Note: for efficient processing, issuers and acquirers should send 100 acknowledgments or fewer in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acknowledgeChargebacksTest() throws ApiException {
        ChargebackMarkProcessedRequest body = null;
        ChargebackMarkProcessedResponse response = api.acknowledgeChargebacks(body);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to create chargebacks and second presentments and optionally to upload supporting documents. Issuers and acquirers may use the parameters in the request to automatically generate the Expedited Billing Dispute Form (EBDF) and attach it to the claim.   Note: issuers should not attach documents while requesting the automatic generation of the EBDF. Therefore, if issuers need to submit the EBDF with additional documentation, they must complete the EBDF and include it in a ZIP file with any additional documentation.   Note: If the API call to this endpoint times out, customers should use the Chargeback Status or Retrieve Claim endpoint to determine the success or failure of document processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChargebackTest() throws ApiException {
        String claimId = null;
        CreateChargebackRequest body = null;
        ChargebackResponse response = api.createChargeback(claimId, body);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to reverse an existing chargeback when they create a chargeback in error.   Note: issuers and acquirers may only create reversals on chargebacks after the chargebacks are processed by the Global Clearing Management System (GCMS).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChargebackReversalTest() throws ApiException {
        String claimId = null;
        String chargebackId = null;
        ChargebackResponse response = api.createChargebackReversal(claimId, chargebackId);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to retrieve documents in a desired format associated with any type of chargeback.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargebackDocTest() throws ApiException {
        String claimId = null;
        String chargebackId = null;
        String format = null;
        DocumentResponseStructure response = api.getChargebackDoc(claimId, chargebackId, format);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to obtain information about a potential first chargeback or second presentment prior to creating the chargeback. If the issuer or acquirer decides to create the chargeback, the issuer or acquirer should use the Create endpoint for chargebacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataForCreateChargebackTest() throws ApiException {
        String claimId = null;
        LoadDataForChargebacksRequest body = null;
        LoadDataForChargebackResponse response = api.getDataForCreateChargeback(claimId, body);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for chargebacks.   Note: For customers with high volumes of chargebacks or large numbers of BINs, Mastercom recommends using the Chargebacks Status endpoint rather than the Chargebacks Image Status endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveChargebackImageStatusTest() throws ApiException {
        ChargebackImageStatusRequest body = null;
        ChargebackImageStatusResponse response = api.retrieveChargebackImageStatus(body);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to search for the status of documents of a specific list of claim IDs and chargeback IDs.   Note: issuers and acquirers may send a maximum of 2,000 chargeback IDs within a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveChargebackStatusTest() throws ApiException {
        ChargebackStatusRequest body = null;
        ChargebackStatusResponse response = api.retrieveChargebackStatus(body);
        // TODO: test validations
    }

    /**
     * Issuers and acquirers use this endpoint to update an existing chargeback with memos or documents if they did not attach memos or documents when creating the chargeback.   Note: If the API call to this endpoint times out, customers should use the Chargeback Status or Retrieve Claim endpoint to determine the success or failure of document processing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChargebackTest() throws ApiException {
        String claimId = null;
        String chargebackId = null;
        UpdateChargebackRequest body = null;
        ChargebackResponse response = api.updateChargeback(claimId, chargebackId, body);
        // TODO: test validations
    }

}
