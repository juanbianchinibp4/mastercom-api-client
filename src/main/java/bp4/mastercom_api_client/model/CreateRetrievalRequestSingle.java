/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * CreateRetrievalRequestSingle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CreateRetrievalRequestSingle {
  /**
   * The document type field indicates what type of documentation is sent supporting the retrieval.   Length: 1   Valid Values/Format: 2, 4
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    _2("2"),
    
    _4("4");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_REPLACEMENT_AMOUNT = "replacementAmount";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_AMOUNT)
  private String replacementAmount;

  public static final String SERIALIZED_NAME_REVERSAL_REASON_CODE = "reversalReasonCode";
  @SerializedName(SERIALIZED_NAME_REVERSAL_REASON_CODE)
  private String reversalReasonCode;

  /**
   * The usage code indicates the type of retrieval request record processed.   Length: 1   Valid Values/Format: 1, 2, 3, 6, 7
   */
  @JsonAdapter(UsageCodeEnum.Adapter.class)
  public enum UsageCodeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _6("6"),
    
    _7("7");

    private String value;

    UsageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageCodeEnum fromValue(String value) {
      for (UsageCodeEnum b : UsageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USAGE_CODE = "usageCode";
  @SerializedName(SERIALIZED_NAME_USAGE_CODE)
  private UsageCodeEnum usageCode;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_CONTROL_NUMBER = "controlNumber";
  @SerializedName(SERIALIZED_NAME_CONTROL_NUMBER)
  private String controlNumber;

  public CreateRetrievalRequestSingle() {
  }

  public CreateRetrievalRequestSingle documentType(DocumentTypeEnum documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * The document type field indicates what type of documentation is sent supporting the retrieval.   Length: 1   Valid Values/Format: 2, 4
   * @return documentType
  **/
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }


  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public CreateRetrievalRequestSingle replacementAmount(String replacementAmount) {
    
    this.replacementAmount = replacementAmount;
    return this;
  }

   /**
   * Replacement Amount.  The replacement amount should reflect the final amount of the transaction value that should remain applied to the cardholder balance.   Length: 4-12   Valid Values/Format: Numeric
   * @return replacementAmount
  **/
  @javax.annotation.Nonnull
  public String getReplacementAmount() {
    return replacementAmount;
  }


  public void setReplacementAmount(String replacementAmount) {
    this.replacementAmount = replacementAmount;
  }


  public CreateRetrievalRequestSingle reversalReasonCode(String reversalReasonCode) {
    
    this.reversalReasonCode = reversalReasonCode;
    return this;
  }

   /**
   * MDS dispute reason code for healthcare to create the dispute item.   NOTE: Creation of retrieval request is allowed only for reversalReasonCode (healthcare reason code (43)) starting on October 24th, 2021.   Length: 2   Valid Values/Format: 43  
   * @return reversalReasonCode
  **/
  @javax.annotation.Nonnull
  public String getReversalReasonCode() {
    return reversalReasonCode;
  }


  public void setReversalReasonCode(String reversalReasonCode) {
    this.reversalReasonCode = reversalReasonCode;
  }


  public CreateRetrievalRequestSingle usageCode(UsageCodeEnum usageCode) {
    
    this.usageCode = usageCode;
    return this;
  }

   /**
   * The usage code indicates the type of retrieval request record processed.   Length: 1   Valid Values/Format: 1, 2, 3, 6, 7
   * @return usageCode
  **/
  @javax.annotation.Nonnull
  public UsageCodeEnum getUsageCode() {
    return usageCode;
  }


  public void setUsageCode(UsageCodeEnum usageCode) {
    this.usageCode = usageCode;
  }


  public CreateRetrievalRequestSingle additionalInformation(String additionalInformation) {
    
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Any additional information or note may be entered in this field.   Length: 1-38   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }


  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public CreateRetrievalRequestSingle controlNumber(String controlNumber) {
    
    this.controlNumber = controlNumber;
    return this;
  }

   /**
   * Control Number.  Used to identify the specific transaction for internal auditing and tracing purposes.   Length: 1-5   Valid Values/Format: Numeric
   * @return controlNumber
  **/
  @javax.annotation.Nullable
  public String getControlNumber() {
    return controlNumber;
  }


  public void setControlNumber(String controlNumber) {
    this.controlNumber = controlNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRetrievalRequestSingle createRetrievalRequestSingle = (CreateRetrievalRequestSingle) o;
    return Objects.equals(this.documentType, createRetrievalRequestSingle.documentType) &&
        Objects.equals(this.replacementAmount, createRetrievalRequestSingle.replacementAmount) &&
        Objects.equals(this.reversalReasonCode, createRetrievalRequestSingle.reversalReasonCode) &&
        Objects.equals(this.usageCode, createRetrievalRequestSingle.usageCode) &&
        Objects.equals(this.additionalInformation, createRetrievalRequestSingle.additionalInformation) &&
        Objects.equals(this.controlNumber, createRetrievalRequestSingle.controlNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, replacementAmount, reversalReasonCode, usageCode, additionalInformation, controlNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRetrievalRequestSingle {\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    replacementAmount: ").append(toIndentedString(replacementAmount)).append("\n");
    sb.append("    reversalReasonCode: ").append(toIndentedString(reversalReasonCode)).append("\n");
    sb.append("    usageCode: ").append(toIndentedString(usageCode)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    controlNumber: ").append(toIndentedString(controlNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentType");
    openapiFields.add("replacementAmount");
    openapiFields.add("reversalReasonCode");
    openapiFields.add("usageCode");
    openapiFields.add("additionalInformation");
    openapiFields.add("controlNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentType");
    openapiRequiredFields.add("replacementAmount");
    openapiRequiredFields.add("reversalReasonCode");
    openapiRequiredFields.add("usageCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateRetrievalRequestSingle
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRetrievalRequestSingle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRetrievalRequestSingle is not found in the empty JSON string", CreateRetrievalRequestSingle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRetrievalRequestSingle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRetrievalRequestSingle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRetrievalRequestSingle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if (!jsonObj.get("replacementAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacementAmount").toString()));
      }
      if (!jsonObj.get("reversalReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reversalReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reversalReasonCode").toString()));
      }
      if (!jsonObj.get("usageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageCode").toString()));
      }
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      if ((jsonObj.get("controlNumber") != null && !jsonObj.get("controlNumber").isJsonNull()) && !jsonObj.get("controlNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRetrievalRequestSingle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRetrievalRequestSingle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRetrievalRequestSingle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRetrievalRequestSingle.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRetrievalRequestSingle>() {
           @Override
           public void write(JsonWriter out, CreateRetrievalRequestSingle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRetrievalRequestSingle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRetrievalRequestSingle given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRetrievalRequestSingle
  * @throws IOException if the JSON string is invalid with respect to CreateRetrievalRequestSingle
  */
  public static CreateRetrievalRequestSingle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRetrievalRequestSingle.class);
  }

 /**
  * Convert an instance of CreateRetrievalRequestSingle to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

