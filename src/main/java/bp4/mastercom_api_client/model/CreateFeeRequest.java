/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * CreateFeeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CreateFeeRequest {
  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE = "cardAcceptorIdCode";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE)
  private String cardAcceptorIdCode;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FEE_DATE = "feeDate";
  @SerializedName(SERIALIZED_NAME_FEE_DATE)
  private String feeDate;

  public static final String SERIALIZED_NAME_DESTINATION_MEMBER = "destinationMember";
  @SerializedName(SERIALIZED_NAME_DESTINATION_MEMBER)
  private String destinationMember;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_CREDIT_SENDER = "creditSender";
  @SerializedName(SERIALIZED_NAME_CREDIT_SENDER)
  private Boolean creditSender;

  public static final String SERIALIZED_NAME_CREDIT_RECEIVER = "creditReceiver";
  @SerializedName(SERIALIZED_NAME_CREDIT_RECEIVER)
  private Boolean creditReceiver;

  public static final String SERIALIZED_NAME_MASTERCOM_CONTROL_NUMBER = "mastercomControlNumber";
  @SerializedName(SERIALIZED_NAME_MASTERCOM_CONTROL_NUMBER)
  private String mastercomControlNumber;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_REPLY_FEE_ID = "replyFeeId";
  @SerializedName(SERIALIZED_NAME_REPLY_FEE_ID)
  private String replyFeeId;

  public static final String SERIALIZED_NAME_FEE_TYPE = "feeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private String feeType;

  public CreateFeeRequest() {
  }

  public CreateFeeRequest cardAcceptorIdCode(String cardAcceptorIdCode) {
    
    this.cardAcceptorIdCode = cardAcceptorIdCode;
    return this;
  }

   /**
   * Merchant Id associated with this fee collection..if any.   Length: 1-15   Valid Values/Format: Alphanumeric
   * @return cardAcceptorIdCode
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorIdCode() {
    return cardAcceptorIdCode;
  }


  public void setCardAcceptorIdCode(String cardAcceptorIdCode) {
    this.cardAcceptorIdCode = cardAcceptorIdCode;
  }


  public CreateFeeRequest cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Card number when required by the reason code.   Length: 1-19   Valid Values/Format: Numeric
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public CreateFeeRequest countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Code identifying the country.   Length: 3   Valid Values/Format: A-Z (Uppercase alphabetic letters)
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CreateFeeRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the fee.   Length: 3   Valid Values/Format: A-Z (Uppercase alphabetic letters)
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CreateFeeRequest feeDate(String feeDate) {
    
    this.feeDate = feeDate;
    return this;
  }

   /**
   * Date the fee was attached to the claim.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return feeDate
  **/
  @javax.annotation.Nonnull
  public String getFeeDate() {
    return feeDate;
  }


  public void setFeeDate(String feeDate) {
    this.feeDate = feeDate;
  }


  public CreateFeeRequest destinationMember(String destinationMember) {
    
    this.destinationMember = destinationMember;
    return this;
  }

   /**
   * Destination member for the fee collection.   Length: 1-6   Valid Values/Format: Numeric
   * @return destinationMember
  **/
  @javax.annotation.Nonnull
  public String getDestinationMember() {
    return destinationMember;
  }


  public void setDestinationMember(String destinationMember) {
    this.destinationMember = destinationMember;
  }


  public CreateFeeRequest feeAmount(String feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * Amount of the fee.   Length: 4-9   Valid Values/Format: Numeric
   * @return feeAmount
  **/
  @javax.annotation.Nonnull
  public String getFeeAmount() {
    return feeAmount;
  }


  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public CreateFeeRequest creditSender(Boolean creditSender) {
    
    this.creditSender = creditSender;
    return this;
  }

   /**
   * Credit the Sender   Length: 4-5   Valid Values/Format: true / false
   * @return creditSender
  **/
  @javax.annotation.Nonnull
  public Boolean getCreditSender() {
    return creditSender;
  }


  public void setCreditSender(Boolean creditSender) {
    this.creditSender = creditSender;
  }


  public CreateFeeRequest creditReceiver(Boolean creditReceiver) {
    
    this.creditReceiver = creditReceiver;
    return this;
  }

   /**
   * Credit the Receiver.   Length: 4-5   Valid Values/Format: true / false
   * @return creditReceiver
  **/
  @javax.annotation.Nonnull
  public Boolean getCreditReceiver() {
    return creditReceiver;
  }


  public void setCreditReceiver(Boolean creditReceiver) {
    this.creditReceiver = creditReceiver;
  }


  public CreateFeeRequest mastercomControlNumber(String mastercomControlNumber) {
    
    this.mastercomControlNumber = mastercomControlNumber;
    return this;
  }

   /**
   * Used in routing chargeback and retrieval documentation. It contain either a MasterCom endpoint suffix, in case of 2 characters, or a full MasterCom endpoint in case of 7 characters. When mastercomControlNumber is present, it cannot be all spaces or all zeros.   Length: 1-7   Valid Values/Format: Numeric
   * @return mastercomControlNumber
  **/
  @javax.annotation.Nullable
  public String getMastercomControlNumber() {
    return mastercomControlNumber;
  }


  public void setMastercomControlNumber(String mastercomControlNumber) {
    this.mastercomControlNumber = mastercomControlNumber;
  }


  public CreateFeeRequest message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Message regarding fee..   Length: 1-100   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public CreateFeeRequest reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Collection Reason Code.   Length: 1-4   Valid Values/Format: Numeric
   * @return reason
  **/
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public CreateFeeRequest settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * CONDITIONAL: settlementDate is a conditional field and is required for Argentina and Uruguay&#39;s Settlement Service participation ID codes (LA00003201, LA00003202, LA00085801, LA00085802, LA00084011, LA00084012). The date may not be prior to the current date or beyond 90 days from the current date.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public CreateFeeRequest replyFeeId(String replyFeeId) {
    
    this.replyFeeId = replyFeeId;
    return this;
  }

   /**
   * Fee identifier to be sent to reply to created Fee.   CONDITIONAL: This field is only applicable, if feeType is REPLY to an existing created feeId.   Length: 1-19   Valid Values/Format: Numeric
   * @return replyFeeId
  **/
  @javax.annotation.Nullable
  public String getReplyFeeId() {
    return replyFeeId;
  }


  public void setReplyFeeId(String replyFeeId) {
    this.replyFeeId = replyFeeId;
  }


  public CreateFeeRequest feeType(String feeType) {
    
    this.feeType = feeType;
    return this;
  }

   /**
   * The fee type.   The default value is CREATE   Valid Values/Format: CREATE, REPLY.
   * @return feeType
  **/
  @javax.annotation.Nullable
  public String getFeeType() {
    return feeType;
  }


  public void setFeeType(String feeType) {
    this.feeType = feeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFeeRequest createFeeRequest = (CreateFeeRequest) o;
    return Objects.equals(this.cardAcceptorIdCode, createFeeRequest.cardAcceptorIdCode) &&
        Objects.equals(this.cardNumber, createFeeRequest.cardNumber) &&
        Objects.equals(this.countryCode, createFeeRequest.countryCode) &&
        Objects.equals(this.currency, createFeeRequest.currency) &&
        Objects.equals(this.feeDate, createFeeRequest.feeDate) &&
        Objects.equals(this.destinationMember, createFeeRequest.destinationMember) &&
        Objects.equals(this.feeAmount, createFeeRequest.feeAmount) &&
        Objects.equals(this.creditSender, createFeeRequest.creditSender) &&
        Objects.equals(this.creditReceiver, createFeeRequest.creditReceiver) &&
        Objects.equals(this.mastercomControlNumber, createFeeRequest.mastercomControlNumber) &&
        Objects.equals(this.message, createFeeRequest.message) &&
        Objects.equals(this.reason, createFeeRequest.reason) &&
        Objects.equals(this.settlementDate, createFeeRequest.settlementDate) &&
        Objects.equals(this.replyFeeId, createFeeRequest.replyFeeId) &&
        Objects.equals(this.feeType, createFeeRequest.feeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAcceptorIdCode, cardNumber, countryCode, currency, feeDate, destinationMember, feeAmount, creditSender, creditReceiver, mastercomControlNumber, message, reason, settlementDate, replyFeeId, feeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFeeRequest {\n");
    sb.append("    cardAcceptorIdCode: ").append(toIndentedString(cardAcceptorIdCode)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    feeDate: ").append(toIndentedString(feeDate)).append("\n");
    sb.append("    destinationMember: ").append(toIndentedString(destinationMember)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    creditSender: ").append(toIndentedString(creditSender)).append("\n");
    sb.append("    creditReceiver: ").append(toIndentedString(creditReceiver)).append("\n");
    sb.append("    mastercomControlNumber: ").append(toIndentedString(mastercomControlNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    replyFeeId: ").append(toIndentedString(replyFeeId)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardAcceptorIdCode");
    openapiFields.add("cardNumber");
    openapiFields.add("countryCode");
    openapiFields.add("currency");
    openapiFields.add("feeDate");
    openapiFields.add("destinationMember");
    openapiFields.add("feeAmount");
    openapiFields.add("creditSender");
    openapiFields.add("creditReceiver");
    openapiFields.add("mastercomControlNumber");
    openapiFields.add("message");
    openapiFields.add("reason");
    openapiFields.add("settlementDate");
    openapiFields.add("replyFeeId");
    openapiFields.add("feeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("feeDate");
    openapiRequiredFields.add("destinationMember");
    openapiRequiredFields.add("feeAmount");
    openapiRequiredFields.add("creditSender");
    openapiRequiredFields.add("creditReceiver");
    openapiRequiredFields.add("reason");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateFeeRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFeeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFeeRequest is not found in the empty JSON string", CreateFeeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFeeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFeeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFeeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardAcceptorIdCode") != null && !jsonObj.get("cardAcceptorIdCode").isJsonNull()) && !jsonObj.get("cardAcceptorIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorIdCode").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("feeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeDate").toString()));
      }
      if (!jsonObj.get("destinationMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationMember").toString()));
      }
      if (!jsonObj.get("feeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeAmount").toString()));
      }
      if ((jsonObj.get("mastercomControlNumber") != null && !jsonObj.get("mastercomControlNumber").isJsonNull()) && !jsonObj.get("mastercomControlNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercomControlNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercomControlNumber").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("settlementDate") != null && !jsonObj.get("settlementDate").isJsonNull()) && !jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if ((jsonObj.get("replyFeeId") != null && !jsonObj.get("replyFeeId").isJsonNull()) && !jsonObj.get("replyFeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyFeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyFeeId").toString()));
      }
      if ((jsonObj.get("feeType") != null && !jsonObj.get("feeType").isJsonNull()) && !jsonObj.get("feeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFeeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFeeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFeeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFeeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFeeRequest>() {
           @Override
           public void write(JsonWriter out, CreateFeeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFeeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateFeeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateFeeRequest
  * @throws IOException if the JSON string is invalid with respect to CreateFeeRequest
  */
  public static CreateFeeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFeeRequest.class);
  }

 /**
  * Convert an instance of CreateFeeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

