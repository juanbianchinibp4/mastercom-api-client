/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * CardholderVerificationMethodStructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CardholderVerificationMethodStructure {
  public static final String SERIALIZED_NAME_ONLINE_P_I_N = "onlinePIN";
  @SerializedName(SERIALIZED_NAME_ONLINE_P_I_N)
  private String onlinePIN;

  public static final String SERIALIZED_NAME_OFFLINE_P_I_N = "offlinePIN";
  @SerializedName(SERIALIZED_NAME_OFFLINE_P_I_N)
  private String offlinePIN;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_NONE = "none";
  @SerializedName(SERIALIZED_NAME_NONE)
  private String none;

  public CardholderVerificationMethodStructure() {
  }

  public CardholderVerificationMethodStructure onlinePIN(String onlinePIN) {
    
    this.onlinePIN = onlinePIN;
    return this;
  }

   /**
   * Online PIN Preferring.   Length: 1   Valid Values/Format: 1
   * @return onlinePIN
  **/
  @javax.annotation.Nullable
  public String getOnlinePIN() {
    return onlinePIN;
  }


  public void setOnlinePIN(String onlinePIN) {
    this.onlinePIN = onlinePIN;
  }


  public CardholderVerificationMethodStructure offlinePIN(String offlinePIN) {
    
    this.offlinePIN = offlinePIN;
    return this;
  }

   /**
   * Offline PIN.   Length: 1   Valid Values/Format: 2
   * @return offlinePIN
  **/
  @javax.annotation.Nullable
  public String getOfflinePIN() {
    return offlinePIN;
  }


  public void setOfflinePIN(String offlinePIN) {
    this.offlinePIN = offlinePIN;
  }


  public CardholderVerificationMethodStructure signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Signature   Length: 1   Valid Values/Format: 3
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  public CardholderVerificationMethodStructure none(String none) {
    
    this.none = none;
    return this;
  }

   /**
   * None (No CVM)   Length: 1   Valid Values/Format: 4
   * @return none
  **/
  @javax.annotation.Nullable
  public String getNone() {
    return none;
  }


  public void setNone(String none) {
    this.none = none;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardholderVerificationMethodStructure cardholderVerificationMethodStructure = (CardholderVerificationMethodStructure) o;
    return Objects.equals(this.onlinePIN, cardholderVerificationMethodStructure.onlinePIN) &&
        Objects.equals(this.offlinePIN, cardholderVerificationMethodStructure.offlinePIN) &&
        Objects.equals(this.signature, cardholderVerificationMethodStructure.signature) &&
        Objects.equals(this.none, cardholderVerificationMethodStructure.none);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onlinePIN, offlinePIN, signature, none);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardholderVerificationMethodStructure {\n");
    sb.append("    onlinePIN: ").append(toIndentedString(onlinePIN)).append("\n");
    sb.append("    offlinePIN: ").append(toIndentedString(offlinePIN)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    none: ").append(toIndentedString(none)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onlinePIN");
    openapiFields.add("offlinePIN");
    openapiFields.add("signature");
    openapiFields.add("none");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CardholderVerificationMethodStructure
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardholderVerificationMethodStructure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardholderVerificationMethodStructure is not found in the empty JSON string", CardholderVerificationMethodStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardholderVerificationMethodStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardholderVerificationMethodStructure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("onlinePIN") != null && !jsonObj.get("onlinePIN").isJsonNull()) && !jsonObj.get("onlinePIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onlinePIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onlinePIN").toString()));
      }
      if ((jsonObj.get("offlinePIN") != null && !jsonObj.get("offlinePIN").isJsonNull()) && !jsonObj.get("offlinePIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlinePIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlinePIN").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("none") != null && !jsonObj.get("none").isJsonNull()) && !jsonObj.get("none").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `none` to be a primitive type in the JSON string but got `%s`", jsonObj.get("none").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardholderVerificationMethodStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardholderVerificationMethodStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardholderVerificationMethodStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardholderVerificationMethodStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<CardholderVerificationMethodStructure>() {
           @Override
           public void write(JsonWriter out, CardholderVerificationMethodStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardholderVerificationMethodStructure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardholderVerificationMethodStructure given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardholderVerificationMethodStructure
  * @throws IOException if the JSON string is invalid with respect to CardholderVerificationMethodStructure
  */
  public static CardholderVerificationMethodStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardholderVerificationMethodStructure.class);
  }

 /**
  * Convert an instance of CardholderVerificationMethodStructure to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

