/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * RetrievalSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class RetrievalSummary {
  public static final String SERIALIZED_NAME_ACQUIRER_REF_NUM = "acquirerRefNum";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REF_NUM)
  private String acquirerRefNum;

  public static final String SERIALIZED_NAME_ACQUIRER_RESPONSE_CD = "acquirerResponseCd";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_RESPONSE_CD)
  private String acquirerResponseCd;

  public static final String SERIALIZED_NAME_ACQUIRER_MEMO = "acquirerMemo";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_MEMO)
  private String acquirerMemo;

  public static final String SERIALIZED_NAME_ACQUIRER_RESPONSE_DT = "acquirerResponseDt";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_RESPONSE_DT)
  private String acquirerResponseDt;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CLAIM_ID = "claimId";
  @SerializedName(SERIALIZED_NAME_CLAIM_ID)
  private String claimId;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private String createDate;

  public static final String SERIALIZED_NAME_CANCEL_DATE = "cancelDate";
  @SerializedName(SERIALIZED_NAME_CANCEL_DATE)
  private String cancelDate;

  public static final String SERIALIZED_NAME_REVERSE_DATE = "reverseDate";
  @SerializedName(SERIALIZED_NAME_REVERSE_DATE)
  private String reverseDate;

  public static final String SERIALIZED_NAME_REJECT_DATE = "rejectDate";
  @SerializedName(SERIALIZED_NAME_REJECT_DATE)
  private String rejectDate;

  public static final String SERIALIZED_NAME_DOC_NEEDED = "docNeeded";
  @SerializedName(SERIALIZED_NAME_DOC_NEEDED)
  private String docNeeded;

  public static final String SERIALIZED_NAME_ISSUER_RESPONSE_CD = "issuerResponseCd";
  @SerializedName(SERIALIZED_NAME_ISSUER_RESPONSE_CD)
  private String issuerResponseCd;

  public static final String SERIALIZED_NAME_ISSUER_REJECT_RSN_CD = "issuerRejectRsnCd";
  @SerializedName(SERIALIZED_NAME_ISSUER_REJECT_RSN_CD)
  private String issuerRejectRsnCd;

  public static final String SERIALIZED_NAME_ISSUER_MEMO = "issuerMemo";
  @SerializedName(SERIALIZED_NAME_ISSUER_MEMO)
  private String issuerMemo;

  public static final String SERIALIZED_NAME_ISSUER_RESPONSE_DT = "issuerResponseDt";
  @SerializedName(SERIALIZED_NAME_ISSUER_RESPONSE_DT)
  private String issuerResponseDt;

  public static final String SERIALIZED_NAME_IMAGE_REVIEW_DECISION = "imageReviewDecision";
  @SerializedName(SERIALIZED_NAME_IMAGE_REVIEW_DECISION)
  private String imageReviewDecision;

  public static final String SERIALIZED_NAME_IMAGE_REVIEW_DT = "imageReviewDt";
  @SerializedName(SERIALIZED_NAME_IMAGE_REVIEW_DT)
  private String imageReviewDt;

  public static final String SERIALIZED_NAME_PRIMARY_ACCT_NUM = "primaryAcctNum";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCT_NUM)
  private String primaryAcctNum;

  public static final String SERIALIZED_NAME_REJECT_REASON = "rejectReason";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON)
  private String rejectReason;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RETRIEVAL_REQUEST_REASON = "retrievalRequestReason";
  @SerializedName(SERIALIZED_NAME_RETRIEVAL_REQUEST_REASON)
  private String retrievalRequestReason;

  public static final String SERIALIZED_NAME_CHARGEBACK_REF_NUM = "chargebackRefNum";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_REF_NUM)
  private String chargebackRefNum;

  public static final String SERIALIZED_NAME_ACQUIRER_RESPONSE_NOTIFICATION_STATUS = "acquirerResponseNotificationStatus";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_RESPONSE_NOTIFICATION_STATUS)
  private String acquirerResponseNotificationStatus;

  public static final String SERIALIZED_NAME_INSTRUCTIONS_FOR_HEALTHCARE = "instructionsForHealthcare";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_FOR_HEALTHCARE)
  private String instructionsForHealthcare;

  public static final String SERIALIZED_NAME_REFUND_REVERSAL_DATE = "refundReversalDate";
  @SerializedName(SERIALIZED_NAME_REFUND_REVERSAL_DATE)
  private String refundReversalDate;

  public static final String SERIALIZED_NAME_REFUND_REVERSAL_AMOUNT = "refundReversalAmount";
  @SerializedName(SERIALIZED_NAME_REFUND_REVERSAL_AMOUNT)
  private String refundReversalAmount;

  public static final String SERIALIZED_NAME_REFUND_REVERSAL_CURRENCY = "refundReversalCurrency";
  @SerializedName(SERIALIZED_NAME_REFUND_REVERSAL_CURRENCY)
  private String refundReversalCurrency;

  public static final String SERIALIZED_NAME_REFUND_REVERSAL_TYPE = "refundReversalType";
  @SerializedName(SERIALIZED_NAME_REFUND_REVERSAL_TYPE)
  private String refundReversalType;

  public static final String SERIALIZED_NAME_REFUND_REVERSAL_REFERENCE_ID = "refundReversalReferenceId";
  @SerializedName(SERIALIZED_NAME_REFUND_REVERSAL_REFERENCE_ID)
  private String refundReversalReferenceId;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_FLEX_CODE = "flexCode";
  @SerializedName(SERIALIZED_NAME_FLEX_CODE)
  private String flexCode;

  public static final String SERIALIZED_NAME_COLLABORATION_EXPIRATION_DATE_TIME = "collaborationExpirationDateTime";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_EXPIRATION_DATE_TIME)
  private String collaborationExpirationDateTime;

  public RetrievalSummary() {
  }

  public RetrievalSummary acquirerRefNum(String acquirerRefNum) {
    
    this.acquirerRefNum = acquirerRefNum;
    return this;
  }

   /**
   * Acquirer Reference Number is a unique number that tags a credit card transaction when it goes from the merchants bank (The Acquiring Bank) through the card scheme to the cardholders bank (The Issuer)
   * @return acquirerRefNum
  **/
  @javax.annotation.Nullable
  public String getAcquirerRefNum() {
    return acquirerRefNum;
  }


  public void setAcquirerRefNum(String acquirerRefNum) {
    this.acquirerRefNum = acquirerRefNum;
  }


  public RetrievalSummary acquirerResponseCd(String acquirerResponseCd) {
    
    this.acquirerResponseCd = acquirerResponseCd;
    return this;
  }

   /**
   * Predetermined response code chosen by the Acquirer
   * @return acquirerResponseCd
  **/
  @javax.annotation.Nullable
  public String getAcquirerResponseCd() {
    return acquirerResponseCd;
  }


  public void setAcquirerResponseCd(String acquirerResponseCd) {
    this.acquirerResponseCd = acquirerResponseCd;
  }


  public RetrievalSummary acquirerMemo(String acquirerMemo) {
    
    this.acquirerMemo = acquirerMemo;
    return this;
  }

   /**
   * The memo the acquirer created when fulfilling the retrieval request
   * @return acquirerMemo
  **/
  @javax.annotation.Nullable
  public String getAcquirerMemo() {
    return acquirerMemo;
  }


  public void setAcquirerMemo(String acquirerMemo) {
    this.acquirerMemo = acquirerMemo;
  }


  public RetrievalSummary acquirerResponseDt(String acquirerResponseDt) {
    
    this.acquirerResponseDt = acquirerResponseDt;
    return this;
  }

   /**
   * Date the acquirer responded to the fulfillment request
   * @return acquirerResponseDt
  **/
  @javax.annotation.Nullable
  public String getAcquirerResponseDt() {
    return acquirerResponseDt;
  }


  public void setAcquirerResponseDt(String acquirerResponseDt) {
    this.acquirerResponseDt = acquirerResponseDt;
  }


  public RetrievalSummary amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount of the claim
   * @return amount
  **/
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public RetrievalSummary currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The retrieval currency.  The data should be standard currency alpha code
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public RetrievalSummary claimId(String claimId) {
    
    this.claimId = claimId;
    return this;
  }

   /**
   * Claim identifier
   * @return claimId
  **/
  @javax.annotation.Nullable
  public String getClaimId() {
    return claimId;
  }


  public void setClaimId(String claimId) {
    this.claimId = claimId;
  }


  public RetrievalSummary createDate(String createDate) {
    
    this.createDate = createDate;
    return this;
  }

   /**
   * This is the date of the Retrieval Request creation
   * @return createDate
  **/
  @javax.annotation.Nullable
  public String getCreateDate() {
    return createDate;
  }


  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }


  public RetrievalSummary cancelDate(String cancelDate) {
    
    this.cancelDate = cancelDate;
    return this;
  }

   /**
   * This is the date of the Retrieval Request cancelation
   * @return cancelDate
  **/
  @javax.annotation.Nullable
  public String getCancelDate() {
    return cancelDate;
  }


  public void setCancelDate(String cancelDate) {
    this.cancelDate = cancelDate;
  }


  public RetrievalSummary reverseDate(String reverseDate) {
    
    this.reverseDate = reverseDate;
    return this;
  }

   /**
   * This is the date of the Retrieval Request reversion
   * @return reverseDate
  **/
  @javax.annotation.Nullable
  public String getReverseDate() {
    return reverseDate;
  }


  public void setReverseDate(String reverseDate) {
    this.reverseDate = reverseDate;
  }


  public RetrievalSummary rejectDate(String rejectDate) {
    
    this.rejectDate = rejectDate;
    return this;
  }

   /**
   * This is the date of the Retrieval Request rejection by GCMS
   * @return rejectDate
  **/
  @javax.annotation.Nullable
  public String getRejectDate() {
    return rejectDate;
  }


  public void setRejectDate(String rejectDate) {
    this.rejectDate = rejectDate;
  }


  public RetrievalSummary docNeeded(String docNeeded) {
    
    this.docNeeded = docNeeded;
    return this;
  }

   /**
   * Documentation Needed Indicator. Possible values are    - NONE: Present when acquirer has not yet responded to a Collaboration request or present for issuers when the acquirer has responded with response code A (funds movement request)    - Refund: Present when acquirer has responded to a Collaboration request with response code B (Refunded) and provided refund details or when acquirer has responded with response code C (Initiating refund)    - Credit Voucher: Present when acquirer has responded to a Collaboration request with response code B (Refunded) and provided a credit voucher    - null: Present when no other values are applicable    **Note:** The following apply only to U.S. healthcare transactions.    - 2 (Copy or image such as a photocopy, microfilm, fax of original document)    - 4 (Substitute draft)   
   * @return docNeeded
  **/
  @javax.annotation.Nullable
  public String getDocNeeded() {
    return docNeeded;
  }


  public void setDocNeeded(String docNeeded) {
    this.docNeeded = docNeeded;
  }


  public RetrievalSummary issuerResponseCd(String issuerResponseCd) {
    
    this.issuerResponseCd = issuerResponseCd;
    return this;
  }

   /**
   * Predetermined response code chosen by the Issuer
   * @return issuerResponseCd
  **/
  @javax.annotation.Nullable
  public String getIssuerResponseCd() {
    return issuerResponseCd;
  }


  public void setIssuerResponseCd(String issuerResponseCd) {
    this.issuerResponseCd = issuerResponseCd;
  }


  public RetrievalSummary issuerRejectRsnCd(String issuerRejectRsnCd) {
    
    this.issuerRejectRsnCd = issuerRejectRsnCd;
    return this;
  }

   /**
   * Predetermined reject reason codes
   * @return issuerRejectRsnCd
  **/
  @javax.annotation.Nullable
  public String getIssuerRejectRsnCd() {
    return issuerRejectRsnCd;
  }


  public void setIssuerRejectRsnCd(String issuerRejectRsnCd) {
    this.issuerRejectRsnCd = issuerRejectRsnCd;
  }


  public RetrievalSummary issuerMemo(String issuerMemo) {
    
    this.issuerMemo = issuerMemo;
    return this;
  }

   /**
   * Memo pertaining to the case
   * @return issuerMemo
  **/
  @javax.annotation.Nullable
  public String getIssuerMemo() {
    return issuerMemo;
  }


  public void setIssuerMemo(String issuerMemo) {
    this.issuerMemo = issuerMemo;
  }


  public RetrievalSummary issuerResponseDt(String issuerResponseDt) {
    
    this.issuerResponseDt = issuerResponseDt;
    return this;
  }

   /**
   * Date the issuer responded to the fulfillment
   * @return issuerResponseDt
  **/
  @javax.annotation.Nullable
  public String getIssuerResponseDt() {
    return issuerResponseDt;
  }


  public void setIssuerResponseDt(String issuerResponseDt) {
    this.issuerResponseDt = issuerResponseDt;
  }


  public RetrievalSummary imageReviewDecision(String imageReviewDecision) {
    
    this.imageReviewDecision = imageReviewDecision;
    return this;
  }

   /**
   * The image review decision
   * @return imageReviewDecision
  **/
  @javax.annotation.Nullable
  public String getImageReviewDecision() {
    return imageReviewDecision;
  }


  public void setImageReviewDecision(String imageReviewDecision) {
    this.imageReviewDecision = imageReviewDecision;
  }


  public RetrievalSummary imageReviewDt(String imageReviewDt) {
    
    this.imageReviewDt = imageReviewDt;
    return this;
  }

   /**
   * Date the image review decision occurred
   * @return imageReviewDt
  **/
  @javax.annotation.Nullable
  public String getImageReviewDt() {
    return imageReviewDt;
  }


  public void setImageReviewDt(String imageReviewDt) {
    this.imageReviewDt = imageReviewDt;
  }


  public RetrievalSummary primaryAcctNum(String primaryAcctNum) {
    
    this.primaryAcctNum = primaryAcctNum;
    return this;
  }

   /**
   * Primary Account Number
   * @return primaryAcctNum
  **/
  @javax.annotation.Nullable
  public String getPrimaryAcctNum() {
    return primaryAcctNum;
  }


  public void setPrimaryAcctNum(String primaryAcctNum) {
    this.primaryAcctNum = primaryAcctNum;
  }


  public RetrievalSummary rejectReason(String rejectReason) {
    
    this.rejectReason = rejectReason;
    return this;
  }

   /**
   * Retrieval Request reject reason.
   * @return rejectReason
  **/
  @javax.annotation.Nullable
  public String getRejectReason() {
    return rejectReason;
  }


  public void setRejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
  }


  public RetrievalSummary requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier assigned to the fulfillment
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public RetrievalSummary retrievalRequestReason(String retrievalRequestReason) {
    
    this.retrievalRequestReason = retrievalRequestReason;
    return this;
  }

   /**
   * Retrieval Request Reason
   * @return retrievalRequestReason
  **/
  @javax.annotation.Nullable
  public String getRetrievalRequestReason() {
    return retrievalRequestReason;
  }


  public void setRetrievalRequestReason(String retrievalRequestReason) {
    this.retrievalRequestReason = retrievalRequestReason;
  }


  public RetrievalSummary chargebackRefNum(String chargebackRefNum) {
    
    this.chargebackRefNum = chargebackRefNum;
    return this;
  }

   /**
   * Contains card issuer reference data for a specific cardholder transaction. This number must be unique within BIN. It is used to track the chargeback throughout its life cycle
   * @return chargebackRefNum
  **/
  @javax.annotation.Nullable
  public String getChargebackRefNum() {
    return chargebackRefNum;
  }


  public void setChargebackRefNum(String chargebackRefNum) {
    this.chargebackRefNum = chargebackRefNum;
  }


  public RetrievalSummary acquirerResponseNotificationStatus(String acquirerResponseNotificationStatus) {
    
    this.acquirerResponseNotificationStatus = acquirerResponseNotificationStatus;
    return this;
  }

   /**
   * The field would show Processed or Rejected or Pending or Cancelled status depending on the GCMS processing of the retrieval request. Pending- Item created but NOT yet sent to GCMS Cancelled- Item discarded without being sent to GCMS Processed- Item is being sent for clearing (via ipmClearingOutput batch job) Rejected- If item being rejected from GCMS (No update on Issuer side claim).
   * @return acquirerResponseNotificationStatus
  **/
  @javax.annotation.Nullable
  public String getAcquirerResponseNotificationStatus() {
    return acquirerResponseNotificationStatus;
  }


  public void setAcquirerResponseNotificationStatus(String acquirerResponseNotificationStatus) {
    this.acquirerResponseNotificationStatus = acquirerResponseNotificationStatus;
  }


  public RetrievalSummary instructionsForHealthcare(String instructionsForHealthcare) {
    
    this.instructionsForHealthcare = instructionsForHealthcare;
    return this;
  }

   /**
   * Instructions for healthcare
   * @return instructionsForHealthcare
  **/
  @javax.annotation.Nullable
  public String getInstructionsForHealthcare() {
    return instructionsForHealthcare;
  }


  public void setInstructionsForHealthcare(String instructionsForHealthcare) {
    this.instructionsForHealthcare = instructionsForHealthcare;
  }


  public RetrievalSummary refundReversalDate(String refundReversalDate) {
    
    this.refundReversalDate = refundReversalDate;
    return this;
  }

   /**
   * Refund/Reversal Date
   * @return refundReversalDate
  **/
  @javax.annotation.Nullable
  public String getRefundReversalDate() {
    return refundReversalDate;
  }


  public void setRefundReversalDate(String refundReversalDate) {
    this.refundReversalDate = refundReversalDate;
  }


  public RetrievalSummary refundReversalAmount(String refundReversalAmount) {
    
    this.refundReversalAmount = refundReversalAmount;
    return this;
  }

   /**
   * Refund/Reversal Amount
   * @return refundReversalAmount
  **/
  @javax.annotation.Nullable
  public String getRefundReversalAmount() {
    return refundReversalAmount;
  }


  public void setRefundReversalAmount(String refundReversalAmount) {
    this.refundReversalAmount = refundReversalAmount;
  }


  public RetrievalSummary refundReversalCurrency(String refundReversalCurrency) {
    
    this.refundReversalCurrency = refundReversalCurrency;
    return this;
  }

   /**
   * Refund/Reversal Currency
   * @return refundReversalCurrency
  **/
  @javax.annotation.Nullable
  public String getRefundReversalCurrency() {
    return refundReversalCurrency;
  }


  public void setRefundReversalCurrency(String refundReversalCurrency) {
    this.refundReversalCurrency = refundReversalCurrency;
  }


  public RetrievalSummary refundReversalType(String refundReversalType) {
    
    this.refundReversalType = refundReversalType;
    return this;
  }

   /**
   * Refund/Reversal Type
   * @return refundReversalType
  **/
  @javax.annotation.Nullable
  public String getRefundReversalType() {
    return refundReversalType;
  }


  public void setRefundReversalType(String refundReversalType) {
    this.refundReversalType = refundReversalType;
  }


  public RetrievalSummary refundReversalReferenceId(String refundReversalReferenceId) {
    
    this.refundReversalReferenceId = refundReversalReferenceId;
    return this;
  }

   /**
   * Refund/Reversal reference ID
   * @return refundReversalReferenceId
  **/
  @javax.annotation.Nullable
  public String getRefundReversalReferenceId() {
    return refundReversalReferenceId;
  }


  public void setRefundReversalReferenceId(String refundReversalReferenceId) {
    this.refundReversalReferenceId = refundReversalReferenceId;
  }


  public RetrievalSummary memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Memo
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public RetrievalSummary flexCode(String flexCode) {
    
    this.flexCode = flexCode;
    return this;
  }

   /**
   * Specific to Brazil Flex Card transactions to communicate the product code used for clearing.
   * @return flexCode
  **/
  @javax.annotation.Nullable
  public String getFlexCode() {
    return flexCode;
  }


  public void setFlexCode(String flexCode) {
    this.flexCode = flexCode;
  }


  public RetrievalSummary collaborationExpirationDateTime(String collaborationExpirationDateTime) {
    
    this.collaborationExpirationDateTime = collaborationExpirationDateTime;
    return this;
  }

   /**
   * Date and time by which the acquirer can respond to a Collaboration request.
   * @return collaborationExpirationDateTime
  **/
  @javax.annotation.Nullable
  public String getCollaborationExpirationDateTime() {
    return collaborationExpirationDateTime;
  }


  public void setCollaborationExpirationDateTime(String collaborationExpirationDateTime) {
    this.collaborationExpirationDateTime = collaborationExpirationDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrievalSummary retrievalSummary = (RetrievalSummary) o;
    return Objects.equals(this.acquirerRefNum, retrievalSummary.acquirerRefNum) &&
        Objects.equals(this.acquirerResponseCd, retrievalSummary.acquirerResponseCd) &&
        Objects.equals(this.acquirerMemo, retrievalSummary.acquirerMemo) &&
        Objects.equals(this.acquirerResponseDt, retrievalSummary.acquirerResponseDt) &&
        Objects.equals(this.amount, retrievalSummary.amount) &&
        Objects.equals(this.currency, retrievalSummary.currency) &&
        Objects.equals(this.claimId, retrievalSummary.claimId) &&
        Objects.equals(this.createDate, retrievalSummary.createDate) &&
        Objects.equals(this.cancelDate, retrievalSummary.cancelDate) &&
        Objects.equals(this.reverseDate, retrievalSummary.reverseDate) &&
        Objects.equals(this.rejectDate, retrievalSummary.rejectDate) &&
        Objects.equals(this.docNeeded, retrievalSummary.docNeeded) &&
        Objects.equals(this.issuerResponseCd, retrievalSummary.issuerResponseCd) &&
        Objects.equals(this.issuerRejectRsnCd, retrievalSummary.issuerRejectRsnCd) &&
        Objects.equals(this.issuerMemo, retrievalSummary.issuerMemo) &&
        Objects.equals(this.issuerResponseDt, retrievalSummary.issuerResponseDt) &&
        Objects.equals(this.imageReviewDecision, retrievalSummary.imageReviewDecision) &&
        Objects.equals(this.imageReviewDt, retrievalSummary.imageReviewDt) &&
        Objects.equals(this.primaryAcctNum, retrievalSummary.primaryAcctNum) &&
        Objects.equals(this.rejectReason, retrievalSummary.rejectReason) &&
        Objects.equals(this.requestId, retrievalSummary.requestId) &&
        Objects.equals(this.retrievalRequestReason, retrievalSummary.retrievalRequestReason) &&
        Objects.equals(this.chargebackRefNum, retrievalSummary.chargebackRefNum) &&
        Objects.equals(this.acquirerResponseNotificationStatus, retrievalSummary.acquirerResponseNotificationStatus) &&
        Objects.equals(this.instructionsForHealthcare, retrievalSummary.instructionsForHealthcare) &&
        Objects.equals(this.refundReversalDate, retrievalSummary.refundReversalDate) &&
        Objects.equals(this.refundReversalAmount, retrievalSummary.refundReversalAmount) &&
        Objects.equals(this.refundReversalCurrency, retrievalSummary.refundReversalCurrency) &&
        Objects.equals(this.refundReversalType, retrievalSummary.refundReversalType) &&
        Objects.equals(this.refundReversalReferenceId, retrievalSummary.refundReversalReferenceId) &&
        Objects.equals(this.memo, retrievalSummary.memo) &&
        Objects.equals(this.flexCode, retrievalSummary.flexCode) &&
        Objects.equals(this.collaborationExpirationDateTime, retrievalSummary.collaborationExpirationDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerRefNum, acquirerResponseCd, acquirerMemo, acquirerResponseDt, amount, currency, claimId, createDate, cancelDate, reverseDate, rejectDate, docNeeded, issuerResponseCd, issuerRejectRsnCd, issuerMemo, issuerResponseDt, imageReviewDecision, imageReviewDt, primaryAcctNum, rejectReason, requestId, retrievalRequestReason, chargebackRefNum, acquirerResponseNotificationStatus, instructionsForHealthcare, refundReversalDate, refundReversalAmount, refundReversalCurrency, refundReversalType, refundReversalReferenceId, memo, flexCode, collaborationExpirationDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrievalSummary {\n");
    sb.append("    acquirerRefNum: ").append(toIndentedString(acquirerRefNum)).append("\n");
    sb.append("    acquirerResponseCd: ").append(toIndentedString(acquirerResponseCd)).append("\n");
    sb.append("    acquirerMemo: ").append(toIndentedString(acquirerMemo)).append("\n");
    sb.append("    acquirerResponseDt: ").append(toIndentedString(acquirerResponseDt)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    claimId: ").append(toIndentedString(claimId)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    cancelDate: ").append(toIndentedString(cancelDate)).append("\n");
    sb.append("    reverseDate: ").append(toIndentedString(reverseDate)).append("\n");
    sb.append("    rejectDate: ").append(toIndentedString(rejectDate)).append("\n");
    sb.append("    docNeeded: ").append(toIndentedString(docNeeded)).append("\n");
    sb.append("    issuerResponseCd: ").append(toIndentedString(issuerResponseCd)).append("\n");
    sb.append("    issuerRejectRsnCd: ").append(toIndentedString(issuerRejectRsnCd)).append("\n");
    sb.append("    issuerMemo: ").append(toIndentedString(issuerMemo)).append("\n");
    sb.append("    issuerResponseDt: ").append(toIndentedString(issuerResponseDt)).append("\n");
    sb.append("    imageReviewDecision: ").append(toIndentedString(imageReviewDecision)).append("\n");
    sb.append("    imageReviewDt: ").append(toIndentedString(imageReviewDt)).append("\n");
    sb.append("    primaryAcctNum: ").append(toIndentedString(primaryAcctNum)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    retrievalRequestReason: ").append(toIndentedString(retrievalRequestReason)).append("\n");
    sb.append("    chargebackRefNum: ").append(toIndentedString(chargebackRefNum)).append("\n");
    sb.append("    acquirerResponseNotificationStatus: ").append(toIndentedString(acquirerResponseNotificationStatus)).append("\n");
    sb.append("    instructionsForHealthcare: ").append(toIndentedString(instructionsForHealthcare)).append("\n");
    sb.append("    refundReversalDate: ").append(toIndentedString(refundReversalDate)).append("\n");
    sb.append("    refundReversalAmount: ").append(toIndentedString(refundReversalAmount)).append("\n");
    sb.append("    refundReversalCurrency: ").append(toIndentedString(refundReversalCurrency)).append("\n");
    sb.append("    refundReversalType: ").append(toIndentedString(refundReversalType)).append("\n");
    sb.append("    refundReversalReferenceId: ").append(toIndentedString(refundReversalReferenceId)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    flexCode: ").append(toIndentedString(flexCode)).append("\n");
    sb.append("    collaborationExpirationDateTime: ").append(toIndentedString(collaborationExpirationDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirerRefNum");
    openapiFields.add("acquirerResponseCd");
    openapiFields.add("acquirerMemo");
    openapiFields.add("acquirerResponseDt");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("claimId");
    openapiFields.add("createDate");
    openapiFields.add("cancelDate");
    openapiFields.add("reverseDate");
    openapiFields.add("rejectDate");
    openapiFields.add("docNeeded");
    openapiFields.add("issuerResponseCd");
    openapiFields.add("issuerRejectRsnCd");
    openapiFields.add("issuerMemo");
    openapiFields.add("issuerResponseDt");
    openapiFields.add("imageReviewDecision");
    openapiFields.add("imageReviewDt");
    openapiFields.add("primaryAcctNum");
    openapiFields.add("rejectReason");
    openapiFields.add("requestId");
    openapiFields.add("retrievalRequestReason");
    openapiFields.add("chargebackRefNum");
    openapiFields.add("acquirerResponseNotificationStatus");
    openapiFields.add("instructionsForHealthcare");
    openapiFields.add("refundReversalDate");
    openapiFields.add("refundReversalAmount");
    openapiFields.add("refundReversalCurrency");
    openapiFields.add("refundReversalType");
    openapiFields.add("refundReversalReferenceId");
    openapiFields.add("memo");
    openapiFields.add("flexCode");
    openapiFields.add("collaborationExpirationDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RetrievalSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrievalSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrievalSummary is not found in the empty JSON string", RetrievalSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrievalSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrievalSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirerRefNum") != null && !jsonObj.get("acquirerRefNum").isJsonNull()) && !jsonObj.get("acquirerRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerRefNum").toString()));
      }
      if ((jsonObj.get("acquirerResponseCd") != null && !jsonObj.get("acquirerResponseCd").isJsonNull()) && !jsonObj.get("acquirerResponseCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerResponseCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerResponseCd").toString()));
      }
      if ((jsonObj.get("acquirerMemo") != null && !jsonObj.get("acquirerMemo").isJsonNull()) && !jsonObj.get("acquirerMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerMemo").toString()));
      }
      if ((jsonObj.get("acquirerResponseDt") != null && !jsonObj.get("acquirerResponseDt").isJsonNull()) && !jsonObj.get("acquirerResponseDt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerResponseDt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerResponseDt").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("claimId") != null && !jsonObj.get("claimId").isJsonNull()) && !jsonObj.get("claimId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimId").toString()));
      }
      if ((jsonObj.get("createDate") != null && !jsonObj.get("createDate").isJsonNull()) && !jsonObj.get("createDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDate").toString()));
      }
      if ((jsonObj.get("cancelDate") != null && !jsonObj.get("cancelDate").isJsonNull()) && !jsonObj.get("cancelDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelDate").toString()));
      }
      if ((jsonObj.get("reverseDate") != null && !jsonObj.get("reverseDate").isJsonNull()) && !jsonObj.get("reverseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reverseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reverseDate").toString()));
      }
      if ((jsonObj.get("rejectDate") != null && !jsonObj.get("rejectDate").isJsonNull()) && !jsonObj.get("rejectDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectDate").toString()));
      }
      if ((jsonObj.get("docNeeded") != null && !jsonObj.get("docNeeded").isJsonNull()) && !jsonObj.get("docNeeded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNeeded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNeeded").toString()));
      }
      if ((jsonObj.get("issuerResponseCd") != null && !jsonObj.get("issuerResponseCd").isJsonNull()) && !jsonObj.get("issuerResponseCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerResponseCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerResponseCd").toString()));
      }
      if ((jsonObj.get("issuerRejectRsnCd") != null && !jsonObj.get("issuerRejectRsnCd").isJsonNull()) && !jsonObj.get("issuerRejectRsnCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerRejectRsnCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerRejectRsnCd").toString()));
      }
      if ((jsonObj.get("issuerMemo") != null && !jsonObj.get("issuerMemo").isJsonNull()) && !jsonObj.get("issuerMemo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerMemo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerMemo").toString()));
      }
      if ((jsonObj.get("issuerResponseDt") != null && !jsonObj.get("issuerResponseDt").isJsonNull()) && !jsonObj.get("issuerResponseDt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerResponseDt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerResponseDt").toString()));
      }
      if ((jsonObj.get("imageReviewDecision") != null && !jsonObj.get("imageReviewDecision").isJsonNull()) && !jsonObj.get("imageReviewDecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageReviewDecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageReviewDecision").toString()));
      }
      if ((jsonObj.get("imageReviewDt") != null && !jsonObj.get("imageReviewDt").isJsonNull()) && !jsonObj.get("imageReviewDt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageReviewDt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageReviewDt").toString()));
      }
      if ((jsonObj.get("primaryAcctNum") != null && !jsonObj.get("primaryAcctNum").isJsonNull()) && !jsonObj.get("primaryAcctNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAcctNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAcctNum").toString()));
      }
      if ((jsonObj.get("rejectReason") != null && !jsonObj.get("rejectReason").isJsonNull()) && !jsonObj.get("rejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectReason").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("retrievalRequestReason") != null && !jsonObj.get("retrievalRequestReason").isJsonNull()) && !jsonObj.get("retrievalRequestReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrievalRequestReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrievalRequestReason").toString()));
      }
      if ((jsonObj.get("chargebackRefNum") != null && !jsonObj.get("chargebackRefNum").isJsonNull()) && !jsonObj.get("chargebackRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackRefNum").toString()));
      }
      if ((jsonObj.get("acquirerResponseNotificationStatus") != null && !jsonObj.get("acquirerResponseNotificationStatus").isJsonNull()) && !jsonObj.get("acquirerResponseNotificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerResponseNotificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerResponseNotificationStatus").toString()));
      }
      if ((jsonObj.get("instructionsForHealthcare") != null && !jsonObj.get("instructionsForHealthcare").isJsonNull()) && !jsonObj.get("instructionsForHealthcare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsForHealthcare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsForHealthcare").toString()));
      }
      if ((jsonObj.get("refundReversalDate") != null && !jsonObj.get("refundReversalDate").isJsonNull()) && !jsonObj.get("refundReversalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReversalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReversalDate").toString()));
      }
      if ((jsonObj.get("refundReversalAmount") != null && !jsonObj.get("refundReversalAmount").isJsonNull()) && !jsonObj.get("refundReversalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReversalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReversalAmount").toString()));
      }
      if ((jsonObj.get("refundReversalCurrency") != null && !jsonObj.get("refundReversalCurrency").isJsonNull()) && !jsonObj.get("refundReversalCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReversalCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReversalCurrency").toString()));
      }
      if ((jsonObj.get("refundReversalType") != null && !jsonObj.get("refundReversalType").isJsonNull()) && !jsonObj.get("refundReversalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReversalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReversalType").toString()));
      }
      if ((jsonObj.get("refundReversalReferenceId") != null && !jsonObj.get("refundReversalReferenceId").isJsonNull()) && !jsonObj.get("refundReversalReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundReversalReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundReversalReferenceId").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("flexCode") != null && !jsonObj.get("flexCode").isJsonNull()) && !jsonObj.get("flexCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flexCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flexCode").toString()));
      }
      if ((jsonObj.get("collaborationExpirationDateTime") != null && !jsonObj.get("collaborationExpirationDateTime").isJsonNull()) && !jsonObj.get("collaborationExpirationDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborationExpirationDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborationExpirationDateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrievalSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrievalSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrievalSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrievalSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrievalSummary>() {
           @Override
           public void write(JsonWriter out, RetrievalSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrievalSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrievalSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrievalSummary
  * @throws IOException if the JSON string is invalid with respect to RetrievalSummary
  */
  public static RetrievalSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrievalSummary.class);
  }

 /**
  * Convert an instance of RetrievalSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

