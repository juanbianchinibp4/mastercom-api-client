/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * TransactionSingleSearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class TransactionSingleSearchRequest {
  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_SETTLEMENT_FROM_DATE = "settlementFromDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_FROM_DATE)
  private String settlementFromDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_TO_DATE = "settlementToDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_TO_DATE)
  private String settlementToDate;

  public static final String SERIALIZED_NAME_ACQUIRER_REF_NUMBER = "acquirerRefNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REF_NUMBER)
  private String acquirerRefNumber;

  public static final String SERIALIZED_NAME_SWITCH_SERIAL_NUMBER = "switchSerialNumber";
  @SerializedName(SERIALIZED_NAME_SWITCH_SERIAL_NUMBER)
  private String switchSerialNumber;

  public TransactionSingleSearchRequest() {
  }

  public TransactionSingleSearchRequest primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Primary Account Number [PAN] is a series of digits used to identify a customer account or relationship.   Length: 12-19   Valid Values/Format: Numeric
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nonnull
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public TransactionSingleSearchRequest settlementFromDate(String settlementFromDate) {
    
    this.settlementFromDate = settlementFromDate;
    return this;
  }

   /**
   * From date of Settlement date range to search for a transaction. Mastercard uses Settlement Date to group the transactions for reporting and for subsequent settlement. The search range is a maximum of 30 days, and searches can be completed for up to 180 days of history.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return settlementFromDate
  **/
  @javax.annotation.Nonnull
  public String getSettlementFromDate() {
    return settlementFromDate;
  }


  public void setSettlementFromDate(String settlementFromDate) {
    this.settlementFromDate = settlementFromDate;
  }


  public TransactionSingleSearchRequest settlementToDate(String settlementToDate) {
    
    this.settlementToDate = settlementToDate;
    return this;
  }

   /**
   * To date of Settlement date range to search for a transaction. Mastercard uses Settlement Date to group the transactions for reporting and for subsequent settlement. The search range is a maximum of 30 days, and searches can be completed for up to 180 days of history.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return settlementToDate
  **/
  @javax.annotation.Nonnull
  public String getSettlementToDate() {
    return settlementToDate;
  }


  public void setSettlementToDate(String settlementToDate) {
    this.settlementToDate = settlementToDate;
  }


  public TransactionSingleSearchRequest acquirerRefNumber(String acquirerRefNumber) {
    
    this.acquirerRefNumber = acquirerRefNumber;
    return this;
  }

   /**
   * Acquirer Reference Data is data an acquirer supplies in an acquirer-originated message that may be required for an issuer to return to the acquirer in a subsequent message
   * @return acquirerRefNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerRefNumber() {
    return acquirerRefNumber;
  }


  public void setAcquirerRefNumber(String acquirerRefNumber) {
    this.acquirerRefNumber = acquirerRefNumber;
  }


  public TransactionSingleSearchRequest switchSerialNumber(String switchSerialNumber) {
    
    this.switchSerialNumber = switchSerialNumber;
    return this;
  }

   /**
   * The Switch Serial Number is a unique transaction identification number generated (or assigned) by the Single Message.   Length: 9   Valid Values/Format: Numeric
   * @return switchSerialNumber
  **/
  @javax.annotation.Nullable
  public String getSwitchSerialNumber() {
    return switchSerialNumber;
  }


  public void setSwitchSerialNumber(String switchSerialNumber) {
    this.switchSerialNumber = switchSerialNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSingleSearchRequest transactionSingleSearchRequest = (TransactionSingleSearchRequest) o;
    return Objects.equals(this.primaryAccountNumber, transactionSingleSearchRequest.primaryAccountNumber) &&
        Objects.equals(this.settlementFromDate, transactionSingleSearchRequest.settlementFromDate) &&
        Objects.equals(this.settlementToDate, transactionSingleSearchRequest.settlementToDate) &&
        Objects.equals(this.acquirerRefNumber, transactionSingleSearchRequest.acquirerRefNumber) &&
        Objects.equals(this.switchSerialNumber, transactionSingleSearchRequest.switchSerialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryAccountNumber, settlementFromDate, settlementToDate, acquirerRefNumber, switchSerialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSingleSearchRequest {\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    settlementFromDate: ").append(toIndentedString(settlementFromDate)).append("\n");
    sb.append("    settlementToDate: ").append(toIndentedString(settlementToDate)).append("\n");
    sb.append("    acquirerRefNumber: ").append(toIndentedString(acquirerRefNumber)).append("\n");
    sb.append("    switchSerialNumber: ").append(toIndentedString(switchSerialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("settlementFromDate");
    openapiFields.add("settlementToDate");
    openapiFields.add("acquirerRefNumber");
    openapiFields.add("switchSerialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("primaryAccountNumber");
    openapiRequiredFields.add("settlementFromDate");
    openapiRequiredFields.add("settlementToDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSingleSearchRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSingleSearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSingleSearchRequest is not found in the empty JSON string", TransactionSingleSearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionSingleSearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionSingleSearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionSingleSearchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if (!jsonObj.get("settlementFromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementFromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementFromDate").toString()));
      }
      if (!jsonObj.get("settlementToDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementToDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementToDate").toString()));
      }
      if ((jsonObj.get("acquirerRefNumber") != null && !jsonObj.get("acquirerRefNumber").isJsonNull()) && !jsonObj.get("acquirerRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerRefNumber").toString()));
      }
      if ((jsonObj.get("switchSerialNumber") != null && !jsonObj.get("switchSerialNumber").isJsonNull()) && !jsonObj.get("switchSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchSerialNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSingleSearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSingleSearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSingleSearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSingleSearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSingleSearchRequest>() {
           @Override
           public void write(JsonWriter out, TransactionSingleSearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSingleSearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSingleSearchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSingleSearchRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionSingleSearchRequest
  */
  public static TransactionSingleSearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSingleSearchRequest.class);
  }

 /**
  * Convert an instance of TransactionSingleSearchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

