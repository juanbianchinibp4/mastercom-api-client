/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import bp4.mastercom_api_client.model.ClaimSummary;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * QueueContentSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class QueueContentSummary {
  public static final String SERIALIZED_NAME_PAGE_COUNT = "pageCount";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private String pageCount;

  public static final String SERIALIZED_NAME_CLAIM_LIST = "claimList";
  @SerializedName(SERIALIZED_NAME_CLAIM_LIST)
  private List<ClaimSummary> claimList;

  public QueueContentSummary() {
  }

  public QueueContentSummary pageCount(String pageCount) {
    
    this.pageCount = pageCount;
    return this;
  }

   /**
   * The number of pages queue results can be returned
   * @return pageCount
  **/
  @javax.annotation.Nullable
  public String getPageCount() {
    return pageCount;
  }


  public void setPageCount(String pageCount) {
    this.pageCount = pageCount;
  }


  public QueueContentSummary claimList(List<ClaimSummary> claimList) {
    
    this.claimList = claimList;
    return this;
  }

  public QueueContentSummary addClaimListItem(ClaimSummary claimListItem) {
    if (this.claimList == null) {
      this.claimList = new ArrayList<>();
    }
    this.claimList.add(claimListItem);
    return this;
  }

   /**
   * Get claimList
   * @return claimList
  **/
  @javax.annotation.Nullable
  public List<ClaimSummary> getClaimList() {
    return claimList;
  }


  public void setClaimList(List<ClaimSummary> claimList) {
    this.claimList = claimList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueContentSummary queueContentSummary = (QueueContentSummary) o;
    return Objects.equals(this.pageCount, queueContentSummary.pageCount) &&
        Objects.equals(this.claimList, queueContentSummary.claimList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageCount, claimList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueContentSummary {\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    claimList: ").append(toIndentedString(claimList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageCount");
    openapiFields.add("claimList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QueueContentSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueueContentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueContentSummary is not found in the empty JSON string", QueueContentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueueContentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueueContentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pageCount") != null && !jsonObj.get("pageCount").isJsonNull()) && !jsonObj.get("pageCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageCount").toString()));
      }
      if (jsonObj.get("claimList") != null && !jsonObj.get("claimList").isJsonNull()) {
        JsonArray jsonArrayclaimList = jsonObj.getAsJsonArray("claimList");
        if (jsonArrayclaimList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("claimList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `claimList` to be an array in the JSON string but got `%s`", jsonObj.get("claimList").toString()));
          }

          // validate the optional field `claimList` (array)
          for (int i = 0; i < jsonArrayclaimList.size(); i++) {
            ClaimSummary.validateJsonElement(jsonArrayclaimList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueContentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueContentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueContentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueContentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueContentSummary>() {
           @Override
           public void write(JsonWriter out, QueueContentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueContentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueueContentSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueueContentSummary
  * @throws IOException if the JSON string is invalid with respect to QueueContentSummary
  */
  public static QueueContentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueContentSummary.class);
  }

 /**
  * Convert an instance of QueueContentSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

