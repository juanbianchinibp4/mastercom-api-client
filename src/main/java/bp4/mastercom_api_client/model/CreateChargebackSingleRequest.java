/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import bp4.mastercom_api_client.model.DocumentStructure;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * CreateChargebackSingleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CreateChargebackSingleRequest {
  /**
   * The brand of service or program.   Length: 2   Valid Values/Format: MC - Mastercard, CI - Cirrus速, MS - Maestro速, MD - Debit Mastercard 速card, PL - Plus速, PV(L) - Private Label, VI - VISA
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    MC("MC"),
    
    CI("CI"),
    
    MS("MS"),
    
    MD("MD"),
    
    PL("PL"),
    
    PV("PV"),
    
    VI("VI");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandEnum fromValue(String value) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private BrandEnum brand;

  public static final String SERIALIZED_NAME_REPLACEMENT_AMOUNT = "replacementAmount";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_AMOUNT)
  private String replacementAmount;

  public static final String SERIALIZED_NAME_REVERSAL_REASON_CODE = "reversalReasonCode";
  @SerializedName(SERIALIZED_NAME_REVERSAL_REASON_CODE)
  private String reversalReasonCode;

  /**
   * The usage code indicates the type of chargeback record processed.   Length: 1   Valid Values/Format: 1 &#x3D; first chargeback, 2 &#x3D; second presentment
   */
  @JsonAdapter(UsageCodeEnum.Adapter.class)
  public enum UsageCodeEnum {
    _1("1"),
    
    _2("2");

    private String value;

    UsageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageCodeEnum fromValue(String value) {
      for (UsageCodeEnum b : UsageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_USAGE_CODE = "usageCode";
  @SerializedName(SERIALIZED_NAME_USAGE_CODE)
  private UsageCodeEnum usageCode;

  /**
   * If 0.00 is entered in the Replacement Amount local field, you will be requested to define the Chargeback as Single or Double. Select chargebackType, either Single Chargeback or Double Chargeback. A double chargeback is used to reverse a credit posted as a debit.   Length: 1   Valid Values/Format: S or D
   */
  @JsonAdapter(ChargebackTypeEnum.Adapter.class)
  public enum ChargebackTypeEnum {
    S("S"),
    
    D("D");

    private String value;

    ChargebackTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargebackTypeEnum fromValue(String value) {
      for (ChargebackTypeEnum b : ChargebackTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargebackTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargebackTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargebackTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargebackTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHARGEBACK_TYPE = "chargebackType";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_TYPE)
  private ChargebackTypeEnum chargebackType;

  public static final String SERIALIZED_NAME_ACQUIRER_FIRST_REFERENCE_NUMBER = "acquirerFirstReferenceNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_FIRST_REFERENCE_NUMBER)
  private String acquirerFirstReferenceNumber;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_ADJUSTMENT_CONTACT_FAX = "adjustmentContactFax";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_CONTACT_FAX)
  private String adjustmentContactFax;

  public static final String SERIALIZED_NAME_ADJUSTMENT_CONTACT_NAME = "adjustmentContactName";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_CONTACT_NAME)
  private String adjustmentContactName;

  public static final String SERIALIZED_NAME_ADJUSTMENT_CONTACT_PHONE = "adjustmentContactPhone";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_CONTACT_PHONE)
  private String adjustmentContactPhone;

  public static final String SERIALIZED_NAME_CONTROL_NUMBER = "controlNumber";
  @SerializedName(SERIALIZED_NAME_CONTROL_NUMBER)
  private String controlNumber;

  /**
   * Data Record Text.   Length: 2-3   Valid Values/Format: R3,RS7   Note: RS5 (Guarantee No Show) is not supported, customers must use field reversalReasonCode 53 instead
   */
  @JsonAdapter(DataRecordTextEnum.Adapter.class)
  public enum DataRecordTextEnum {
    R3("R3"),
    
    RS7("RS7");

    private String value;

    DataRecordTextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataRecordTextEnum fromValue(String value) {
      for (DataRecordTextEnum b : DataRecordTextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataRecordTextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataRecordTextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataRecordTextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataRecordTextEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_RECORD_TEXT = "dataRecordText";
  @SerializedName(SERIALIZED_NAME_DATA_RECORD_TEXT)
  private DataRecordTextEnum dataRecordText;

  /**
   * CONDITIONAL: Required when brand is MD and for the following reversalReasonCodes when brand is not MD...70, 71.   Length: 1   Valid Values/Format: 0-No Documentation, 1-Document will follow
   */
  @JsonAdapter(DocumentIndicatorEnum.Adapter.class)
  public enum DocumentIndicatorEnum {
    _0("0"),
    
    _1("1");

    private String value;

    DocumentIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentIndicatorEnum fromValue(String value) {
      for (DocumentIndicatorEnum b : DocumentIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_INDICATOR = "documentIndicator";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INDICATOR)
  private DocumentIndicatorEnum documentIndicator;

  /**
   * CONDITIONAL: This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 4
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    _1("1"),
    
    _2("2"),
    
    _4("4");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  /**
   * CONDITIONAL: The supporting documentation was illegible. This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 3, 4, 5, 6
   */
  @JsonAdapter(IllegibleItemCdEnum.Adapter.class)
  public enum IllegibleItemCdEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6");

    private String value;

    IllegibleItemCdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IllegibleItemCdEnum fromValue(String value) {
      for (IllegibleItemCdEnum b : IllegibleItemCdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IllegibleItemCdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IllegibleItemCdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IllegibleItemCdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IllegibleItemCdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ILLEGIBLE_ITEM_CD = "illegibleItemCd";
  @SerializedName(SERIALIZED_NAME_ILLEGIBLE_ITEM_CD)
  private IllegibleItemCdEnum illegibleItemCd;

  /**
   * CONDITIONAL: The type of card program bearing the account number. This field is mandatory when reversalReasonCode is 49.   Length: 4-5   Valid Values/Format: QMAP, GMAP, INVAL.
   */
  @JsonAdapter(ProgramEnum.Adapter.class)
  public enum ProgramEnum {
    QMAP("QMAP"),
    
    GMAP("GMAP"),
    
    INVAL("INVAL");

    private String value;

    ProgramEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgramEnum fromValue(String value) {
      for (ProgramEnum b : ProgramEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgramEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgramEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgramEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgramEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private ProgramEnum program;

  public static final String SERIALIZED_NAME_RETRIEVAL_REQUEST_DATE = "retrievalRequestDate";
  @SerializedName(SERIALIZED_NAME_RETRIEVAL_REQUEST_DATE)
  private String retrievalRequestDate;

  public static final String SERIALIZED_NAME_SECURITY_BULLETIN_NUMBER = "securityBulletinNumber";
  @SerializedName(SERIALIZED_NAME_SECURITY_BULLETIN_NUMBER)
  private String securityBulletinNumber;

  public static final String SERIALIZED_NAME_FILE_ATTACHMENT = "fileAttachment";
  @SerializedName(SERIALIZED_NAME_FILE_ATTACHMENT)
  private DocumentStructure fileAttachment;

  public static final String SERIALIZED_NAME_REFUND_NOT_RECEIVED_INDICATOR = "refundNotReceivedIndicator";
  @SerializedName(SERIALIZED_NAME_REFUND_NOT_RECEIVED_INDICATOR)
  private String refundNotReceivedIndicator;

  public CreateChargebackSingleRequest() {
  }

  public CreateChargebackSingleRequest brand(BrandEnum brand) {
    
    this.brand = brand;
    return this;
  }

   /**
   * The brand of service or program.   Length: 2   Valid Values/Format: MC - Mastercard, CI - Cirrus速, MS - Maestro速, MD - Debit Mastercard 速card, PL - Plus速, PV(L) - Private Label, VI - VISA
   * @return brand
  **/
  @javax.annotation.Nonnull
  public BrandEnum getBrand() {
    return brand;
  }


  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }


  public CreateChargebackSingleRequest replacementAmount(String replacementAmount) {
    
    this.replacementAmount = replacementAmount;
    return this;
  }

   /**
   * Replacement Amount.  The replacement amount should reflect the final amount of the transaction value that should remain applied to the cardholder balance.   Length: 3-12   Valid Values/Format: Numeric
   * @return replacementAmount
  **/
  @javax.annotation.Nonnull
  public String getReplacementAmount() {
    return replacementAmount;
  }


  public void setReplacementAmount(String replacementAmount) {
    this.replacementAmount = replacementAmount;
  }


  public CreateChargebackSingleRequest reversalReasonCode(String reversalReasonCode) {
    
    this.reversalReasonCode = reversalReasonCode;
    return this;
  }

   /**
   * MDS dispute reason code for creating the dispute item   Length: 1-2   Valid Values/Format: Alphanumeric
   * @return reversalReasonCode
  **/
  @javax.annotation.Nonnull
  public String getReversalReasonCode() {
    return reversalReasonCode;
  }


  public void setReversalReasonCode(String reversalReasonCode) {
    this.reversalReasonCode = reversalReasonCode;
  }


  public CreateChargebackSingleRequest usageCode(UsageCodeEnum usageCode) {
    
    this.usageCode = usageCode;
    return this;
  }

   /**
   * The usage code indicates the type of chargeback record processed.   Length: 1   Valid Values/Format: 1 &#x3D; first chargeback, 2 &#x3D; second presentment
   * @return usageCode
  **/
  @javax.annotation.Nonnull
  public UsageCodeEnum getUsageCode() {
    return usageCode;
  }


  public void setUsageCode(UsageCodeEnum usageCode) {
    this.usageCode = usageCode;
  }


  public CreateChargebackSingleRequest chargebackType(ChargebackTypeEnum chargebackType) {
    
    this.chargebackType = chargebackType;
    return this;
  }

   /**
   * If 0.00 is entered in the Replacement Amount local field, you will be requested to define the Chargeback as Single or Double. Select chargebackType, either Single Chargeback or Double Chargeback. A double chargeback is used to reverse a credit posted as a debit.   Length: 1   Valid Values/Format: S or D
   * @return chargebackType
  **/
  @javax.annotation.Nullable
  public ChargebackTypeEnum getChargebackType() {
    return chargebackType;
  }


  public void setChargebackType(ChargebackTypeEnum chargebackType) {
    this.chargebackType = chargebackType;
  }


  public CreateChargebackSingleRequest acquirerFirstReferenceNumber(String acquirerFirstReferenceNumber) {
    
    this.acquirerFirstReferenceNumber = acquirerFirstReferenceNumber;
    return this;
  }

   /**
   * CONDITIONAL: Mandatory when brand is MD and reason code is 34 (Duplicate processing). A unique identifier assigned by the acquirer of Debit Mastercard transactions.   Length: 23   Valid Values/Format: Numeric
   * @return acquirerFirstReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerFirstReferenceNumber() {
    return acquirerFirstReferenceNumber;
  }


  public void setAcquirerFirstReferenceNumber(String acquirerFirstReferenceNumber) {
    this.acquirerFirstReferenceNumber = acquirerFirstReferenceNumber;
  }


  public CreateChargebackSingleRequest additionalInformation(String additionalInformation) {
    
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Any additional information or note may be entered in this field.   Length: 1-38   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }


  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public CreateChargebackSingleRequest adjustmentContactFax(String adjustmentContactFax) {
    
    this.adjustmentContactFax = adjustmentContactFax;
    return this;
  }

   /**
   * CONDITIONAL: The chargeback contact fax number. Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98.   Length: 1-15   Valid Values/Format: Numeric, Special Char(-)
   * @return adjustmentContactFax
  **/
  @javax.annotation.Nullable
  public String getAdjustmentContactFax() {
    return adjustmentContactFax;
  }


  public void setAdjustmentContactFax(String adjustmentContactFax) {
    this.adjustmentContactFax = adjustmentContactFax;
  }


  public CreateChargebackSingleRequest adjustmentContactName(String adjustmentContactName) {
    
    this.adjustmentContactName = adjustmentContactName;
    return this;
  }

   /**
   * CONDITIONAL: The chargeback contact name. Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98.   Length: 1-24   Valid Values/Format: Character and Space
   * @return adjustmentContactName
  **/
  @javax.annotation.Nullable
  public String getAdjustmentContactName() {
    return adjustmentContactName;
  }


  public void setAdjustmentContactName(String adjustmentContactName) {
    this.adjustmentContactName = adjustmentContactName;
  }


  public CreateChargebackSingleRequest adjustmentContactPhone(String adjustmentContactPhone) {
    
    this.adjustmentContactPhone = adjustmentContactPhone;
    return this;
  }

   /**
   * CONDITIONAL: The chargeback contact phone number.  Required when brand not MD and reversalReasonCode in one of the following...12, 30, 69, 70, 71, 73, 75, 79, 80, 95, 96, 97, 98   Length: 1-15   Valid Values/Format: Numeric
   * @return adjustmentContactPhone
  **/
  @javax.annotation.Nullable
  public String getAdjustmentContactPhone() {
    return adjustmentContactPhone;
  }


  public void setAdjustmentContactPhone(String adjustmentContactPhone) {
    this.adjustmentContactPhone = adjustmentContactPhone;
  }


  public CreateChargebackSingleRequest controlNumber(String controlNumber) {
    
    this.controlNumber = controlNumber;
    return this;
  }

   /**
   * Control Number.  Used to identify the specific transaction for internal auditing and tracing purposes.   Length: 1-5   Valid Values/Format: Numeric
   * @return controlNumber
  **/
  @javax.annotation.Nullable
  public String getControlNumber() {
    return controlNumber;
  }


  public void setControlNumber(String controlNumber) {
    this.controlNumber = controlNumber;
  }


  public CreateChargebackSingleRequest dataRecordText(DataRecordTextEnum dataRecordText) {
    
    this.dataRecordText = dataRecordText;
    return this;
  }

   /**
   * Data Record Text.   Length: 2-3   Valid Values/Format: R3,RS7   Note: RS5 (Guarantee No Show) is not supported, customers must use field reversalReasonCode 53 instead
   * @return dataRecordText
  **/
  @javax.annotation.Nullable
  public DataRecordTextEnum getDataRecordText() {
    return dataRecordText;
  }


  public void setDataRecordText(DataRecordTextEnum dataRecordText) {
    this.dataRecordText = dataRecordText;
  }


  public CreateChargebackSingleRequest documentIndicator(DocumentIndicatorEnum documentIndicator) {
    
    this.documentIndicator = documentIndicator;
    return this;
  }

   /**
   * CONDITIONAL: Required when brand is MD and for the following reversalReasonCodes when brand is not MD...70, 71.   Length: 1   Valid Values/Format: 0-No Documentation, 1-Document will follow
   * @return documentIndicator
  **/
  @javax.annotation.Nullable
  public DocumentIndicatorEnum getDocumentIndicator() {
    return documentIndicator;
  }


  public void setDocumentIndicator(DocumentIndicatorEnum documentIndicator) {
    this.documentIndicator = documentIndicator;
  }


  public CreateChargebackSingleRequest documentType(DocumentTypeEnum documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * CONDITIONAL: This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 4
   * @return documentType
  **/
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }


  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public CreateChargebackSingleRequest illegibleItemCd(IllegibleItemCdEnum illegibleItemCd) {
    
    this.illegibleItemCd = illegibleItemCd;
    return this;
  }

   /**
   * CONDITIONAL: The supporting documentation was illegible. This field is mandatory when reversalReasonCode is 02.   Length: 1   Valid Values/Format: 1, 2, 3, 4, 5, 6
   * @return illegibleItemCd
  **/
  @javax.annotation.Nullable
  public IllegibleItemCdEnum getIllegibleItemCd() {
    return illegibleItemCd;
  }


  public void setIllegibleItemCd(IllegibleItemCdEnum illegibleItemCd) {
    this.illegibleItemCd = illegibleItemCd;
  }


  public CreateChargebackSingleRequest program(ProgramEnum program) {
    
    this.program = program;
    return this;
  }

   /**
   * CONDITIONAL: The type of card program bearing the account number. This field is mandatory when reversalReasonCode is 49.   Length: 4-5   Valid Values/Format: QMAP, GMAP, INVAL.
   * @return program
  **/
  @javax.annotation.Nullable
  public ProgramEnum getProgram() {
    return program;
  }


  public void setProgram(ProgramEnum program) {
    this.program = program;
  }


  public CreateChargebackSingleRequest retrievalRequestDate(String retrievalRequestDate) {
    
    this.retrievalRequestDate = retrievalRequestDate;
    return this;
  }

   /**
   * CONDITIONAL: The date of the retrieval request.  This field is mandatory when brand is MD and reversalReasonCode is 02.   Length: 6   Valid Values/Format: Date
   * @return retrievalRequestDate
  **/
  @javax.annotation.Nullable
  public String getRetrievalRequestDate() {
    return retrievalRequestDate;
  }


  public void setRetrievalRequestDate(String retrievalRequestDate) {
    this.retrievalRequestDate = retrievalRequestDate;
  }


  public CreateChargebackSingleRequest securityBulletinNumber(String securityBulletinNumber) {
    
    this.securityBulletinNumber = securityBulletinNumber;
    return this;
  }

   /**
   * OPTIONAL: This is three-digit Global Security Bulletin number using a YMM format (for example, bulletin number 6 June 2008 would be entered as 806).  Mandatory when brand is MD and reason code is 49. YMM is the format.   Length: 3   Valid Values/Format: Numeric
   * @return securityBulletinNumber
  **/
  @javax.annotation.Nullable
  public String getSecurityBulletinNumber() {
    return securityBulletinNumber;
  }


  public void setSecurityBulletinNumber(String securityBulletinNumber) {
    this.securityBulletinNumber = securityBulletinNumber;
  }


  public CreateChargebackSingleRequest fileAttachment(DocumentStructure fileAttachment) {
    
    this.fileAttachment = fileAttachment;
    return this;
  }

   /**
   * Get fileAttachment
   * @return fileAttachment
  **/
  @javax.annotation.Nullable
  public DocumentStructure getFileAttachment() {
    return fileAttachment;
  }


  public void setFileAttachment(DocumentStructure fileAttachment) {
    this.fileAttachment = fileAttachment;
  }


  public CreateChargebackSingleRequest refundNotReceivedIndicator(String refundNotReceivedIndicator) {
    
    this.refundNotReceivedIndicator = refundNotReceivedIndicator;
    return this;
  }

   /**
   * Cardholder/Issuer did not receive refund when a first chargeback was rejected by Collaboration with reason code 5000 indicating refund provided. 20 days after rejection of CB through collaboration.   CONDITIONAL: this field is only applicable if chargebackType is CHARGEBACK.   Length: 4-5   Valid Values/Format: true, false
   * @return refundNotReceivedIndicator
  **/
  @javax.annotation.Nullable
  public String getRefundNotReceivedIndicator() {
    return refundNotReceivedIndicator;
  }


  public void setRefundNotReceivedIndicator(String refundNotReceivedIndicator) {
    this.refundNotReceivedIndicator = refundNotReceivedIndicator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChargebackSingleRequest createChargebackSingleRequest = (CreateChargebackSingleRequest) o;
    return Objects.equals(this.brand, createChargebackSingleRequest.brand) &&
        Objects.equals(this.replacementAmount, createChargebackSingleRequest.replacementAmount) &&
        Objects.equals(this.reversalReasonCode, createChargebackSingleRequest.reversalReasonCode) &&
        Objects.equals(this.usageCode, createChargebackSingleRequest.usageCode) &&
        Objects.equals(this.chargebackType, createChargebackSingleRequest.chargebackType) &&
        Objects.equals(this.acquirerFirstReferenceNumber, createChargebackSingleRequest.acquirerFirstReferenceNumber) &&
        Objects.equals(this.additionalInformation, createChargebackSingleRequest.additionalInformation) &&
        Objects.equals(this.adjustmentContactFax, createChargebackSingleRequest.adjustmentContactFax) &&
        Objects.equals(this.adjustmentContactName, createChargebackSingleRequest.adjustmentContactName) &&
        Objects.equals(this.adjustmentContactPhone, createChargebackSingleRequest.adjustmentContactPhone) &&
        Objects.equals(this.controlNumber, createChargebackSingleRequest.controlNumber) &&
        Objects.equals(this.dataRecordText, createChargebackSingleRequest.dataRecordText) &&
        Objects.equals(this.documentIndicator, createChargebackSingleRequest.documentIndicator) &&
        Objects.equals(this.documentType, createChargebackSingleRequest.documentType) &&
        Objects.equals(this.illegibleItemCd, createChargebackSingleRequest.illegibleItemCd) &&
        Objects.equals(this.program, createChargebackSingleRequest.program) &&
        Objects.equals(this.retrievalRequestDate, createChargebackSingleRequest.retrievalRequestDate) &&
        Objects.equals(this.securityBulletinNumber, createChargebackSingleRequest.securityBulletinNumber) &&
        Objects.equals(this.fileAttachment, createChargebackSingleRequest.fileAttachment) &&
        Objects.equals(this.refundNotReceivedIndicator, createChargebackSingleRequest.refundNotReceivedIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, replacementAmount, reversalReasonCode, usageCode, chargebackType, acquirerFirstReferenceNumber, additionalInformation, adjustmentContactFax, adjustmentContactName, adjustmentContactPhone, controlNumber, dataRecordText, documentIndicator, documentType, illegibleItemCd, program, retrievalRequestDate, securityBulletinNumber, fileAttachment, refundNotReceivedIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChargebackSingleRequest {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    replacementAmount: ").append(toIndentedString(replacementAmount)).append("\n");
    sb.append("    reversalReasonCode: ").append(toIndentedString(reversalReasonCode)).append("\n");
    sb.append("    usageCode: ").append(toIndentedString(usageCode)).append("\n");
    sb.append("    chargebackType: ").append(toIndentedString(chargebackType)).append("\n");
    sb.append("    acquirerFirstReferenceNumber: ").append(toIndentedString(acquirerFirstReferenceNumber)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    adjustmentContactFax: ").append(toIndentedString(adjustmentContactFax)).append("\n");
    sb.append("    adjustmentContactName: ").append(toIndentedString(adjustmentContactName)).append("\n");
    sb.append("    adjustmentContactPhone: ").append(toIndentedString(adjustmentContactPhone)).append("\n");
    sb.append("    controlNumber: ").append(toIndentedString(controlNumber)).append("\n");
    sb.append("    dataRecordText: ").append(toIndentedString(dataRecordText)).append("\n");
    sb.append("    documentIndicator: ").append(toIndentedString(documentIndicator)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    illegibleItemCd: ").append(toIndentedString(illegibleItemCd)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    retrievalRequestDate: ").append(toIndentedString(retrievalRequestDate)).append("\n");
    sb.append("    securityBulletinNumber: ").append(toIndentedString(securityBulletinNumber)).append("\n");
    sb.append("    fileAttachment: ").append(toIndentedString(fileAttachment)).append("\n");
    sb.append("    refundNotReceivedIndicator: ").append(toIndentedString(refundNotReceivedIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("replacementAmount");
    openapiFields.add("reversalReasonCode");
    openapiFields.add("usageCode");
    openapiFields.add("chargebackType");
    openapiFields.add("acquirerFirstReferenceNumber");
    openapiFields.add("additionalInformation");
    openapiFields.add("adjustmentContactFax");
    openapiFields.add("adjustmentContactName");
    openapiFields.add("adjustmentContactPhone");
    openapiFields.add("controlNumber");
    openapiFields.add("dataRecordText");
    openapiFields.add("documentIndicator");
    openapiFields.add("documentType");
    openapiFields.add("illegibleItemCd");
    openapiFields.add("program");
    openapiFields.add("retrievalRequestDate");
    openapiFields.add("securityBulletinNumber");
    openapiFields.add("fileAttachment");
    openapiFields.add("refundNotReceivedIndicator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("replacementAmount");
    openapiRequiredFields.add("reversalReasonCode");
    openapiRequiredFields.add("usageCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateChargebackSingleRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateChargebackSingleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateChargebackSingleRequest is not found in the empty JSON string", CreateChargebackSingleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateChargebackSingleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateChargebackSingleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateChargebackSingleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if (!jsonObj.get("replacementAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacementAmount").toString()));
      }
      if (!jsonObj.get("reversalReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reversalReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reversalReasonCode").toString()));
      }
      if (!jsonObj.get("usageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageCode").toString()));
      }
      if ((jsonObj.get("chargebackType") != null && !jsonObj.get("chargebackType").isJsonNull()) && !jsonObj.get("chargebackType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackType").toString()));
      }
      if ((jsonObj.get("acquirerFirstReferenceNumber") != null && !jsonObj.get("acquirerFirstReferenceNumber").isJsonNull()) && !jsonObj.get("acquirerFirstReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerFirstReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerFirstReferenceNumber").toString()));
      }
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      if ((jsonObj.get("adjustmentContactFax") != null && !jsonObj.get("adjustmentContactFax").isJsonNull()) && !jsonObj.get("adjustmentContactFax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentContactFax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentContactFax").toString()));
      }
      if ((jsonObj.get("adjustmentContactName") != null && !jsonObj.get("adjustmentContactName").isJsonNull()) && !jsonObj.get("adjustmentContactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentContactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentContactName").toString()));
      }
      if ((jsonObj.get("adjustmentContactPhone") != null && !jsonObj.get("adjustmentContactPhone").isJsonNull()) && !jsonObj.get("adjustmentContactPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentContactPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentContactPhone").toString()));
      }
      if ((jsonObj.get("controlNumber") != null && !jsonObj.get("controlNumber").isJsonNull()) && !jsonObj.get("controlNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlNumber").toString()));
      }
      if ((jsonObj.get("dataRecordText") != null && !jsonObj.get("dataRecordText").isJsonNull()) && !jsonObj.get("dataRecordText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRecordText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRecordText").toString()));
      }
      if ((jsonObj.get("documentIndicator") != null && !jsonObj.get("documentIndicator").isJsonNull()) && !jsonObj.get("documentIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentIndicator").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if ((jsonObj.get("illegibleItemCd") != null && !jsonObj.get("illegibleItemCd").isJsonNull()) && !jsonObj.get("illegibleItemCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `illegibleItemCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("illegibleItemCd").toString()));
      }
      if ((jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) && !jsonObj.get("program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program").toString()));
      }
      if ((jsonObj.get("retrievalRequestDate") != null && !jsonObj.get("retrievalRequestDate").isJsonNull()) && !jsonObj.get("retrievalRequestDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrievalRequestDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrievalRequestDate").toString()));
      }
      if ((jsonObj.get("securityBulletinNumber") != null && !jsonObj.get("securityBulletinNumber").isJsonNull()) && !jsonObj.get("securityBulletinNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityBulletinNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityBulletinNumber").toString()));
      }
      // validate the optional field `fileAttachment`
      if (jsonObj.get("fileAttachment") != null && !jsonObj.get("fileAttachment").isJsonNull()) {
        DocumentStructure.validateJsonElement(jsonObj.get("fileAttachment"));
      }
      if ((jsonObj.get("refundNotReceivedIndicator") != null && !jsonObj.get("refundNotReceivedIndicator").isJsonNull()) && !jsonObj.get("refundNotReceivedIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundNotReceivedIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundNotReceivedIndicator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateChargebackSingleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateChargebackSingleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateChargebackSingleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateChargebackSingleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateChargebackSingleRequest>() {
           @Override
           public void write(JsonWriter out, CreateChargebackSingleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateChargebackSingleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateChargebackSingleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateChargebackSingleRequest
  * @throws IOException if the JSON string is invalid with respect to CreateChargebackSingleRequest
  */
  public static CreateChargebackSingleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateChargebackSingleRequest.class);
  }

 /**
  * Convert an instance of CreateChargebackSingleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

