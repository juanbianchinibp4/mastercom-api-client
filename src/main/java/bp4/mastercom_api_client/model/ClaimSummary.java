/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * ClaimSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class ClaimSummary {
  public static final String SERIALIZED_NAME_ACQUIRER_ID = "acquirerId";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ID)
  private String acquirerId;

  public static final String SERIALIZED_NAME_ACQUIRER_REF_NUM = "acquirerRefNum";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REF_NUM)
  private String acquirerRefNum;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUM = "primaryAccountNum";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUM)
  private String primaryAccountNum;

  public static final String SERIALIZED_NAME_CLAIM_ID = "claimId";
  @SerializedName(SERIALIZED_NAME_CLAIM_ID)
  private String claimId;

  public static final String SERIALIZED_NAME_CLAIM_TYPE = "claimType";
  @SerializedName(SERIALIZED_NAME_CLAIM_TYPE)
  private String claimType;

  public static final String SERIALIZED_NAME_CLAIM_VALUE = "claimValue";
  @SerializedName(SERIALIZED_NAME_CLAIM_VALUE)
  private String claimValue;

  public static final String SERIALIZED_NAME_CLEARING_DUE_DATE = "clearingDueDate";
  @SerializedName(SERIALIZED_NAME_CLEARING_DUE_DATE)
  private String clearingDueDate;

  public static final String SERIALIZED_NAME_CLEARING_NETWORK = "clearingNetwork";
  @SerializedName(SERIALIZED_NAME_CLEARING_NETWORK)
  private String clearingNetwork;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private String createDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_IS_ACCURATE = "isAccurate";
  @SerializedName(SERIALIZED_NAME_IS_ACCURATE)
  private Boolean isAccurate;

  public static final String SERIALIZED_NAME_IS_ACQUIRER = "isAcquirer";
  @SerializedName(SERIALIZED_NAME_IS_ACQUIRER)
  private Boolean isAcquirer;

  public static final String SERIALIZED_NAME_IS_ISSUER = "isIssuer";
  @SerializedName(SERIALIZED_NAME_IS_ISSUER)
  private Boolean isIssuer;

  public static final String SERIALIZED_NAME_IS_OPEN = "isOpen";
  @SerializedName(SERIALIZED_NAME_IS_OPEN)
  private Boolean isOpen;

  public static final String SERIALIZED_NAME_ISSUER_ID = "issuerId";
  @SerializedName(SERIALIZED_NAME_ISSUER_ID)
  private String issuerId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_PROGRESS_STATE = "progressState";
  @SerializedName(SERIALIZED_NAME_PROGRESS_STATE)
  private String progressState;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "queueName";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public static final String SERIALIZED_NAME_CREDIT_VOUCHER_STATUS = "creditVoucherStatus";
  @SerializedName(SERIALIZED_NAME_CREDIT_VOUCHER_STATUS)
  private String creditVoucherStatus;

  public static final String SERIALIZED_NAME_COLLABORATION_EXPIRATION_DATE_TIME = "collaborationExpirationDateTime";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_EXPIRATION_DATE_TIME)
  private String collaborationExpirationDateTime;

  public ClaimSummary() {
  }

  public ClaimSummary acquirerId(String acquirerId) {
    
    this.acquirerId = acquirerId;
    return this;
  }

   /**
   * Acquirer Inst Id
   * @return acquirerId
  **/
  @javax.annotation.Nullable
  public String getAcquirerId() {
    return acquirerId;
  }


  public void setAcquirerId(String acquirerId) {
    this.acquirerId = acquirerId;
  }


  public ClaimSummary acquirerRefNum(String acquirerRefNum) {
    
    this.acquirerRefNum = acquirerRefNum;
    return this;
  }

   /**
   * Acquirer Reference Number
   * @return acquirerRefNum
  **/
  @javax.annotation.Nullable
  public String getAcquirerRefNum() {
    return acquirerRefNum;
  }


  public void setAcquirerRefNum(String acquirerRefNum) {
    this.acquirerRefNum = acquirerRefNum;
  }


  public ClaimSummary primaryAccountNum(String primaryAccountNum) {
    
    this.primaryAccountNum = primaryAccountNum;
    return this;
  }

   /**
   * Card Number for which the Claim is opened
   * @return primaryAccountNum
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNum() {
    return primaryAccountNum;
  }


  public void setPrimaryAccountNum(String primaryAccountNum) {
    this.primaryAccountNum = primaryAccountNum;
  }


  public ClaimSummary claimId(String claimId) {
    
    this.claimId = claimId;
    return this;
  }

   /**
   * Claim Id
   * @return claimId
  **/
  @javax.annotation.Nullable
  public String getClaimId() {
    return claimId;
  }


  public void setClaimId(String claimId) {
    this.claimId = claimId;
  }


  public ClaimSummary claimType(String claimType) {
    
    this.claimType = claimType;
    return this;
  }

   /**
   * Claim Type
   * @return claimType
  **/
  @javax.annotation.Nullable
  public String getClaimType() {
    return claimType;
  }


  public void setClaimType(String claimType) {
    this.claimType = claimType;
  }


  public ClaimSummary claimValue(String claimValue) {
    
    this.claimValue = claimValue;
    return this;
  }

   /**
   * The value of the claim
   * @return claimValue
  **/
  @javax.annotation.Nullable
  public String getClaimValue() {
    return claimValue;
  }


  public void setClaimValue(String claimValue) {
    this.claimValue = claimValue;
  }


  public ClaimSummary clearingDueDate(String clearingDueDate) {
    
    this.clearingDueDate = clearingDueDate;
    return this;
  }

   /**
   * The clearing due date of the claim
   * @return clearingDueDate
  **/
  @javax.annotation.Nullable
  public String getClearingDueDate() {
    return clearingDueDate;
  }


  public void setClearingDueDate(String clearingDueDate) {
    this.clearingDueDate = clearingDueDate;
  }


  public ClaimSummary clearingNetwork(String clearingNetwork) {
    
    this.clearingNetwork = clearingNetwork;
    return this;
  }

   /**
   * Clearing Network
   * @return clearingNetwork
  **/
  @javax.annotation.Nullable
  public String getClearingNetwork() {
    return clearingNetwork;
  }


  public void setClearingNetwork(String clearingNetwork) {
    this.clearingNetwork = clearingNetwork;
  }


  public ClaimSummary createDate(String createDate) {
    
    this.createDate = createDate;
    return this;
  }

   /**
   * This is the date of the Claim creation
   * @return createDate
  **/
  @javax.annotation.Nullable
  public String getCreateDate() {
    return createDate;
  }


  public void setCreateDate(String createDate) {
    this.createDate = createDate;
  }


  public ClaimSummary dueDate(String dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * The due date of the claim
   * @return dueDate
  **/
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }


  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public ClaimSummary transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * A 9 digit numeric identifier used by mastercom internal processes and it is not equivalent to clearing or authorization transaction id.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ClaimSummary isAccurate(Boolean isAccurate) {
    
    this.isAccurate = isAccurate;
    return this;
  }

   /**
   * True if the claim value is accurate
   * @return isAccurate
  **/
  @javax.annotation.Nullable
  public Boolean getIsAccurate() {
    return isAccurate;
  }


  public void setIsAccurate(Boolean isAccurate) {
    this.isAccurate = isAccurate;
  }


  public ClaimSummary isAcquirer(Boolean isAcquirer) {
    
    this.isAcquirer = isAcquirer;
    return this;
  }

   /**
   * True if the claim is acquirer
   * @return isAcquirer
  **/
  @javax.annotation.Nullable
  public Boolean getIsAcquirer() {
    return isAcquirer;
  }


  public void setIsAcquirer(Boolean isAcquirer) {
    this.isAcquirer = isAcquirer;
  }


  public ClaimSummary isIssuer(Boolean isIssuer) {
    
    this.isIssuer = isIssuer;
    return this;
  }

   /**
   * True if the claim is issuer
   * @return isIssuer
  **/
  @javax.annotation.Nullable
  public Boolean getIsIssuer() {
    return isIssuer;
  }


  public void setIsIssuer(Boolean isIssuer) {
    this.isIssuer = isIssuer;
  }


  public ClaimSummary isOpen(Boolean isOpen) {
    
    this.isOpen = isOpen;
    return this;
  }

   /**
   * True if the claim is open
   * @return isOpen
  **/
  @javax.annotation.Nullable
  public Boolean getIsOpen() {
    return isOpen;
  }


  public void setIsOpen(Boolean isOpen) {
    this.isOpen = isOpen;
  }


  public ClaimSummary issuerId(String issuerId) {
    
    this.issuerId = issuerId;
    return this;
  }

   /**
   * The issuer institution identifier
   * @return issuerId
  **/
  @javax.annotation.Nullable
  public String getIssuerId() {
    return issuerId;
  }


  public void setIssuerId(String issuerId) {
    this.issuerId = issuerId;
  }


  public ClaimSummary lastModifiedBy(String lastModifiedBy) {
    
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * User who signed this event
   * @return lastModifiedBy
  **/
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }


  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public ClaimSummary lastModifiedDate(String lastModifiedDate) {
    
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * The date of the last claim modification
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }


  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public ClaimSummary merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Returns the related merchant identifier
   * @return merchantId
  **/
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ClaimSummary progressState(String progressState) {
    
    this.progressState = progressState;
    return this;
  }

   /**
   * The progress state of the claim
   * @return progressState
  **/
  @javax.annotation.Nullable
  public String getProgressState() {
    return progressState;
  }


  public void setProgressState(String progressState) {
    this.progressState = progressState;
  }


  public ClaimSummary queueName(String queueName) {
    
    this.queueName = queueName;
    return this;
  }

   /**
   * The queue name to which the claim has been allocated
   * @return queueName
  **/
  @javax.annotation.Nullable
  public String getQueueName() {
    return queueName;
  }


  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }


  public ClaimSummary creditVoucherStatus(String creditVoucherStatus) {
    
    this.creditVoucherStatus = creditVoucherStatus;
    return this;
  }

   /**
   * The actual status of the credit voucher
   * @return creditVoucherStatus
  **/
  @javax.annotation.Nullable
  public String getCreditVoucherStatus() {
    return creditVoucherStatus;
  }


  public void setCreditVoucherStatus(String creditVoucherStatus) {
    this.creditVoucherStatus = creditVoucherStatus;
  }


  public ClaimSummary collaborationExpirationDateTime(String collaborationExpirationDateTime) {
    
    this.collaborationExpirationDateTime = collaborationExpirationDateTime;
    return this;
  }

   /**
   * Date and time by which the acquirer can respond to a Collaboration request.
   * @return collaborationExpirationDateTime
  **/
  @javax.annotation.Nullable
  public String getCollaborationExpirationDateTime() {
    return collaborationExpirationDateTime;
  }


  public void setCollaborationExpirationDateTime(String collaborationExpirationDateTime) {
    this.collaborationExpirationDateTime = collaborationExpirationDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClaimSummary claimSummary = (ClaimSummary) o;
    return Objects.equals(this.acquirerId, claimSummary.acquirerId) &&
        Objects.equals(this.acquirerRefNum, claimSummary.acquirerRefNum) &&
        Objects.equals(this.primaryAccountNum, claimSummary.primaryAccountNum) &&
        Objects.equals(this.claimId, claimSummary.claimId) &&
        Objects.equals(this.claimType, claimSummary.claimType) &&
        Objects.equals(this.claimValue, claimSummary.claimValue) &&
        Objects.equals(this.clearingDueDate, claimSummary.clearingDueDate) &&
        Objects.equals(this.clearingNetwork, claimSummary.clearingNetwork) &&
        Objects.equals(this.createDate, claimSummary.createDate) &&
        Objects.equals(this.dueDate, claimSummary.dueDate) &&
        Objects.equals(this.transactionId, claimSummary.transactionId) &&
        Objects.equals(this.isAccurate, claimSummary.isAccurate) &&
        Objects.equals(this.isAcquirer, claimSummary.isAcquirer) &&
        Objects.equals(this.isIssuer, claimSummary.isIssuer) &&
        Objects.equals(this.isOpen, claimSummary.isOpen) &&
        Objects.equals(this.issuerId, claimSummary.issuerId) &&
        Objects.equals(this.lastModifiedBy, claimSummary.lastModifiedBy) &&
        Objects.equals(this.lastModifiedDate, claimSummary.lastModifiedDate) &&
        Objects.equals(this.merchantId, claimSummary.merchantId) &&
        Objects.equals(this.progressState, claimSummary.progressState) &&
        Objects.equals(this.queueName, claimSummary.queueName) &&
        Objects.equals(this.creditVoucherStatus, claimSummary.creditVoucherStatus) &&
        Objects.equals(this.collaborationExpirationDateTime, claimSummary.collaborationExpirationDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerId, acquirerRefNum, primaryAccountNum, claimId, claimType, claimValue, clearingDueDate, clearingNetwork, createDate, dueDate, transactionId, isAccurate, isAcquirer, isIssuer, isOpen, issuerId, lastModifiedBy, lastModifiedDate, merchantId, progressState, queueName, creditVoucherStatus, collaborationExpirationDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClaimSummary {\n");
    sb.append("    acquirerId: ").append(toIndentedString(acquirerId)).append("\n");
    sb.append("    acquirerRefNum: ").append(toIndentedString(acquirerRefNum)).append("\n");
    sb.append("    primaryAccountNum: ").append(toIndentedString(primaryAccountNum)).append("\n");
    sb.append("    claimId: ").append(toIndentedString(claimId)).append("\n");
    sb.append("    claimType: ").append(toIndentedString(claimType)).append("\n");
    sb.append("    claimValue: ").append(toIndentedString(claimValue)).append("\n");
    sb.append("    clearingDueDate: ").append(toIndentedString(clearingDueDate)).append("\n");
    sb.append("    clearingNetwork: ").append(toIndentedString(clearingNetwork)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    isAccurate: ").append(toIndentedString(isAccurate)).append("\n");
    sb.append("    isAcquirer: ").append(toIndentedString(isAcquirer)).append("\n");
    sb.append("    isIssuer: ").append(toIndentedString(isIssuer)).append("\n");
    sb.append("    isOpen: ").append(toIndentedString(isOpen)).append("\n");
    sb.append("    issuerId: ").append(toIndentedString(issuerId)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    progressState: ").append(toIndentedString(progressState)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("    creditVoucherStatus: ").append(toIndentedString(creditVoucherStatus)).append("\n");
    sb.append("    collaborationExpirationDateTime: ").append(toIndentedString(collaborationExpirationDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirerId");
    openapiFields.add("acquirerRefNum");
    openapiFields.add("primaryAccountNum");
    openapiFields.add("claimId");
    openapiFields.add("claimType");
    openapiFields.add("claimValue");
    openapiFields.add("clearingDueDate");
    openapiFields.add("clearingNetwork");
    openapiFields.add("createDate");
    openapiFields.add("dueDate");
    openapiFields.add("transactionId");
    openapiFields.add("isAccurate");
    openapiFields.add("isAcquirer");
    openapiFields.add("isIssuer");
    openapiFields.add("isOpen");
    openapiFields.add("issuerId");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("merchantId");
    openapiFields.add("progressState");
    openapiFields.add("queueName");
    openapiFields.add("creditVoucherStatus");
    openapiFields.add("collaborationExpirationDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClaimSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClaimSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClaimSummary is not found in the empty JSON string", ClaimSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClaimSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClaimSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirerId") != null && !jsonObj.get("acquirerId").isJsonNull()) && !jsonObj.get("acquirerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerId").toString()));
      }
      if ((jsonObj.get("acquirerRefNum") != null && !jsonObj.get("acquirerRefNum").isJsonNull()) && !jsonObj.get("acquirerRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerRefNum").toString()));
      }
      if ((jsonObj.get("primaryAccountNum") != null && !jsonObj.get("primaryAccountNum").isJsonNull()) && !jsonObj.get("primaryAccountNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNum").toString()));
      }
      if ((jsonObj.get("claimId") != null && !jsonObj.get("claimId").isJsonNull()) && !jsonObj.get("claimId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimId").toString()));
      }
      if ((jsonObj.get("claimType") != null && !jsonObj.get("claimType").isJsonNull()) && !jsonObj.get("claimType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimType").toString()));
      }
      if ((jsonObj.get("claimValue") != null && !jsonObj.get("claimValue").isJsonNull()) && !jsonObj.get("claimValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimValue").toString()));
      }
      if ((jsonObj.get("clearingDueDate") != null && !jsonObj.get("clearingDueDate").isJsonNull()) && !jsonObj.get("clearingDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clearingDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clearingDueDate").toString()));
      }
      if ((jsonObj.get("clearingNetwork") != null && !jsonObj.get("clearingNetwork").isJsonNull()) && !jsonObj.get("clearingNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clearingNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clearingNetwork").toString()));
      }
      if ((jsonObj.get("createDate") != null && !jsonObj.get("createDate").isJsonNull()) && !jsonObj.get("createDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createDate").toString()));
      }
      if ((jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("issuerId") != null && !jsonObj.get("issuerId").isJsonNull()) && !jsonObj.get("issuerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerId").toString()));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("progressState") != null && !jsonObj.get("progressState").isJsonNull()) && !jsonObj.get("progressState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressState").toString()));
      }
      if ((jsonObj.get("queueName") != null && !jsonObj.get("queueName").isJsonNull()) && !jsonObj.get("queueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueName").toString()));
      }
      if ((jsonObj.get("creditVoucherStatus") != null && !jsonObj.get("creditVoucherStatus").isJsonNull()) && !jsonObj.get("creditVoucherStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditVoucherStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditVoucherStatus").toString()));
      }
      if ((jsonObj.get("collaborationExpirationDateTime") != null && !jsonObj.get("collaborationExpirationDateTime").isJsonNull()) && !jsonObj.get("collaborationExpirationDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborationExpirationDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborationExpirationDateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClaimSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClaimSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClaimSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClaimSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ClaimSummary>() {
           @Override
           public void write(JsonWriter out, ClaimSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClaimSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClaimSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClaimSummary
  * @throws IOException if the JSON string is invalid with respect to ClaimSummary
  */
  public static ClaimSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClaimSummary.class);
  }

 /**
  * Convert an instance of ClaimSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

