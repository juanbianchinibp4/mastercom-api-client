/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * FeeDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class FeeDetails {
  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE = "cardAcceptorIdCode";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE)
  private String cardAcceptorIdCode;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FEE_DATE = "feeDate";
  @SerializedName(SERIALIZED_NAME_FEE_DATE)
  private String feeDate;

  public static final String SERIALIZED_NAME_DESTINATION_MEMBER = "destinationMember";
  @SerializedName(SERIALIZED_NAME_DESTINATION_MEMBER)
  private String destinationMember;

  public static final String SERIALIZED_NAME_FEE_ID = "feeId";
  @SerializedName(SERIALIZED_NAME_FEE_ID)
  private String feeId;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_CREDIT_SENDER = "creditSender";
  @SerializedName(SERIALIZED_NAME_CREDIT_SENDER)
  private Boolean creditSender;

  public static final String SERIALIZED_NAME_CREDIT_RECEIVER = "creditReceiver";
  @SerializedName(SERIALIZED_NAME_CREDIT_RECEIVER)
  private Boolean creditReceiver;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REJECT_REASON = "rejectReason";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON)
  private String rejectReason;

  public static final String SERIALIZED_NAME_CHARGEBACK_REF_NUM = "chargebackRefNum";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_REF_NUM)
  private String chargebackRefNum;

  public static final String SERIALIZED_NAME_RECONCILIATION_AMOUNT = "reconciliationAmount";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_AMOUNT)
  private String reconciliationAmount;

  public static final String SERIALIZED_NAME_RECONCILIATION_CURRENCY = "reconciliationCurrency";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_CURRENCY)
  private String reconciliationCurrency;

  public static final String SERIALIZED_NAME_JAPAN_COMMON_MERCHANT_CODE = "japanCommonMerchantCode";
  @SerializedName(SERIALIZED_NAME_JAPAN_COMMON_MERCHANT_CODE)
  private String japanCommonMerchantCode;

  public static final String SERIALIZED_NAME_INSTALLMENT_DATA = "installmentData";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_DATA)
  private String installmentData;

  public static final String SERIALIZED_NAME_FLEX_CODE = "flexCode";
  @SerializedName(SERIALIZED_NAME_FLEX_CODE)
  private String flexCode;

  public FeeDetails() {
  }

  public FeeDetails cardAcceptorIdCode(String cardAcceptorIdCode) {
    
    this.cardAcceptorIdCode = cardAcceptorIdCode;
    return this;
  }

   /**
   * Merchant Id associated with this fee collection..if any
   * @return cardAcceptorIdCode
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorIdCode() {
    return cardAcceptorIdCode;
  }


  public void setCardAcceptorIdCode(String cardAcceptorIdCode) {
    this.cardAcceptorIdCode = cardAcceptorIdCode;
  }


  public FeeDetails cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Card number when required by the reason code
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public FeeDetails countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Code identifying the country
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public FeeDetails currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the fee
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public FeeDetails feeDate(String feeDate) {
    
    this.feeDate = feeDate;
    return this;
  }

   /**
   * Date the fee was attached to the claim
   * @return feeDate
  **/
  @javax.annotation.Nullable
  public String getFeeDate() {
    return feeDate;
  }


  public void setFeeDate(String feeDate) {
    this.feeDate = feeDate;
  }


  public FeeDetails destinationMember(String destinationMember) {
    
    this.destinationMember = destinationMember;
    return this;
  }

   /**
   * Destination member for the fee collection
   * @return destinationMember
  **/
  @javax.annotation.Nullable
  public String getDestinationMember() {
    return destinationMember;
  }


  public void setDestinationMember(String destinationMember) {
    this.destinationMember = destinationMember;
  }


  public FeeDetails feeId(String feeId) {
    
    this.feeId = feeId;
    return this;
  }

   /**
   * Identifier assigned to the fee
   * @return feeId
  **/
  @javax.annotation.Nullable
  public String getFeeId() {
    return feeId;
  }


  public void setFeeId(String feeId) {
    this.feeId = feeId;
  }


  public FeeDetails feeAmount(String feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * Amount of the fee.    - When the amount is a credit to the sender of the fee collection, the value of feeAmount is positive.    - When the amount is a debit to the sender of the fee collection, the value of feeAmount is negative.    - When the amount is a credit to the receiver of the fee collection, the value of feeAmount is negative.    - When the amount is a debit to the receiver of the fee collection, the value of feeAmount is positive.    See also the creditSender and creditReceiver parameters.
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  public String getFeeAmount() {
    return feeAmount;
  }


  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public FeeDetails creditSender(Boolean creditSender) {
    
    this.creditSender = creditSender;
    return this;
  }

   /**
   * Credit the Sender
   * @return creditSender
  **/
  @javax.annotation.Nullable
  public Boolean getCreditSender() {
    return creditSender;
  }


  public void setCreditSender(Boolean creditSender) {
    this.creditSender = creditSender;
  }


  public FeeDetails creditReceiver(Boolean creditReceiver) {
    
    this.creditReceiver = creditReceiver;
    return this;
  }

   /**
   * Credit the Receiver
   * @return creditReceiver
  **/
  @javax.annotation.Nullable
  public Boolean getCreditReceiver() {
    return creditReceiver;
  }


  public void setCreditReceiver(Boolean creditReceiver) {
    this.creditReceiver = creditReceiver;
  }


  public FeeDetails message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Message regarding fee
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public FeeDetails reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Collection Reason Code
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public FeeDetails rejectReason(String rejectReason) {
    
    this.rejectReason = rejectReason;
    return this;
  }

   /**
   * Fee reject reason.
   * @return rejectReason
  **/
  @javax.annotation.Nullable
  public String getRejectReason() {
    return rejectReason;
  }


  public void setRejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
  }


  public FeeDetails chargebackRefNum(String chargebackRefNum) {
    
    this.chargebackRefNum = chargebackRefNum;
    return this;
  }

   /**
   * Contains card issuer reference data for a specific cardholder transaction. This number must be unique within BIN. It is used to track the chargeback throughout its life cycle
   * @return chargebackRefNum
  **/
  @javax.annotation.Nullable
  public String getChargebackRefNum() {
    return chargebackRefNum;
  }


  public void setChargebackRefNum(String chargebackRefNum) {
    this.chargebackRefNum = chargebackRefNum;
  }


  public FeeDetails reconciliationAmount(String reconciliationAmount) {
    
    this.reconciliationAmount = reconciliationAmount;
    return this;
  }

   /**
   * Reconciliation amount of the fee. Amount will only be retrieved by the receiver side of the fee
   * @return reconciliationAmount
  **/
  @javax.annotation.Nullable
  public String getReconciliationAmount() {
    return reconciliationAmount;
  }


  public void setReconciliationAmount(String reconciliationAmount) {
    this.reconciliationAmount = reconciliationAmount;
  }


  public FeeDetails reconciliationCurrency(String reconciliationCurrency) {
    
    this.reconciliationCurrency = reconciliationCurrency;
    return this;
  }

   /**
   * Reconciliation currency of the fee. Currency will only be retrieved by the receiver side of the fee
   * @return reconciliationCurrency
  **/
  @javax.annotation.Nullable
  public String getReconciliationCurrency() {
    return reconciliationCurrency;
  }


  public void setReconciliationCurrency(String reconciliationCurrency) {
    this.reconciliationCurrency = reconciliationCurrency;
  }


  public FeeDetails japanCommonMerchantCode(String japanCommonMerchantCode) {
    
    this.japanCommonMerchantCode = japanCommonMerchantCode;
    return this;
  }

   /**
   * Identifies the merchant&#39;s category in Japan referred to as the Common Merchant Category Code (CMC). Mastercard uses this value to identify a link to a corresponding Mastercard Assigned ID.
   * @return japanCommonMerchantCode
  **/
  @javax.annotation.Nullable
  public String getJapanCommonMerchantCode() {
    return japanCommonMerchantCode;
  }


  public void setJapanCommonMerchantCode(String japanCommonMerchantCode) {
    this.japanCommonMerchantCode = japanCommonMerchantCode;
  }


  public FeeDetails installmentData(String installmentData) {
    
    this.installmentData = installmentData;
    return this;
  }

   /**
   * Provides information about the installment payment option selected by the cardholder at the point of interaction.
   * @return installmentData
  **/
  @javax.annotation.Nullable
  public String getInstallmentData() {
    return installmentData;
  }


  public void setInstallmentData(String installmentData) {
    this.installmentData = installmentData;
  }


  public FeeDetails flexCode(String flexCode) {
    
    this.flexCode = flexCode;
    return this;
  }

   /**
   * Specific to Brazil Flex Card transactions to communicate the product code used for clearing.
   * @return flexCode
  **/
  @javax.annotation.Nullable
  public String getFlexCode() {
    return flexCode;
  }


  public void setFlexCode(String flexCode) {
    this.flexCode = flexCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeDetails feeDetails = (FeeDetails) o;
    return Objects.equals(this.cardAcceptorIdCode, feeDetails.cardAcceptorIdCode) &&
        Objects.equals(this.cardNumber, feeDetails.cardNumber) &&
        Objects.equals(this.countryCode, feeDetails.countryCode) &&
        Objects.equals(this.currency, feeDetails.currency) &&
        Objects.equals(this.feeDate, feeDetails.feeDate) &&
        Objects.equals(this.destinationMember, feeDetails.destinationMember) &&
        Objects.equals(this.feeId, feeDetails.feeId) &&
        Objects.equals(this.feeAmount, feeDetails.feeAmount) &&
        Objects.equals(this.creditSender, feeDetails.creditSender) &&
        Objects.equals(this.creditReceiver, feeDetails.creditReceiver) &&
        Objects.equals(this.message, feeDetails.message) &&
        Objects.equals(this.reason, feeDetails.reason) &&
        Objects.equals(this.rejectReason, feeDetails.rejectReason) &&
        Objects.equals(this.chargebackRefNum, feeDetails.chargebackRefNum) &&
        Objects.equals(this.reconciliationAmount, feeDetails.reconciliationAmount) &&
        Objects.equals(this.reconciliationCurrency, feeDetails.reconciliationCurrency) &&
        Objects.equals(this.japanCommonMerchantCode, feeDetails.japanCommonMerchantCode) &&
        Objects.equals(this.installmentData, feeDetails.installmentData) &&
        Objects.equals(this.flexCode, feeDetails.flexCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAcceptorIdCode, cardNumber, countryCode, currency, feeDate, destinationMember, feeId, feeAmount, creditSender, creditReceiver, message, reason, rejectReason, chargebackRefNum, reconciliationAmount, reconciliationCurrency, japanCommonMerchantCode, installmentData, flexCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeDetails {\n");
    sb.append("    cardAcceptorIdCode: ").append(toIndentedString(cardAcceptorIdCode)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    feeDate: ").append(toIndentedString(feeDate)).append("\n");
    sb.append("    destinationMember: ").append(toIndentedString(destinationMember)).append("\n");
    sb.append("    feeId: ").append(toIndentedString(feeId)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    creditSender: ").append(toIndentedString(creditSender)).append("\n");
    sb.append("    creditReceiver: ").append(toIndentedString(creditReceiver)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    chargebackRefNum: ").append(toIndentedString(chargebackRefNum)).append("\n");
    sb.append("    reconciliationAmount: ").append(toIndentedString(reconciliationAmount)).append("\n");
    sb.append("    reconciliationCurrency: ").append(toIndentedString(reconciliationCurrency)).append("\n");
    sb.append("    japanCommonMerchantCode: ").append(toIndentedString(japanCommonMerchantCode)).append("\n");
    sb.append("    installmentData: ").append(toIndentedString(installmentData)).append("\n");
    sb.append("    flexCode: ").append(toIndentedString(flexCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardAcceptorIdCode");
    openapiFields.add("cardNumber");
    openapiFields.add("countryCode");
    openapiFields.add("currency");
    openapiFields.add("feeDate");
    openapiFields.add("destinationMember");
    openapiFields.add("feeId");
    openapiFields.add("feeAmount");
    openapiFields.add("creditSender");
    openapiFields.add("creditReceiver");
    openapiFields.add("message");
    openapiFields.add("reason");
    openapiFields.add("rejectReason");
    openapiFields.add("chargebackRefNum");
    openapiFields.add("reconciliationAmount");
    openapiFields.add("reconciliationCurrency");
    openapiFields.add("japanCommonMerchantCode");
    openapiFields.add("installmentData");
    openapiFields.add("flexCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeeDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeeDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeDetails is not found in the empty JSON string", FeeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeeDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardAcceptorIdCode") != null && !jsonObj.get("cardAcceptorIdCode").isJsonNull()) && !jsonObj.get("cardAcceptorIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorIdCode").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("feeDate") != null && !jsonObj.get("feeDate").isJsonNull()) && !jsonObj.get("feeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeDate").toString()));
      }
      if ((jsonObj.get("destinationMember") != null && !jsonObj.get("destinationMember").isJsonNull()) && !jsonObj.get("destinationMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationMember").toString()));
      }
      if ((jsonObj.get("feeId") != null && !jsonObj.get("feeId").isJsonNull()) && !jsonObj.get("feeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeId").toString()));
      }
      if ((jsonObj.get("feeAmount") != null && !jsonObj.get("feeAmount").isJsonNull()) && !jsonObj.get("feeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeAmount").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("rejectReason") != null && !jsonObj.get("rejectReason").isJsonNull()) && !jsonObj.get("rejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectReason").toString()));
      }
      if ((jsonObj.get("chargebackRefNum") != null && !jsonObj.get("chargebackRefNum").isJsonNull()) && !jsonObj.get("chargebackRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackRefNum").toString()));
      }
      if ((jsonObj.get("reconciliationAmount") != null && !jsonObj.get("reconciliationAmount").isJsonNull()) && !jsonObj.get("reconciliationAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationAmount").toString()));
      }
      if ((jsonObj.get("reconciliationCurrency") != null && !jsonObj.get("reconciliationCurrency").isJsonNull()) && !jsonObj.get("reconciliationCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationCurrency").toString()));
      }
      if ((jsonObj.get("japanCommonMerchantCode") != null && !jsonObj.get("japanCommonMerchantCode").isJsonNull()) && !jsonObj.get("japanCommonMerchantCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `japanCommonMerchantCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("japanCommonMerchantCode").toString()));
      }
      if ((jsonObj.get("installmentData") != null && !jsonObj.get("installmentData").isJsonNull()) && !jsonObj.get("installmentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentData").toString()));
      }
      if ((jsonObj.get("flexCode") != null && !jsonObj.get("flexCode").isJsonNull()) && !jsonObj.get("flexCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flexCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flexCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeDetails>() {
           @Override
           public void write(JsonWriter out, FeeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeeDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeeDetails
  * @throws IOException if the JSON string is invalid with respect to FeeDetails
  */
  public static FeeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeDetails.class);
  }

 /**
  * Convert an instance of FeeDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

