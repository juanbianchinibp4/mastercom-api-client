/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * AuthorizationDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class AuthorizationDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_INDICATOR = "accountNumberIndicator";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_INDICATOR)
  private String accountNumberIndicator;

  public static final String SERIALIZED_NAME_ACQUIRER = "acquirer";
  @SerializedName(SERIALIZED_NAME_ACQUIRER)
  private String acquirer;

  public static final String SERIALIZED_NAME_ACQUIRING_INSTITUTION_COUNTRY_CODE = "acquiringInstitutionCountryCode";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_INSTITUTION_COUNTRY_CODE)
  private String acquiringInstitutionCountryCode;

  public static final String SERIALIZED_NAME_ACQUIRING_INSTITUTION_ID = "acquiringInstitutionId";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_INSTITUTION_ID)
  private String acquiringInstitutionId;

  public static final String SERIALIZED_NAME_ADDRESS_VERIFICATION_SERVICE_RESPONSE = "addressVerificationServiceResponse";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VERIFICATION_SERVICE_RESPONSE)
  private String addressVerificationServiceResponse;

  public static final String SERIALIZED_NAME_ADVICE_REASON_CODE = "adviceReasonCode";
  @SerializedName(SERIALIZED_NAME_ADVICE_REASON_CODE)
  private String adviceReasonCode;

  public static final String SERIALIZED_NAME_ATC_DISCREPANCY_INDICATOR = "atcDiscrepancyIndicator";
  @SerializedName(SERIALIZED_NAME_ATC_DISCREPANCY_INDICATOR)
  private String atcDiscrepancyIndicator;

  public static final String SERIALIZED_NAME_ATC_DISCREPANCY_VALUE = "atcDiscrepancyValue";
  @SerializedName(SERIALIZED_NAME_ATC_DISCREPANCY_VALUE)
  private String atcDiscrepancyValue;

  public static final String SERIALIZED_NAME_ATC_VALUE = "atcValue";
  @SerializedName(SERIALIZED_NAME_ATC_VALUE)
  private String atcValue;

  public static final String SERIALIZED_NAME_AUTHENTICATION_INDICATOR = "authenticationIndicator";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_INDICATOR)
  private String authenticationIndicator;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ID_RESPONSE = "authorizationIdResponse";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ID_RESPONSE)
  private String authorizationIdResponse;

  public static final String SERIALIZED_NAME_BANKNET_DATE = "banknetDate";
  @SerializedName(SERIALIZED_NAME_BANKNET_DATE)
  private String banknetDate;

  public static final String SERIALIZED_NAME_BANKNET_REFERENCE_NUMBER = "banknetReferenceNumber";
  @SerializedName(SERIALIZED_NAME_BANKNET_REFERENCE_NUMBER)
  private String banknetReferenceNumber;

  public static final String SERIALIZED_NAME_BILLING_CURRENCY_CODE = "billingCurrencyCode";
  @SerializedName(SERIALIZED_NAME_BILLING_CURRENCY_CODE)
  private String billingCurrencyCode;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_CITY = "cardAcceptorCity";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_CITY)
  private String cardAcceptorCity;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_ID = "cardAcceptorId";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_ID)
  private String cardAcceptorId;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_NAME = "cardAcceptorName";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_NAME)
  private String cardAcceptorName;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_STATE = "cardAcceptorState";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_STATE)
  private String cardAcceptorState;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_TERMINAL_ID = "cardAcceptorTerminalId";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_TERMINAL_ID)
  private String cardAcceptorTerminalId;

  public static final String SERIALIZED_NAME_CARDHOLDER_ACTIVATED_TERMINAL_LEVEL = "cardholderActivatedTerminalLevel";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_ACTIVATED_TERMINAL_LEVEL)
  private String cardholderActivatedTerminalLevel;

  public static final String SERIALIZED_NAME_CARDHOLDER_BILLING_ACTUAL_AMOUNT = "cardholderBillingActualAmount";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_BILLING_ACTUAL_AMOUNT)
  private String cardholderBillingActualAmount;

  public static final String SERIALIZED_NAME_CARDHOLDER_BILLING_AMOUNT = "cardholderBillingAmount";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_BILLING_AMOUNT)
  private String cardholderBillingAmount;

  public static final String SERIALIZED_NAME_CARD_AUTHENTICATION_METHOD_VALIDATION_CODE = "cardAuthenticationMethodValidationCode";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHENTICATION_METHOD_VALIDATION_CODE)
  private String cardAuthenticationMethodValidationCode;

  public static final String SERIALIZED_NAME_CONVERSION_DATE = "conversionDate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_DATE)
  private String conversionDate;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversionRate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private String conversionRate;

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_INDICATORS = "electronicCommerceIndicators";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_INDICATORS)
  private String electronicCommerceIndicators;

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR_AND_UCAF_COLLECTION_INDICATOR = "electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR_AND_UCAF_COLLECTION_INDICATOR)
  private String electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE_PRESENCE_IND = "expirationDatePresenceInd";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE_PRESENCE_IND)
  private String expirationDatePresenceInd;

  public static final String SERIALIZED_NAME_FINAL_AUTHORIZATION_INDICATOR = "finalAuthorizationIndicator";
  @SerializedName(SERIALIZED_NAME_FINAL_AUTHORIZATION_INDICATOR)
  private String finalAuthorizationIndicator;

  public static final String SERIALIZED_NAME_FINANCIAL_NETWORK_CODE = "financialNetworkCode";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_NETWORK_CODE)
  private String financialNetworkCode;

  public static final String SERIALIZED_NAME_FORWARDING_INSTITUTION_ID = "forwardingInstitutionId";
  @SerializedName(SERIALIZED_NAME_FORWARDING_INSTITUTION_ID)
  private String forwardingInstitutionId;

  public static final String SERIALIZED_NAME_INF_DATA = "infData";
  @SerializedName(SERIALIZED_NAME_INF_DATA)
  private String infData;

  public static final String SERIALIZED_NAME_INTEGRATED_CIRCUIT_CARD_RELATED_DATA = "integratedCircuitCardRelatedData";
  @SerializedName(SERIALIZED_NAME_INTEGRATED_CIRCUIT_CARD_RELATED_DATA)
  private String integratedCircuitCardRelatedData;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_MASTERCARD_PROMOTION_CODE = "mastercardPromotionCode";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_PROMOTION_CODE)
  private String mastercardPromotionCode;

  public static final String SERIALIZED_NAME_MCC_MESSAGE_ID = "mccMessageId";
  @SerializedName(SERIALIZED_NAME_MCC_MESSAGE_ID)
  private String mccMessageId;

  public static final String SERIALIZED_NAME_MERCHANT_ADVICE_CODE = "merchantAdviceCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADVICE_CODE)
  private String merchantAdviceCode;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_NUMBER = "mobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_NUMBER)
  private String mobilePhoneNumber;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_SERVICE_PROVIDER_NAME = "mobilePhoneServiceProviderName";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_SERVICE_PROVIDER_NAME)
  private String mobilePhoneServiceProviderName;

  public static final String SERIALIZED_NAME_ORIGINAL_ACQUIRING_INSTITUTION_ID_CODE = "originalAcquiringInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ACQUIRING_INSTITUTION_ID_CODE)
  private String originalAcquiringInstitutionIdCode;

  public static final String SERIALIZED_NAME_ORIGINAL_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR_AND_UCAF_COLLECTION_INDICATOR = "originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR_AND_UCAF_COLLECTION_INDICATOR)
  private String originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;

  public static final String SERIALIZED_NAME_ORIGINAL_ISSUER_FORWARDING_INSTITUTION_ID_CODE = "originalIssuerForwardingInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ISSUER_FORWARDING_INSTITUTION_ID_CODE)
  private String originalIssuerForwardingInstitutionIdCode;

  public static final String SERIALIZED_NAME_ORIGINAL_MESSAGE_TYPE_IDENTIFIER = "originalMessageTypeIdentifier";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_MESSAGE_TYPE_IDENTIFIER)
  private String originalMessageTypeIdentifier;

  public static final String SERIALIZED_NAME_PIN_SERVICE_CODE = "pinServiceCode";
  @SerializedName(SERIALIZED_NAME_PIN_SERVICE_CODE)
  private String pinServiceCode;

  public static final String SERIALIZED_NAME_REAL_TIME_SUBSTANTIATION_INDICATOR = "realTimeSubstantiationIndicator";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_SUBSTANTIATION_INDICATOR)
  private String realTimeSubstantiationIndicator;

  public static final String SERIALIZED_NAME_REASON_FOR_UCAF_COLLECTION_INDICATOR_DOWNGRADE = "reasonForUcafCollectionIndicatorDowngrade";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_UCAF_COLLECTION_INDICATOR_DOWNGRADE)
  private String reasonForUcafCollectionIndicatorDowngrade;

  public static final String SERIALIZED_NAME_POS_CARD_DATA_TERMINAL_INPUT_CAPABILITY = "posCardDataTerminalInputCapability";
  @SerializedName(SERIALIZED_NAME_POS_CARD_DATA_TERMINAL_INPUT_CAPABILITY)
  private String posCardDataTerminalInputCapability;

  public static final String SERIALIZED_NAME_POS_CARDHOLDER_PRESENCE = "posCardholderPresence";
  @SerializedName(SERIALIZED_NAME_POS_CARDHOLDER_PRESENCE)
  private String posCardholderPresence;

  public static final String SERIALIZED_NAME_POS_CARD_PRESENCE = "posCardPresence";
  @SerializedName(SERIALIZED_NAME_POS_CARD_PRESENCE)
  private String posCardPresence;

  public static final String SERIALIZED_NAME_POS_ENTRY_MODE_PAN = "posEntryModePan";
  @SerializedName(SERIALIZED_NAME_POS_ENTRY_MODE_PAN)
  private String posEntryModePan;

  public static final String SERIALIZED_NAME_POS_ENTRY_MODE_PIN = "posEntryModePin";
  @SerializedName(SERIALIZED_NAME_POS_ENTRY_MODE_PIN)
  private String posEntryModePin;

  public static final String SERIALIZED_NAME_POS_TERMINAL_ATTENDANCE = "posTerminalAttendance";
  @SerializedName(SERIALIZED_NAME_POS_TERMINAL_ATTENDANCE)
  private String posTerminalAttendance;

  public static final String SERIALIZED_NAME_POS_TERMINAL_LOCATION = "posTerminalLocation";
  @SerializedName(SERIALIZED_NAME_POS_TERMINAL_LOCATION)
  private String posTerminalLocation;

  public static final String SERIALIZED_NAME_POS_TRANSACTION_STATUS = "posTransactionStatus";
  @SerializedName(SERIALIZED_NAME_POS_TRANSACTION_STATUS)
  private String posTransactionStatus;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER_ACCOUNT_RANGE = "primaryAccountNumberAccountRange";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER_ACCOUNT_RANGE)
  private String primaryAccountNumberAccountRange;

  public static final String SERIALIZED_NAME_PRIVATE_DATA = "privateData";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DATA)
  private String privateData;

  public static final String SERIALIZED_NAME_PROCESSING_CODE = "processingCode";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CODE)
  private String processingCode;

  public static final String SERIALIZED_NAME_RECORD_DATA_PRESENCE_INDICATOR = "recordDataPresenceIndicator";
  @SerializedName(SERIALIZED_NAME_RECORD_DATA_PRESENCE_INDICATOR)
  private String recordDataPresenceIndicator;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private String responseCode;

  public static final String SERIALIZED_NAME_RETRIEVAL_REFERENCE_NUMBER = "retrievalReferenceNumber";
  @SerializedName(SERIALIZED_NAME_RETRIEVAL_REFERENCE_NUMBER)
  private String retrievalReferenceNumber;

  public static final String SERIALIZED_NAME_SETTLEMENT_ACTUAL_AMOUNT = "settlementActualAmount";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ACTUAL_AMOUNT)
  private String settlementActualAmount;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_STAN = "stan";
  @SerializedName(SERIALIZED_NAME_STAN)
  private String stan;

  public static final String SERIALIZED_NAME_STORAGE_TECHNOLOGY = "storageTechnology";
  @SerializedName(SERIALIZED_NAME_STORAGE_TECHNOLOGY)
  private String storageTechnology;

  public static final String SERIALIZED_NAME_SYSTEMS_TRACE_AUDIT_NUMBER = "systemsTraceAuditNumber";
  @SerializedName(SERIALIZED_NAME_SYSTEMS_TRACE_AUDIT_NUMBER)
  private String systemsTraceAuditNumber;

  public static final String SERIALIZED_NAME_TOKEN_ASSURANCE_LEVEL = "tokenAssuranceLevel";
  @SerializedName(SERIALIZED_NAME_TOKEN_ASSURANCE_LEVEL)
  private String tokenAssuranceLevel;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR_ID = "tokenRequestorId";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR_ID)
  private String tokenRequestorId;

  public static final String SERIALIZED_NAME_TRACK1 = "track1";
  @SerializedName(SERIALIZED_NAME_TRACK1)
  private String track1;

  public static final String SERIALIZED_NAME_TRACK2 = "track2";
  @SerializedName(SERIALIZED_NAME_TRACK2)
  private String track2;

  public static final String SERIALIZED_NAME_TRANSACTION_ACTUAL_AMOUNT = "transactionActualAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ACTUAL_AMOUNT)
  private String transactionActualAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL = "transactionAmountLocal";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL)
  private String transactionAmountLocal;

  public static final String SERIALIZED_NAME_TRANSACTION_CATEGORY_CODE = "transactionCategoryCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CATEGORY_CODE)
  private String transactionCategoryCode;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY_CODE = "transactionCurrencyCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY_CODE)
  private String transactionCurrencyCode;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_TRANSMISSION_DATE_AND_TIME = "transmissionDateAndTime";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_DATE_AND_TIME)
  private String transmissionDateAndTime;

  public static final String SERIALIZED_NAME_UNIVERSAL_CARDHOLDER_AUTHENTICATION_FIELD_UCAF = "universalCardholderAuthenticationFieldUcaf";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_CARDHOLDER_AUTHENTICATION_FIELD_UCAF)
  private String universalCardholderAuthenticationFieldUcaf;

  public static final String SERIALIZED_NAME_VCN_PRODUCT_CODE = "vcnProductCode";
  @SerializedName(SERIALIZED_NAME_VCN_PRODUCT_CODE)
  private String vcnProductCode;

  public static final String SERIALIZED_NAME_WALLET_IDENTIFIER = "walletIdentifier";
  @SerializedName(SERIALIZED_NAME_WALLET_IDENTIFIER)
  private String walletIdentifier;

  public AuthorizationDetail() {
  }

  public AuthorizationDetail accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number associated with transaction in question
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public AuthorizationDetail accountNumberIndicator(String accountNumberIndicator) {
    
    this.accountNumberIndicator = accountNumberIndicator;
    return this;
  }

   /**
   * Indicates the type of PAN mapping account
   * @return accountNumberIndicator
  **/
  @javax.annotation.Nullable
  public String getAccountNumberIndicator() {
    return accountNumberIndicator;
  }


  public void setAccountNumberIndicator(String accountNumberIndicator) {
    this.accountNumberIndicator = accountNumberIndicator;
  }


  public AuthorizationDetail acquirer(String acquirer) {
    
    this.acquirer = acquirer;
    return this;
  }

   /**
   * The acquiring institution (for example, merchant bank) or its agent
   * @return acquirer
  **/
  @javax.annotation.Nullable
  public String getAcquirer() {
    return acquirer;
  }


  public void setAcquirer(String acquirer) {
    this.acquirer = acquirer;
  }


  public AuthorizationDetail acquiringInstitutionCountryCode(String acquiringInstitutionCountryCode) {
    
    this.acquiringInstitutionCountryCode = acquiringInstitutionCountryCode;
    return this;
  }

   /**
   * The code of the country where the acquirer is located
   * @return acquiringInstitutionCountryCode
  **/
  @javax.annotation.Nullable
  public String getAcquiringInstitutionCountryCode() {
    return acquiringInstitutionCountryCode;
  }


  public void setAcquiringInstitutionCountryCode(String acquiringInstitutionCountryCode) {
    this.acquiringInstitutionCountryCode = acquiringInstitutionCountryCode;
  }


  public AuthorizationDetail acquiringInstitutionId(String acquiringInstitutionId) {
    
    this.acquiringInstitutionId = acquiringInstitutionId;
    return this;
  }

   /**
   * Identifies the acquiring institution (for example, merchant bank) or its agent
   * @return acquiringInstitutionId
  **/
  @javax.annotation.Nullable
  public String getAcquiringInstitutionId() {
    return acquiringInstitutionId;
  }


  public void setAcquiringInstitutionId(String acquiringInstitutionId) {
    this.acquiringInstitutionId = acquiringInstitutionId;
  }


  public AuthorizationDetail addressVerificationServiceResponse(String addressVerificationServiceResponse) {
    
    this.addressVerificationServiceResponse = addressVerificationServiceResponse;
    return this;
  }

   /**
   * Indicates that verification of the cardholder billing address is requested in the authorization message
   * @return addressVerificationServiceResponse
  **/
  @javax.annotation.Nullable
  public String getAddressVerificationServiceResponse() {
    return addressVerificationServiceResponse;
  }


  public void setAddressVerificationServiceResponse(String addressVerificationServiceResponse) {
    this.addressVerificationServiceResponse = addressVerificationServiceResponse;
  }


  public AuthorizationDetail adviceReasonCode(String adviceReasonCode) {
    
    this.adviceReasonCode = adviceReasonCode;
    return this;
  }

   /**
   * Indicates the specific purpose of an advice message
   * @return adviceReasonCode
  **/
  @javax.annotation.Nullable
  public String getAdviceReasonCode() {
    return adviceReasonCode;
  }


  public void setAdviceReasonCode(String adviceReasonCode) {
    this.adviceReasonCode = adviceReasonCode;
  }


  public AuthorizationDetail atcDiscrepancyIndicator(String atcDiscrepancyIndicator) {
    
    this.atcDiscrepancyIndicator = atcDiscrepancyIndicator;
    return this;
  }

   /**
   * Indicates if the ATC Discrepancy Value is above, below or within the maximum values allowed by the issuer.
   * @return atcDiscrepancyIndicator
  **/
  @javax.annotation.Nullable
  public String getAtcDiscrepancyIndicator() {
    return atcDiscrepancyIndicator;
  }


  public void setAtcDiscrepancyIndicator(String atcDiscrepancyIndicator) {
    this.atcDiscrepancyIndicator = atcDiscrepancyIndicator;
  }


  public AuthorizationDetail atcDiscrepancyValue(String atcDiscrepancyValue) {
    
    this.atcDiscrepancyValue = atcDiscrepancyValue;
    return this;
  }

   /**
   * The differential between the transaction ATC and the maximum value allowed by the issuer when the transaction ATC is above the previous ATC, or the differential between the transaction ATC and the minimum value allowed by the issuer when the transaction ATC is below the previous ATC. ATC Discrepancy Value will be zero when the transaction ATC is within the issuer-defined limits
   * @return atcDiscrepancyValue
  **/
  @javax.annotation.Nullable
  public String getAtcDiscrepancyValue() {
    return atcDiscrepancyValue;
  }


  public void setAtcDiscrepancyValue(String atcDiscrepancyValue) {
    this.atcDiscrepancyValue = atcDiscrepancyValue;
  }


  public AuthorizationDetail atcValue(String atcValue) {
    
    this.atcValue = atcValue;
    return this;
  }

   /**
   * Contains the derived full ATC Value used in the validation
   * @return atcValue
  **/
  @javax.annotation.Nullable
  public String getAtcValue() {
    return atcValue;
  }


  public void setAtcValue(String atcValue) {
    this.atcValue = atcValue;
  }


  public AuthorizationDetail authenticationIndicator(String authenticationIndicator) {
    
    this.authenticationIndicator = authenticationIndicator;
    return this;
  }

   /**
   * Defined by the Authorization Platform and is passed to the issuer to indicate that the transaction qualified for Authentication service
   * @return authenticationIndicator
  **/
  @javax.annotation.Nullable
  public String getAuthenticationIndicator() {
    return authenticationIndicator;
  }


  public void setAuthenticationIndicator(String authenticationIndicator) {
    this.authenticationIndicator = authenticationIndicator;
  }


  public AuthorizationDetail authorizationIdResponse(String authorizationIdResponse) {
    
    this.authorizationIdResponse = authorizationIdResponse;
    return this;
  }

   /**
   * A transaction response ID code that the authorizing institution assigns. DE 38 is used to transmit a card issuer&#39;s authorization code for Authorization transactions
   * @return authorizationIdResponse
  **/
  @javax.annotation.Nullable
  public String getAuthorizationIdResponse() {
    return authorizationIdResponse;
  }


  public void setAuthorizationIdResponse(String authorizationIdResponse) {
    this.authorizationIdResponse = authorizationIdResponse;
  }


  public AuthorizationDetail banknetDate(String banknetDate) {
    
    this.banknetDate = banknetDate;
    return this;
  }

   /**
   * Date the transaction hit Mastercard network
   * @return banknetDate
  **/
  @javax.annotation.Nullable
  public String getBanknetDate() {
    return banknetDate;
  }


  public void setBanknetDate(String banknetDate) {
    this.banknetDate = banknetDate;
  }


  public AuthorizationDetail banknetReferenceNumber(String banknetReferenceNumber) {
    
    this.banknetReferenceNumber = banknetReferenceNumber;
    return this;
  }

   /**
   * Generated by the Authorization Platform for each originating message it routes
   * @return banknetReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getBanknetReferenceNumber() {
    return banknetReferenceNumber;
  }


  public void setBanknetReferenceNumber(String banknetReferenceNumber) {
    this.banknetReferenceNumber = banknetReferenceNumber;
  }


  public AuthorizationDetail billingCurrencyCode(String billingCurrencyCode) {
    
    this.billingCurrencyCode = billingCurrencyCode;
    return this;
  }

   /**
   * Currency code for the billing amount
   * @return billingCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getBillingCurrencyCode() {
    return billingCurrencyCode;
  }


  public void setBillingCurrencyCode(String billingCurrencyCode) {
    this.billingCurrencyCode = billingCurrencyCode;
  }


  public AuthorizationDetail cardAcceptorCity(String cardAcceptorCity) {
    
    this.cardAcceptorCity = cardAcceptorCity;
    return this;
  }

   /**
   * Contains the card acceptor city of the merchant or, if a payment facilitator is involved in the transaction, the sub-merchant
   * @return cardAcceptorCity
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorCity() {
    return cardAcceptorCity;
  }


  public void setCardAcceptorCity(String cardAcceptorCity) {
    this.cardAcceptorCity = cardAcceptorCity;
  }


  public AuthorizationDetail cardAcceptorId(String cardAcceptorId) {
    
    this.cardAcceptorId = cardAcceptorId;
    return this;
  }

   /**
   * Identifies the card acceptor ID assigned by the acquirer
   * @return cardAcceptorId
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorId() {
    return cardAcceptorId;
  }


  public void setCardAcceptorId(String cardAcceptorId) {
    this.cardAcceptorId = cardAcceptorId;
  }


  public AuthorizationDetail cardAcceptorName(String cardAcceptorName) {
    
    this.cardAcceptorName = cardAcceptorName;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s name
   * @return cardAcceptorName
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorName() {
    return cardAcceptorName;
  }


  public void setCardAcceptorName(String cardAcceptorName) {
    this.cardAcceptorName = cardAcceptorName;
  }


  public AuthorizationDetail cardAcceptorState(String cardAcceptorState) {
    
    this.cardAcceptorState = cardAcceptorState;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s state
   * @return cardAcceptorState
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorState() {
    return cardAcceptorState;
  }


  public void setCardAcceptorState(String cardAcceptorState) {
    this.cardAcceptorState = cardAcceptorState;
  }


  public AuthorizationDetail cardAcceptorTerminalId(String cardAcceptorTerminalId) {
    
    this.cardAcceptorTerminalId = cardAcceptorTerminalId;
    return this;
  }

   /**
   * A unique code identifying a terminal at the card acceptor location
   * @return cardAcceptorTerminalId
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorTerminalId() {
    return cardAcceptorTerminalId;
  }


  public void setCardAcceptorTerminalId(String cardAcceptorTerminalId) {
    this.cardAcceptorTerminalId = cardAcceptorTerminalId;
  }


  public AuthorizationDetail cardholderActivatedTerminalLevel(String cardholderActivatedTerminalLevel) {
    
    this.cardholderActivatedTerminalLevel = cardholderActivatedTerminalLevel;
    return this;
  }

   /**
   * Indicates whether the cardholder activated the terminal with the use of the card and the CAT security level
   * @return cardholderActivatedTerminalLevel
  **/
  @javax.annotation.Nullable
  public String getCardholderActivatedTerminalLevel() {
    return cardholderActivatedTerminalLevel;
  }


  public void setCardholderActivatedTerminalLevel(String cardholderActivatedTerminalLevel) {
    this.cardholderActivatedTerminalLevel = cardholderActivatedTerminalLevel;
  }


  public AuthorizationDetail cardholderBillingActualAmount(String cardholderBillingActualAmount) {
    
    this.cardholderBillingActualAmount = cardholderBillingActualAmount;
    return this;
  }

   /**
   * The actual amount in the issuer currency
   * @return cardholderBillingActualAmount
  **/
  @javax.annotation.Nullable
  public String getCardholderBillingActualAmount() {
    return cardholderBillingActualAmount;
  }


  public void setCardholderBillingActualAmount(String cardholderBillingActualAmount) {
    this.cardholderBillingActualAmount = cardholderBillingActualAmount;
  }


  public AuthorizationDetail cardholderBillingAmount(String cardholderBillingAmount) {
    
    this.cardholderBillingAmount = cardholderBillingAmount;
    return this;
  }

   /**
   * The transaction amount in the issuers currency
   * @return cardholderBillingAmount
  **/
  @javax.annotation.Nullable
  public String getCardholderBillingAmount() {
    return cardholderBillingAmount;
  }


  public void setCardholderBillingAmount(String cardholderBillingAmount) {
    this.cardholderBillingAmount = cardholderBillingAmount;
  }


  public AuthorizationDetail cardAuthenticationMethodValidationCode(String cardAuthenticationMethodValidationCode) {
    
    this.cardAuthenticationMethodValidationCode = cardAuthenticationMethodValidationCode;
    return this;
  }

   /**
   * Indicates the method by which the cardholder&#39;s identity was verified at the point of service
   * @return cardAuthenticationMethodValidationCode
  **/
  @javax.annotation.Nullable
  public String getCardAuthenticationMethodValidationCode() {
    return cardAuthenticationMethodValidationCode;
  }


  public void setCardAuthenticationMethodValidationCode(String cardAuthenticationMethodValidationCode) {
    this.cardAuthenticationMethodValidationCode = cardAuthenticationMethodValidationCode;
  }


  public AuthorizationDetail conversionDate(String conversionDate) {
    
    this.conversionDate = conversionDate;
    return this;
  }

   /**
   * The month and day that the conversion rate is effective to convert the transaction amount from the transaction currency into the currency of settlement or to convert the transaction amount from the original currency into the cardholder billing currency
   * @return conversionDate
  **/
  @javax.annotation.Nullable
  public String getConversionDate() {
    return conversionDate;
  }


  public void setConversionDate(String conversionDate) {
    this.conversionDate = conversionDate;
  }


  public AuthorizationDetail conversionRate(String conversionRate) {
    
    this.conversionRate = conversionRate;
    return this;
  }

   /**
   * Indicates the conversion rate
   * @return conversionRate
  **/
  @javax.annotation.Nullable
  public String getConversionRate() {
    return conversionRate;
  }


  public void setConversionRate(String conversionRate) {
    this.conversionRate = conversionRate;
  }


  public AuthorizationDetail electronicCommerceIndicators(String electronicCommerceIndicators) {
    
    this.electronicCommerceIndicators = electronicCommerceIndicators;
    return this;
  }

   /**
   * Electronic commerce code
   * @return electronicCommerceIndicators
  **/
  @javax.annotation.Nullable
  public String getElectronicCommerceIndicators() {
    return electronicCommerceIndicators;
  }


  public void setElectronicCommerceIndicators(String electronicCommerceIndicators) {
    this.electronicCommerceIndicators = electronicCommerceIndicators;
  }


  public AuthorizationDetail electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator(String electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) {
    
    this.electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator = electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
    return this;
  }

   /**
   * Indicates the electronic commerce security level and UCAF collection
   * @return electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator
  **/
  @javax.annotation.Nullable
  public String getElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator() {
    return electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
  }


  public void setElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator(String electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) {
    this.electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator = electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
  }


  public AuthorizationDetail expirationDatePresenceInd(String expirationDatePresenceInd) {
    
    this.expirationDatePresenceInd = expirationDatePresenceInd;
    return this;
  }

   /**
   * Indicates if expiration Date present on card
   * @return expirationDatePresenceInd
  **/
  @javax.annotation.Nullable
  public String getExpirationDatePresenceInd() {
    return expirationDatePresenceInd;
  }


  public void setExpirationDatePresenceInd(String expirationDatePresenceInd) {
    this.expirationDatePresenceInd = expirationDatePresenceInd;
  }


  public AuthorizationDetail finalAuthorizationIndicator(String finalAuthorizationIndicator) {
    
    this.finalAuthorizationIndicator = finalAuthorizationIndicator;
    return this;
  }

   /**
   * Designates whether the authorization is a final authorization
   * @return finalAuthorizationIndicator
  **/
  @javax.annotation.Nullable
  public String getFinalAuthorizationIndicator() {
    return finalAuthorizationIndicator;
  }


  public void setFinalAuthorizationIndicator(String finalAuthorizationIndicator) {
    this.finalAuthorizationIndicator = finalAuthorizationIndicator;
  }


  public AuthorizationDetail financialNetworkCode(String financialNetworkCode) {
    
    this.financialNetworkCode = financialNetworkCode;
    return this;
  }

   /**
   * Identifies the specific program or service (for example, the financial network, financial program, or card program) with which the transaction is associated. DE 63 will contain the graduated product when the issuer&#39;s cardholder account participates in the Product Graduation Account Level Management service
   * @return financialNetworkCode
  **/
  @javax.annotation.Nullable
  public String getFinancialNetworkCode() {
    return financialNetworkCode;
  }


  public void setFinancialNetworkCode(String financialNetworkCode) {
    this.financialNetworkCode = financialNetworkCode;
  }


  public AuthorizationDetail forwardingInstitutionId(String forwardingInstitutionId) {
    
    this.forwardingInstitutionId = forwardingInstitutionId;
    return this;
  }

   /**
   * Identifies the institution forwarding a Request or Advice message in an interchange system if it is not the same institution as specified in Acquiring Institution ID Code
   * @return forwardingInstitutionId
  **/
  @javax.annotation.Nullable
  public String getForwardingInstitutionId() {
    return forwardingInstitutionId;
  }


  public void setForwardingInstitutionId(String forwardingInstitutionId) {
    this.forwardingInstitutionId = forwardingInstitutionId;
  }


  public AuthorizationDetail infData(String infData) {
    
    this.infData = infData;
    return this;
  }

   /**
   * Contains acquiring network trace information that INFs may require to quickly and accurately route Administrative Advice/0620 messages back to the original acquiring institution
   * @return infData
  **/
  @javax.annotation.Nullable
  public String getInfData() {
    return infData;
  }


  public void setInfData(String infData) {
    this.infData = infData;
  }


  public AuthorizationDetail integratedCircuitCardRelatedData(String integratedCircuitCardRelatedData) {
    
    this.integratedCircuitCardRelatedData = integratedCircuitCardRelatedData;
    return this;
  }

   /**
   * Contains chip data formatted in accordance with the Europay MasterCard Visa (EMV) specifications
   * @return integratedCircuitCardRelatedData
  **/
  @javax.annotation.Nullable
  public String getIntegratedCircuitCardRelatedData() {
    return integratedCircuitCardRelatedData;
  }


  public void setIntegratedCircuitCardRelatedData(String integratedCircuitCardRelatedData) {
    this.integratedCircuitCardRelatedData = integratedCircuitCardRelatedData;
  }


  public AuthorizationDetail issuer(String issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * The issuing institution
   * @return issuer
  **/
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }


  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public AuthorizationDetail mastercardPromotionCode(String mastercardPromotionCode) {
    
    this.mastercardPromotionCode = mastercardPromotionCode;
    return this;
  }

   /**
   * ontains the promotion code to identify unique use of a Mastercard product for a specific program or service established between issuers and merchants
   * @return mastercardPromotionCode
  **/
  @javax.annotation.Nullable
  public String getMastercardPromotionCode() {
    return mastercardPromotionCode;
  }


  public void setMastercardPromotionCode(String mastercardPromotionCode) {
    this.mastercardPromotionCode = mastercardPromotionCode;
  }


  public AuthorizationDetail mccMessageId(String mccMessageId) {
    
    this.mccMessageId = mccMessageId;
    return this;
  }

   /**
   * The classification (card acceptor business code/merchant category code [MCC]) of the merchant&#39;s type of business or service
   * @return mccMessageId
  **/
  @javax.annotation.Nullable
  public String getMccMessageId() {
    return mccMessageId;
  }


  public void setMccMessageId(String mccMessageId) {
    this.mccMessageId = mccMessageId;
  }


  public AuthorizationDetail merchantAdviceCode(String merchantAdviceCode) {
    
    this.merchantAdviceCode = merchantAdviceCode;
    return this;
  }

   /**
   * Contains the merchant advice code
   * @return merchantAdviceCode
  **/
  @javax.annotation.Nullable
  public String getMerchantAdviceCode() {
    return merchantAdviceCode;
  }


  public void setMerchantAdviceCode(String merchantAdviceCode) {
    this.merchantAdviceCode = merchantAdviceCode;
  }


  public AuthorizationDetail merchantCategoryCode(String merchantCategoryCode) {
    
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Contains the Merchant Category Code
   * @return merchantCategoryCode
  **/
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }


  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public AuthorizationDetail mobilePhoneNumber(String mobilePhoneNumber) {
    
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

   /**
   * Contains the phone number of the wireless phone for which the customer is purchasing extra service
   * @return mobilePhoneNumber
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneNumber() {
    return mobilePhoneNumber;
  }


  public void setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
  }


  public AuthorizationDetail mobilePhoneServiceProviderName(String mobilePhoneServiceProviderName) {
    
    this.mobilePhoneServiceProviderName = mobilePhoneServiceProviderName;
    return this;
  }

   /**
   * Contains the name or other identifier of the mobile phone service provider
   * @return mobilePhoneServiceProviderName
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneServiceProviderName() {
    return mobilePhoneServiceProviderName;
  }


  public void setMobilePhoneServiceProviderName(String mobilePhoneServiceProviderName) {
    this.mobilePhoneServiceProviderName = mobilePhoneServiceProviderName;
  }


  public AuthorizationDetail originalAcquiringInstitutionIdCode(String originalAcquiringInstitutionIdCode) {
    
    this.originalAcquiringInstitutionIdCode = originalAcquiringInstitutionIdCode;
    return this;
  }

   /**
   * Identifies the acquiring institution (for example, merchant bank) or its agent
   * @return originalAcquiringInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getOriginalAcquiringInstitutionIdCode() {
    return originalAcquiringInstitutionIdCode;
  }


  public void setOriginalAcquiringInstitutionIdCode(String originalAcquiringInstitutionIdCode) {
    this.originalAcquiringInstitutionIdCode = originalAcquiringInstitutionIdCode;
  }


  public AuthorizationDetail originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator(String originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) {
    
    this.originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator = originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
    return this;
  }

   /**
   * Identifies the level of UCAF supported in the authorization process.
   * @return originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator
  **/
  @javax.annotation.Nullable
  public String getOriginalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator() {
    return originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
  }


  public void setOriginalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator(String originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) {
    this.originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator = originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator;
  }


  public AuthorizationDetail originalIssuerForwardingInstitutionIdCode(String originalIssuerForwardingInstitutionIdCode) {
    
    this.originalIssuerForwardingInstitutionIdCode = originalIssuerForwardingInstitutionIdCode;
    return this;
  }

   /**
   * Identifies a message&#39;s forwarding institution
   * @return originalIssuerForwardingInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getOriginalIssuerForwardingInstitutionIdCode() {
    return originalIssuerForwardingInstitutionIdCode;
  }


  public void setOriginalIssuerForwardingInstitutionIdCode(String originalIssuerForwardingInstitutionIdCode) {
    this.originalIssuerForwardingInstitutionIdCode = originalIssuerForwardingInstitutionIdCode;
  }


  public AuthorizationDetail originalMessageTypeIdentifier(String originalMessageTypeIdentifier) {
    
    this.originalMessageTypeIdentifier = originalMessageTypeIdentifier;
    return this;
  }

   /**
   * Contains the message type identifier
   * @return originalMessageTypeIdentifier
  **/
  @javax.annotation.Nullable
  public String getOriginalMessageTypeIdentifier() {
    return originalMessageTypeIdentifier;
  }


  public void setOriginalMessageTypeIdentifier(String originalMessageTypeIdentifier) {
    this.originalMessageTypeIdentifier = originalMessageTypeIdentifier;
  }


  public AuthorizationDetail pinServiceCode(String pinServiceCode) {
    
    this.pinServiceCode = pinServiceCode;
    return this;
  }

   /**
   * Indicates the results of PIN processing by the Authorization Platform
   * @return pinServiceCode
  **/
  @javax.annotation.Nullable
  public String getPinServiceCode() {
    return pinServiceCode;
  }


  public void setPinServiceCode(String pinServiceCode) {
    this.pinServiceCode = pinServiceCode;
  }


  public AuthorizationDetail realTimeSubstantiationIndicator(String realTimeSubstantiationIndicator) {
    
    this.realTimeSubstantiationIndicator = realTimeSubstantiationIndicator;
    return this;
  }

   /**
   * Indicates if the merchant terminal verified the purchased items against the Inventory Information Approval System (IIAS)
   * @return realTimeSubstantiationIndicator
  **/
  @javax.annotation.Nullable
  public String getRealTimeSubstantiationIndicator() {
    return realTimeSubstantiationIndicator;
  }


  public void setRealTimeSubstantiationIndicator(String realTimeSubstantiationIndicator) {
    this.realTimeSubstantiationIndicator = realTimeSubstantiationIndicator;
  }


  public AuthorizationDetail reasonForUcafCollectionIndicatorDowngrade(String reasonForUcafCollectionIndicatorDowngrade) {
    
    this.reasonForUcafCollectionIndicatorDowngrade = reasonForUcafCollectionIndicatorDowngrade;
    return this;
  }

   /**
   * Describes the reason why the Authorization Request/0100 message was downgraded
   * @return reasonForUcafCollectionIndicatorDowngrade
  **/
  @javax.annotation.Nullable
  public String getReasonForUcafCollectionIndicatorDowngrade() {
    return reasonForUcafCollectionIndicatorDowngrade;
  }


  public void setReasonForUcafCollectionIndicatorDowngrade(String reasonForUcafCollectionIndicatorDowngrade) {
    this.reasonForUcafCollectionIndicatorDowngrade = reasonForUcafCollectionIndicatorDowngrade;
  }


  public AuthorizationDetail posCardDataTerminalInputCapability(String posCardDataTerminalInputCapability) {
    
    this.posCardDataTerminalInputCapability = posCardDataTerminalInputCapability;
    return this;
  }

   /**
   * Indicates the terminal capabilities for transferring the data on the card into the terminal
   * @return posCardDataTerminalInputCapability
  **/
  @javax.annotation.Nullable
  public String getPosCardDataTerminalInputCapability() {
    return posCardDataTerminalInputCapability;
  }


  public void setPosCardDataTerminalInputCapability(String posCardDataTerminalInputCapability) {
    this.posCardDataTerminalInputCapability = posCardDataTerminalInputCapability;
  }


  public AuthorizationDetail posCardholderPresence(String posCardholderPresence) {
    
    this.posCardholderPresence = posCardholderPresence;
    return this;
  }

   /**
   * Indicates whether the cardholder is present at the point of service and explains the condition if the cardholder is not present
   * @return posCardholderPresence
  **/
  @javax.annotation.Nullable
  public String getPosCardholderPresence() {
    return posCardholderPresence;
  }


  public void setPosCardholderPresence(String posCardholderPresence) {
    this.posCardholderPresence = posCardholderPresence;
  }


  public AuthorizationDetail posCardPresence(String posCardPresence) {
    
    this.posCardPresence = posCardPresence;
    return this;
  }

   /**
   * Indicates if the card is present at the point of service
   * @return posCardPresence
  **/
  @javax.annotation.Nullable
  public String getPosCardPresence() {
    return posCardPresence;
  }


  public void setPosCardPresence(String posCardPresence) {
    this.posCardPresence = posCardPresence;
  }


  public AuthorizationDetail posEntryModePan(String posEntryModePan) {
    
    this.posEntryModePan = posEntryModePan;
    return this;
  }

   /**
   * Describes the capability of the terminal device to support/accept PAN entry
   * @return posEntryModePan
  **/
  @javax.annotation.Nullable
  public String getPosEntryModePan() {
    return posEntryModePan;
  }


  public void setPosEntryModePan(String posEntryModePan) {
    this.posEntryModePan = posEntryModePan;
  }


  public AuthorizationDetail posEntryModePin(String posEntryModePin) {
    
    this.posEntryModePin = posEntryModePin;
    return this;
  }

   /**
   * Describes the capability of the terminal device to support/accept PIN entry
   * @return posEntryModePin
  **/
  @javax.annotation.Nullable
  public String getPosEntryModePin() {
    return posEntryModePin;
  }


  public void setPosEntryModePin(String posEntryModePin) {
    this.posEntryModePin = posEntryModePin;
  }


  public AuthorizationDetail posTerminalAttendance(String posTerminalAttendance) {
    
    this.posTerminalAttendance = posTerminalAttendance;
    return this;
  }

   /**
   * Indicates if the card acceptor is attending the terminal
   * @return posTerminalAttendance
  **/
  @javax.annotation.Nullable
  public String getPosTerminalAttendance() {
    return posTerminalAttendance;
  }


  public void setPosTerminalAttendance(String posTerminalAttendance) {
    this.posTerminalAttendance = posTerminalAttendance;
  }


  public AuthorizationDetail posTerminalLocation(String posTerminalLocation) {
    
    this.posTerminalLocation = posTerminalLocation;
    return this;
  }

   /**
   * Indicates the terminal location
   * @return posTerminalLocation
  **/
  @javax.annotation.Nullable
  public String getPosTerminalLocation() {
    return posTerminalLocation;
  }


  public void setPosTerminalLocation(String posTerminalLocation) {
    this.posTerminalLocation = posTerminalLocation;
  }


  public AuthorizationDetail posTransactionStatus(String posTransactionStatus) {
    
    this.posTransactionStatus = posTransactionStatus;
    return this;
  }

   /**
   * Indicates the purpose or status of the request
   * @return posTransactionStatus
  **/
  @javax.annotation.Nullable
  public String getPosTransactionStatus() {
    return posTransactionStatus;
  }


  public void setPosTransactionStatus(String posTransactionStatus) {
    this.posTransactionStatus = posTransactionStatus;
  }


  public AuthorizationDetail primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Account number associated with transaction in question 
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public AuthorizationDetail primaryAccountNumberAccountRange(String primaryAccountNumberAccountRange) {
    
    this.primaryAccountNumberAccountRange = primaryAccountNumberAccountRange;
    return this;
  }

   /**
   * Carries either the first nine digits of the cardholder PAN, or the full Visa cardholder PAN in the authorization response for a transaction initiated with a Visa token
   * @return primaryAccountNumberAccountRange
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumberAccountRange() {
    return primaryAccountNumberAccountRange;
  }


  public void setPrimaryAccountNumberAccountRange(String primaryAccountNumberAccountRange) {
    this.primaryAccountNumberAccountRange = primaryAccountNumberAccountRange;
  }


  public AuthorizationDetail privateData(String privateData) {
    
    this.privateData = privateData;
    return this;
  }

   /**
   * Contain any private-use data that the customer may want to include in a message
   * @return privateData
  **/
  @javax.annotation.Nullable
  public String getPrivateData() {
    return privateData;
  }


  public void setPrivateData(String privateData) {
    this.privateData = privateData;
  }


  public AuthorizationDetail processingCode(String processingCode) {
    
    this.processingCode = processingCode;
    return this;
  }

   /**
   * A series of digits used to describe the effect of a transaction on the customer account and the type of accounts affected
   * @return processingCode
  **/
  @javax.annotation.Nullable
  public String getProcessingCode() {
    return processingCode;
  }


  public void setProcessingCode(String processingCode) {
    this.processingCode = processingCode;
  }


  public AuthorizationDetail recordDataPresenceIndicator(String recordDataPresenceIndicator) {
    
    this.recordDataPresenceIndicator = recordDataPresenceIndicator;
    return this;
  }

   /**
   * A variable-length data element used for transmitting file record data or textual character string data in various message types
   * @return recordDataPresenceIndicator
  **/
  @javax.annotation.Nullable
  public String getRecordDataPresenceIndicator() {
    return recordDataPresenceIndicator;
  }


  public void setRecordDataPresenceIndicator(String recordDataPresenceIndicator) {
    this.recordDataPresenceIndicator = recordDataPresenceIndicator;
  }


  public AuthorizationDetail responseCode(String responseCode) {
    
    this.responseCode = responseCode;
    return this;
  }

   /**
   * Defines the disposition of a previous message or an action taken as a result of receipt of a previous message. Response codes also are used to indicate approval or decline of a transaction. In the event an authorization is declined, the response code indicates the reason for rejection and may indicate an action to be taken at the card acceptor (for example, capture card)
   * @return responseCode
  **/
  @javax.annotation.Nullable
  public String getResponseCode() {
    return responseCode;
  }


  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }


  public AuthorizationDetail retrievalReferenceNumber(String retrievalReferenceNumber) {
    
    this.retrievalReferenceNumber = retrievalReferenceNumber;
    return this;
  }

   /**
   * A document reference number supplied by the system retaining the original source document of the transaction and assists in locating that source document or a copy thereof 
   * @return retrievalReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getRetrievalReferenceNumber() {
    return retrievalReferenceNumber;
  }


  public void setRetrievalReferenceNumber(String retrievalReferenceNumber) {
    this.retrievalReferenceNumber = retrievalReferenceNumber;
  }


  public AuthorizationDetail settlementActualAmount(String settlementActualAmount) {
    
    this.settlementActualAmount = settlementActualAmount;
    return this;
  }

   /**
   * Indicates the actual settlement amount in the settlement currency
   * @return settlementActualAmount
  **/
  @javax.annotation.Nullable
  public String getSettlementActualAmount() {
    return settlementActualAmount;
  }


  public void setSettlementActualAmount(String settlementActualAmount) {
    this.settlementActualAmount = settlementActualAmount;
  }


  public AuthorizationDetail settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * The date (month and day) that funds will be transferred between an acquirer and an issuer or an appropriate intermediate network facility (INF)
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public AuthorizationDetail stan(String stan) {
    
    this.stan = stan;
    return this;
  }

   /**
   * Indicates the Systems Trace Audit Number (STAN)
   * @return stan
  **/
  @javax.annotation.Nullable
  public String getStan() {
    return stan;
  }


  public void setStan(String stan) {
    this.stan = stan;
  }


  public AuthorizationDetail storageTechnology(String storageTechnology) {
    
    this.storageTechnology = storageTechnology;
    return this;
  }

   /**
   * Describes the Storage Technology of a requested or created token
   * @return storageTechnology
  **/
  @javax.annotation.Nullable
  public String getStorageTechnology() {
    return storageTechnology;
  }


  public void setStorageTechnology(String storageTechnology) {
    this.storageTechnology = storageTechnology;
  }


  public AuthorizationDetail systemsTraceAuditNumber(String systemsTraceAuditNumber) {
    
    this.systemsTraceAuditNumber = systemsTraceAuditNumber;
    return this;
  }

   /**
   * The unique identifier assigned to each transaction by the originator of the message
   * @return systemsTraceAuditNumber
  **/
  @javax.annotation.Nullable
  public String getSystemsTraceAuditNumber() {
    return systemsTraceAuditNumber;
  }


  public void setSystemsTraceAuditNumber(String systemsTraceAuditNumber) {
    this.systemsTraceAuditNumber = systemsTraceAuditNumber;
  }


  public AuthorizationDetail tokenAssuranceLevel(String tokenAssuranceLevel) {
    
    this.tokenAssuranceLevel = tokenAssuranceLevel;
    return this;
  }

   /**
   * Contains a value indicating the confidence level of the token to PAN/cardholder binding
   * @return tokenAssuranceLevel
  **/
  @javax.annotation.Nullable
  public String getTokenAssuranceLevel() {
    return tokenAssuranceLevel;
  }


  public void setTokenAssuranceLevel(String tokenAssuranceLevel) {
    this.tokenAssuranceLevel = tokenAssuranceLevel;
  }


  public AuthorizationDetail tokenRequestorId(String tokenRequestorId) {
    
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * Contains the ID assigned by the token service provider to the token requestor
   * @return tokenRequestorId
  **/
  @javax.annotation.Nullable
  public String getTokenRequestorId() {
    return tokenRequestorId;
  }


  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }


  public AuthorizationDetail track1(String track1) {
    
    this.track1 = track1;
    return this;
  }

   /**
   * The information encoded on track 1 of the card&#39;s magnetic stripe as defined in the ISO 7813 specification, including data element separators but excluding beginning and ending sentinels and LRC characters as defined in this data element definition
   * @return track1
  **/
  @javax.annotation.Nullable
  public String getTrack1() {
    return track1;
  }


  public void setTrack1(String track1) {
    this.track1 = track1;
  }


  public AuthorizationDetail track2(String track2) {
    
    this.track2 = track2;
    return this;
  }

   /**
   * The information encoded on track 2 of the card magnetic stripe as defined in the ISO 7813 specification, including data element separators but excluding beginning and ending sentinels and longitudinal redundancy check (LRC) characters as defined therein
   * @return track2
  **/
  @javax.annotation.Nullable
  public String getTrack2() {
    return track2;
  }


  public void setTrack2(String track2) {
    this.track2 = track2;
  }


  public AuthorizationDetail transactionActualAmount(String transactionActualAmount) {
    
    this.transactionActualAmount = transactionActualAmount;
    return this;
  }

   /**
   * Indicates the actual transaction amount
   * @return transactionActualAmount
  **/
  @javax.annotation.Nullable
  public String getTransactionActualAmount() {
    return transactionActualAmount;
  }


  public void setTransactionActualAmount(String transactionActualAmount) {
    this.transactionActualAmount = transactionActualAmount;
  }


  public AuthorizationDetail transactionAmountLocal(String transactionAmountLocal) {
    
    this.transactionAmountLocal = transactionAmountLocal;
    return this;
  }

   /**
   * Transaction in the currency of transaction
   * @return transactionAmountLocal
  **/
  @javax.annotation.Nullable
  public String getTransactionAmountLocal() {
    return transactionAmountLocal;
  }


  public void setTransactionAmountLocal(String transactionAmountLocal) {
    this.transactionAmountLocal = transactionAmountLocal;
  }


  public AuthorizationDetail transactionCategoryCode(String transactionCategoryCode) {
    
    this.transactionCategoryCode = transactionCategoryCode;
    return this;
  }

   /**
   * The format is LLLt, where t is the transaction category code (TCC). The message must contain an appropriate TCC as the first byte of data after the length within DE 48. The TCC classifies major categories of transactions, such as Retail Sale, Cash Disbursement, and Mail Order
   * @return transactionCategoryCode
  **/
  @javax.annotation.Nullable
  public String getTransactionCategoryCode() {
    return transactionCategoryCode;
  }


  public void setTransactionCategoryCode(String transactionCategoryCode) {
    this.transactionCategoryCode = transactionCategoryCode;
  }


  public AuthorizationDetail transactionCurrencyCode(String transactionCurrencyCode) {
    
    this.transactionCurrencyCode = transactionCurrencyCode;
    return this;
  }

   /**
   * The local currency of the acquirer or source location of the transaction 
   * @return transactionCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getTransactionCurrencyCode() {
    return transactionCurrencyCode;
  }


  public void setTransactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
  }


  public AuthorizationDetail transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Contains the type of ATM credit card cash advance installment transaction
   * @return transactionType
  **/
  @javax.annotation.Nullable
  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public AuthorizationDetail transmissionDateAndTime(String transmissionDateAndTime) {
    
    this.transmissionDateAndTime = transmissionDateAndTime;
    return this;
  }

   /**
   * The date and time a message was transmitted by a processing entity, to be expressed in Coordinated Universal Time (UTC)
   * @return transmissionDateAndTime
  **/
  @javax.annotation.Nullable
  public String getTransmissionDateAndTime() {
    return transmissionDateAndTime;
  }


  public void setTransmissionDateAndTime(String transmissionDateAndTime) {
    this.transmissionDateAndTime = transmissionDateAndTime;
  }


  public AuthorizationDetail universalCardholderAuthenticationFieldUcaf(String universalCardholderAuthenticationFieldUcaf) {
    
    this.universalCardholderAuthenticationFieldUcaf = universalCardholderAuthenticationFieldUcaf;
    return this;
  }

   /**
   * Contains the encoded MasterCard SecureCode  issuer or cardholder-generated authentication data (collected by the merchant) resulting from all SecureCode fully authenticated transactions, data for Visa or American Express transactions associated with the 3-D Secure Electronic Commerce Verification Service (if collected), or the static AAV assigned by MasterCard for Maestro or MasterCard Advance Registration Program, Maestro Recurring Payments Program, or MasterCard Utility Payment Program
   * @return universalCardholderAuthenticationFieldUcaf
  **/
  @javax.annotation.Nullable
  public String getUniversalCardholderAuthenticationFieldUcaf() {
    return universalCardholderAuthenticationFieldUcaf;
  }


  public void setUniversalCardholderAuthenticationFieldUcaf(String universalCardholderAuthenticationFieldUcaf) {
    this.universalCardholderAuthenticationFieldUcaf = universalCardholderAuthenticationFieldUcaf;
  }


  public AuthorizationDetail vcnProductCode(String vcnProductCode) {
    
    this.vcnProductCode = vcnProductCode;
    return this;
  }

   /**
   * The product code associated with the virtual card number VCN
   * @return vcnProductCode
  **/
  @javax.annotation.Nullable
  public String getVcnProductCode() {
    return vcnProductCode;
  }


  public void setVcnProductCode(String vcnProductCode) {
    this.vcnProductCode = vcnProductCode;
  }


  public AuthorizationDetail walletIdentifier(String walletIdentifier) {
    
    this.walletIdentifier = walletIdentifier;
    return this;
  }

   /**
   * Provides information about transactions initiated through the use of a digital wallet
   * @return walletIdentifier
  **/
  @javax.annotation.Nullable
  public String getWalletIdentifier() {
    return walletIdentifier;
  }


  public void setWalletIdentifier(String walletIdentifier) {
    this.walletIdentifier = walletIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationDetail authorizationDetail = (AuthorizationDetail) o;
    return Objects.equals(this.accountNumber, authorizationDetail.accountNumber) &&
        Objects.equals(this.accountNumberIndicator, authorizationDetail.accountNumberIndicator) &&
        Objects.equals(this.acquirer, authorizationDetail.acquirer) &&
        Objects.equals(this.acquiringInstitutionCountryCode, authorizationDetail.acquiringInstitutionCountryCode) &&
        Objects.equals(this.acquiringInstitutionId, authorizationDetail.acquiringInstitutionId) &&
        Objects.equals(this.addressVerificationServiceResponse, authorizationDetail.addressVerificationServiceResponse) &&
        Objects.equals(this.adviceReasonCode, authorizationDetail.adviceReasonCode) &&
        Objects.equals(this.atcDiscrepancyIndicator, authorizationDetail.atcDiscrepancyIndicator) &&
        Objects.equals(this.atcDiscrepancyValue, authorizationDetail.atcDiscrepancyValue) &&
        Objects.equals(this.atcValue, authorizationDetail.atcValue) &&
        Objects.equals(this.authenticationIndicator, authorizationDetail.authenticationIndicator) &&
        Objects.equals(this.authorizationIdResponse, authorizationDetail.authorizationIdResponse) &&
        Objects.equals(this.banknetDate, authorizationDetail.banknetDate) &&
        Objects.equals(this.banknetReferenceNumber, authorizationDetail.banknetReferenceNumber) &&
        Objects.equals(this.billingCurrencyCode, authorizationDetail.billingCurrencyCode) &&
        Objects.equals(this.cardAcceptorCity, authorizationDetail.cardAcceptorCity) &&
        Objects.equals(this.cardAcceptorId, authorizationDetail.cardAcceptorId) &&
        Objects.equals(this.cardAcceptorName, authorizationDetail.cardAcceptorName) &&
        Objects.equals(this.cardAcceptorState, authorizationDetail.cardAcceptorState) &&
        Objects.equals(this.cardAcceptorTerminalId, authorizationDetail.cardAcceptorTerminalId) &&
        Objects.equals(this.cardholderActivatedTerminalLevel, authorizationDetail.cardholderActivatedTerminalLevel) &&
        Objects.equals(this.cardholderBillingActualAmount, authorizationDetail.cardholderBillingActualAmount) &&
        Objects.equals(this.cardholderBillingAmount, authorizationDetail.cardholderBillingAmount) &&
        Objects.equals(this.cardAuthenticationMethodValidationCode, authorizationDetail.cardAuthenticationMethodValidationCode) &&
        Objects.equals(this.conversionDate, authorizationDetail.conversionDate) &&
        Objects.equals(this.conversionRate, authorizationDetail.conversionRate) &&
        Objects.equals(this.electronicCommerceIndicators, authorizationDetail.electronicCommerceIndicators) &&
        Objects.equals(this.electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator, authorizationDetail.electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) &&
        Objects.equals(this.expirationDatePresenceInd, authorizationDetail.expirationDatePresenceInd) &&
        Objects.equals(this.finalAuthorizationIndicator, authorizationDetail.finalAuthorizationIndicator) &&
        Objects.equals(this.financialNetworkCode, authorizationDetail.financialNetworkCode) &&
        Objects.equals(this.forwardingInstitutionId, authorizationDetail.forwardingInstitutionId) &&
        Objects.equals(this.infData, authorizationDetail.infData) &&
        Objects.equals(this.integratedCircuitCardRelatedData, authorizationDetail.integratedCircuitCardRelatedData) &&
        Objects.equals(this.issuer, authorizationDetail.issuer) &&
        Objects.equals(this.mastercardPromotionCode, authorizationDetail.mastercardPromotionCode) &&
        Objects.equals(this.mccMessageId, authorizationDetail.mccMessageId) &&
        Objects.equals(this.merchantAdviceCode, authorizationDetail.merchantAdviceCode) &&
        Objects.equals(this.merchantCategoryCode, authorizationDetail.merchantCategoryCode) &&
        Objects.equals(this.mobilePhoneNumber, authorizationDetail.mobilePhoneNumber) &&
        Objects.equals(this.mobilePhoneServiceProviderName, authorizationDetail.mobilePhoneServiceProviderName) &&
        Objects.equals(this.originalAcquiringInstitutionIdCode, authorizationDetail.originalAcquiringInstitutionIdCode) &&
        Objects.equals(this.originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator, authorizationDetail.originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator) &&
        Objects.equals(this.originalIssuerForwardingInstitutionIdCode, authorizationDetail.originalIssuerForwardingInstitutionIdCode) &&
        Objects.equals(this.originalMessageTypeIdentifier, authorizationDetail.originalMessageTypeIdentifier) &&
        Objects.equals(this.pinServiceCode, authorizationDetail.pinServiceCode) &&
        Objects.equals(this.realTimeSubstantiationIndicator, authorizationDetail.realTimeSubstantiationIndicator) &&
        Objects.equals(this.reasonForUcafCollectionIndicatorDowngrade, authorizationDetail.reasonForUcafCollectionIndicatorDowngrade) &&
        Objects.equals(this.posCardDataTerminalInputCapability, authorizationDetail.posCardDataTerminalInputCapability) &&
        Objects.equals(this.posCardholderPresence, authorizationDetail.posCardholderPresence) &&
        Objects.equals(this.posCardPresence, authorizationDetail.posCardPresence) &&
        Objects.equals(this.posEntryModePan, authorizationDetail.posEntryModePan) &&
        Objects.equals(this.posEntryModePin, authorizationDetail.posEntryModePin) &&
        Objects.equals(this.posTerminalAttendance, authorizationDetail.posTerminalAttendance) &&
        Objects.equals(this.posTerminalLocation, authorizationDetail.posTerminalLocation) &&
        Objects.equals(this.posTransactionStatus, authorizationDetail.posTransactionStatus) &&
        Objects.equals(this.primaryAccountNumber, authorizationDetail.primaryAccountNumber) &&
        Objects.equals(this.primaryAccountNumberAccountRange, authorizationDetail.primaryAccountNumberAccountRange) &&
        Objects.equals(this.privateData, authorizationDetail.privateData) &&
        Objects.equals(this.processingCode, authorizationDetail.processingCode) &&
        Objects.equals(this.recordDataPresenceIndicator, authorizationDetail.recordDataPresenceIndicator) &&
        Objects.equals(this.responseCode, authorizationDetail.responseCode) &&
        Objects.equals(this.retrievalReferenceNumber, authorizationDetail.retrievalReferenceNumber) &&
        Objects.equals(this.settlementActualAmount, authorizationDetail.settlementActualAmount) &&
        Objects.equals(this.settlementDate, authorizationDetail.settlementDate) &&
        Objects.equals(this.stan, authorizationDetail.stan) &&
        Objects.equals(this.storageTechnology, authorizationDetail.storageTechnology) &&
        Objects.equals(this.systemsTraceAuditNumber, authorizationDetail.systemsTraceAuditNumber) &&
        Objects.equals(this.tokenAssuranceLevel, authorizationDetail.tokenAssuranceLevel) &&
        Objects.equals(this.tokenRequestorId, authorizationDetail.tokenRequestorId) &&
        Objects.equals(this.track1, authorizationDetail.track1) &&
        Objects.equals(this.track2, authorizationDetail.track2) &&
        Objects.equals(this.transactionActualAmount, authorizationDetail.transactionActualAmount) &&
        Objects.equals(this.transactionAmountLocal, authorizationDetail.transactionAmountLocal) &&
        Objects.equals(this.transactionCategoryCode, authorizationDetail.transactionCategoryCode) &&
        Objects.equals(this.transactionCurrencyCode, authorizationDetail.transactionCurrencyCode) &&
        Objects.equals(this.transactionType, authorizationDetail.transactionType) &&
        Objects.equals(this.transmissionDateAndTime, authorizationDetail.transmissionDateAndTime) &&
        Objects.equals(this.universalCardholderAuthenticationFieldUcaf, authorizationDetail.universalCardholderAuthenticationFieldUcaf) &&
        Objects.equals(this.vcnProductCode, authorizationDetail.vcnProductCode) &&
        Objects.equals(this.walletIdentifier, authorizationDetail.walletIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, accountNumberIndicator, acquirer, acquiringInstitutionCountryCode, acquiringInstitutionId, addressVerificationServiceResponse, adviceReasonCode, atcDiscrepancyIndicator, atcDiscrepancyValue, atcValue, authenticationIndicator, authorizationIdResponse, banknetDate, banknetReferenceNumber, billingCurrencyCode, cardAcceptorCity, cardAcceptorId, cardAcceptorName, cardAcceptorState, cardAcceptorTerminalId, cardholderActivatedTerminalLevel, cardholderBillingActualAmount, cardholderBillingAmount, cardAuthenticationMethodValidationCode, conversionDate, conversionRate, electronicCommerceIndicators, electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator, expirationDatePresenceInd, finalAuthorizationIndicator, financialNetworkCode, forwardingInstitutionId, infData, integratedCircuitCardRelatedData, issuer, mastercardPromotionCode, mccMessageId, merchantAdviceCode, merchantCategoryCode, mobilePhoneNumber, mobilePhoneServiceProviderName, originalAcquiringInstitutionIdCode, originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator, originalIssuerForwardingInstitutionIdCode, originalMessageTypeIdentifier, pinServiceCode, realTimeSubstantiationIndicator, reasonForUcafCollectionIndicatorDowngrade, posCardDataTerminalInputCapability, posCardholderPresence, posCardPresence, posEntryModePan, posEntryModePin, posTerminalAttendance, posTerminalLocation, posTransactionStatus, primaryAccountNumber, primaryAccountNumberAccountRange, privateData, processingCode, recordDataPresenceIndicator, responseCode, retrievalReferenceNumber, settlementActualAmount, settlementDate, stan, storageTechnology, systemsTraceAuditNumber, tokenAssuranceLevel, tokenRequestorId, track1, track2, transactionActualAmount, transactionAmountLocal, transactionCategoryCode, transactionCurrencyCode, transactionType, transmissionDateAndTime, universalCardholderAuthenticationFieldUcaf, vcnProductCode, walletIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationDetail {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountNumberIndicator: ").append(toIndentedString(accountNumberIndicator)).append("\n");
    sb.append("    acquirer: ").append(toIndentedString(acquirer)).append("\n");
    sb.append("    acquiringInstitutionCountryCode: ").append(toIndentedString(acquiringInstitutionCountryCode)).append("\n");
    sb.append("    acquiringInstitutionId: ").append(toIndentedString(acquiringInstitutionId)).append("\n");
    sb.append("    addressVerificationServiceResponse: ").append(toIndentedString(addressVerificationServiceResponse)).append("\n");
    sb.append("    adviceReasonCode: ").append(toIndentedString(adviceReasonCode)).append("\n");
    sb.append("    atcDiscrepancyIndicator: ").append(toIndentedString(atcDiscrepancyIndicator)).append("\n");
    sb.append("    atcDiscrepancyValue: ").append(toIndentedString(atcDiscrepancyValue)).append("\n");
    sb.append("    atcValue: ").append(toIndentedString(atcValue)).append("\n");
    sb.append("    authenticationIndicator: ").append(toIndentedString(authenticationIndicator)).append("\n");
    sb.append("    authorizationIdResponse: ").append(toIndentedString(authorizationIdResponse)).append("\n");
    sb.append("    banknetDate: ").append(toIndentedString(banknetDate)).append("\n");
    sb.append("    banknetReferenceNumber: ").append(toIndentedString(banknetReferenceNumber)).append("\n");
    sb.append("    billingCurrencyCode: ").append(toIndentedString(billingCurrencyCode)).append("\n");
    sb.append("    cardAcceptorCity: ").append(toIndentedString(cardAcceptorCity)).append("\n");
    sb.append("    cardAcceptorId: ").append(toIndentedString(cardAcceptorId)).append("\n");
    sb.append("    cardAcceptorName: ").append(toIndentedString(cardAcceptorName)).append("\n");
    sb.append("    cardAcceptorState: ").append(toIndentedString(cardAcceptorState)).append("\n");
    sb.append("    cardAcceptorTerminalId: ").append(toIndentedString(cardAcceptorTerminalId)).append("\n");
    sb.append("    cardholderActivatedTerminalLevel: ").append(toIndentedString(cardholderActivatedTerminalLevel)).append("\n");
    sb.append("    cardholderBillingActualAmount: ").append(toIndentedString(cardholderBillingActualAmount)).append("\n");
    sb.append("    cardholderBillingAmount: ").append(toIndentedString(cardholderBillingAmount)).append("\n");
    sb.append("    cardAuthenticationMethodValidationCode: ").append(toIndentedString(cardAuthenticationMethodValidationCode)).append("\n");
    sb.append("    conversionDate: ").append(toIndentedString(conversionDate)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    electronicCommerceIndicators: ").append(toIndentedString(electronicCommerceIndicators)).append("\n");
    sb.append("    electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator: ").append(toIndentedString(electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator)).append("\n");
    sb.append("    expirationDatePresenceInd: ").append(toIndentedString(expirationDatePresenceInd)).append("\n");
    sb.append("    finalAuthorizationIndicator: ").append(toIndentedString(finalAuthorizationIndicator)).append("\n");
    sb.append("    financialNetworkCode: ").append(toIndentedString(financialNetworkCode)).append("\n");
    sb.append("    forwardingInstitutionId: ").append(toIndentedString(forwardingInstitutionId)).append("\n");
    sb.append("    infData: ").append(toIndentedString(infData)).append("\n");
    sb.append("    integratedCircuitCardRelatedData: ").append(toIndentedString(integratedCircuitCardRelatedData)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    mastercardPromotionCode: ").append(toIndentedString(mastercardPromotionCode)).append("\n");
    sb.append("    mccMessageId: ").append(toIndentedString(mccMessageId)).append("\n");
    sb.append("    merchantAdviceCode: ").append(toIndentedString(merchantAdviceCode)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    mobilePhoneNumber: ").append(toIndentedString(mobilePhoneNumber)).append("\n");
    sb.append("    mobilePhoneServiceProviderName: ").append(toIndentedString(mobilePhoneServiceProviderName)).append("\n");
    sb.append("    originalAcquiringInstitutionIdCode: ").append(toIndentedString(originalAcquiringInstitutionIdCode)).append("\n");
    sb.append("    originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator: ").append(toIndentedString(originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator)).append("\n");
    sb.append("    originalIssuerForwardingInstitutionIdCode: ").append(toIndentedString(originalIssuerForwardingInstitutionIdCode)).append("\n");
    sb.append("    originalMessageTypeIdentifier: ").append(toIndentedString(originalMessageTypeIdentifier)).append("\n");
    sb.append("    pinServiceCode: ").append(toIndentedString(pinServiceCode)).append("\n");
    sb.append("    realTimeSubstantiationIndicator: ").append(toIndentedString(realTimeSubstantiationIndicator)).append("\n");
    sb.append("    reasonForUcafCollectionIndicatorDowngrade: ").append(toIndentedString(reasonForUcafCollectionIndicatorDowngrade)).append("\n");
    sb.append("    posCardDataTerminalInputCapability: ").append(toIndentedString(posCardDataTerminalInputCapability)).append("\n");
    sb.append("    posCardholderPresence: ").append(toIndentedString(posCardholderPresence)).append("\n");
    sb.append("    posCardPresence: ").append(toIndentedString(posCardPresence)).append("\n");
    sb.append("    posEntryModePan: ").append(toIndentedString(posEntryModePan)).append("\n");
    sb.append("    posEntryModePin: ").append(toIndentedString(posEntryModePin)).append("\n");
    sb.append("    posTerminalAttendance: ").append(toIndentedString(posTerminalAttendance)).append("\n");
    sb.append("    posTerminalLocation: ").append(toIndentedString(posTerminalLocation)).append("\n");
    sb.append("    posTransactionStatus: ").append(toIndentedString(posTransactionStatus)).append("\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    primaryAccountNumberAccountRange: ").append(toIndentedString(primaryAccountNumberAccountRange)).append("\n");
    sb.append("    privateData: ").append(toIndentedString(privateData)).append("\n");
    sb.append("    processingCode: ").append(toIndentedString(processingCode)).append("\n");
    sb.append("    recordDataPresenceIndicator: ").append(toIndentedString(recordDataPresenceIndicator)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    retrievalReferenceNumber: ").append(toIndentedString(retrievalReferenceNumber)).append("\n");
    sb.append("    settlementActualAmount: ").append(toIndentedString(settlementActualAmount)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    stan: ").append(toIndentedString(stan)).append("\n");
    sb.append("    storageTechnology: ").append(toIndentedString(storageTechnology)).append("\n");
    sb.append("    systemsTraceAuditNumber: ").append(toIndentedString(systemsTraceAuditNumber)).append("\n");
    sb.append("    tokenAssuranceLevel: ").append(toIndentedString(tokenAssuranceLevel)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    track1: ").append(toIndentedString(track1)).append("\n");
    sb.append("    track2: ").append(toIndentedString(track2)).append("\n");
    sb.append("    transactionActualAmount: ").append(toIndentedString(transactionActualAmount)).append("\n");
    sb.append("    transactionAmountLocal: ").append(toIndentedString(transactionAmountLocal)).append("\n");
    sb.append("    transactionCategoryCode: ").append(toIndentedString(transactionCategoryCode)).append("\n");
    sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transmissionDateAndTime: ").append(toIndentedString(transmissionDateAndTime)).append("\n");
    sb.append("    universalCardholderAuthenticationFieldUcaf: ").append(toIndentedString(universalCardholderAuthenticationFieldUcaf)).append("\n");
    sb.append("    vcnProductCode: ").append(toIndentedString(vcnProductCode)).append("\n");
    sb.append("    walletIdentifier: ").append(toIndentedString(walletIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("accountNumberIndicator");
    openapiFields.add("acquirer");
    openapiFields.add("acquiringInstitutionCountryCode");
    openapiFields.add("acquiringInstitutionId");
    openapiFields.add("addressVerificationServiceResponse");
    openapiFields.add("adviceReasonCode");
    openapiFields.add("atcDiscrepancyIndicator");
    openapiFields.add("atcDiscrepancyValue");
    openapiFields.add("atcValue");
    openapiFields.add("authenticationIndicator");
    openapiFields.add("authorizationIdResponse");
    openapiFields.add("banknetDate");
    openapiFields.add("banknetReferenceNumber");
    openapiFields.add("billingCurrencyCode");
    openapiFields.add("cardAcceptorCity");
    openapiFields.add("cardAcceptorId");
    openapiFields.add("cardAcceptorName");
    openapiFields.add("cardAcceptorState");
    openapiFields.add("cardAcceptorTerminalId");
    openapiFields.add("cardholderActivatedTerminalLevel");
    openapiFields.add("cardholderBillingActualAmount");
    openapiFields.add("cardholderBillingAmount");
    openapiFields.add("cardAuthenticationMethodValidationCode");
    openapiFields.add("conversionDate");
    openapiFields.add("conversionRate");
    openapiFields.add("electronicCommerceIndicators");
    openapiFields.add("electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator");
    openapiFields.add("expirationDatePresenceInd");
    openapiFields.add("finalAuthorizationIndicator");
    openapiFields.add("financialNetworkCode");
    openapiFields.add("forwardingInstitutionId");
    openapiFields.add("infData");
    openapiFields.add("integratedCircuitCardRelatedData");
    openapiFields.add("issuer");
    openapiFields.add("mastercardPromotionCode");
    openapiFields.add("mccMessageId");
    openapiFields.add("merchantAdviceCode");
    openapiFields.add("merchantCategoryCode");
    openapiFields.add("mobilePhoneNumber");
    openapiFields.add("mobilePhoneServiceProviderName");
    openapiFields.add("originalAcquiringInstitutionIdCode");
    openapiFields.add("originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator");
    openapiFields.add("originalIssuerForwardingInstitutionIdCode");
    openapiFields.add("originalMessageTypeIdentifier");
    openapiFields.add("pinServiceCode");
    openapiFields.add("realTimeSubstantiationIndicator");
    openapiFields.add("reasonForUcafCollectionIndicatorDowngrade");
    openapiFields.add("posCardDataTerminalInputCapability");
    openapiFields.add("posCardholderPresence");
    openapiFields.add("posCardPresence");
    openapiFields.add("posEntryModePan");
    openapiFields.add("posEntryModePin");
    openapiFields.add("posTerminalAttendance");
    openapiFields.add("posTerminalLocation");
    openapiFields.add("posTransactionStatus");
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("primaryAccountNumberAccountRange");
    openapiFields.add("privateData");
    openapiFields.add("processingCode");
    openapiFields.add("recordDataPresenceIndicator");
    openapiFields.add("responseCode");
    openapiFields.add("retrievalReferenceNumber");
    openapiFields.add("settlementActualAmount");
    openapiFields.add("settlementDate");
    openapiFields.add("stan");
    openapiFields.add("storageTechnology");
    openapiFields.add("systemsTraceAuditNumber");
    openapiFields.add("tokenAssuranceLevel");
    openapiFields.add("tokenRequestorId");
    openapiFields.add("track1");
    openapiFields.add("track2");
    openapiFields.add("transactionActualAmount");
    openapiFields.add("transactionAmountLocal");
    openapiFields.add("transactionCategoryCode");
    openapiFields.add("transactionCurrencyCode");
    openapiFields.add("transactionType");
    openapiFields.add("transmissionDateAndTime");
    openapiFields.add("universalCardholderAuthenticationFieldUcaf");
    openapiFields.add("vcnProductCode");
    openapiFields.add("walletIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthorizationDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationDetail is not found in the empty JSON string", AuthorizationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("accountNumberIndicator") != null && !jsonObj.get("accountNumberIndicator").isJsonNull()) && !jsonObj.get("accountNumberIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumberIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumberIndicator").toString()));
      }
      if ((jsonObj.get("acquirer") != null && !jsonObj.get("acquirer").isJsonNull()) && !jsonObj.get("acquirer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirer").toString()));
      }
      if ((jsonObj.get("acquiringInstitutionCountryCode") != null && !jsonObj.get("acquiringInstitutionCountryCode").isJsonNull()) && !jsonObj.get("acquiringInstitutionCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiringInstitutionCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiringInstitutionCountryCode").toString()));
      }
      if ((jsonObj.get("acquiringInstitutionId") != null && !jsonObj.get("acquiringInstitutionId").isJsonNull()) && !jsonObj.get("acquiringInstitutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiringInstitutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiringInstitutionId").toString()));
      }
      if ((jsonObj.get("addressVerificationServiceResponse") != null && !jsonObj.get("addressVerificationServiceResponse").isJsonNull()) && !jsonObj.get("addressVerificationServiceResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressVerificationServiceResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressVerificationServiceResponse").toString()));
      }
      if ((jsonObj.get("adviceReasonCode") != null && !jsonObj.get("adviceReasonCode").isJsonNull()) && !jsonObj.get("adviceReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adviceReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adviceReasonCode").toString()));
      }
      if ((jsonObj.get("atcDiscrepancyIndicator") != null && !jsonObj.get("atcDiscrepancyIndicator").isJsonNull()) && !jsonObj.get("atcDiscrepancyIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atcDiscrepancyIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atcDiscrepancyIndicator").toString()));
      }
      if ((jsonObj.get("atcDiscrepancyValue") != null && !jsonObj.get("atcDiscrepancyValue").isJsonNull()) && !jsonObj.get("atcDiscrepancyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atcDiscrepancyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atcDiscrepancyValue").toString()));
      }
      if ((jsonObj.get("atcValue") != null && !jsonObj.get("atcValue").isJsonNull()) && !jsonObj.get("atcValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atcValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atcValue").toString()));
      }
      if ((jsonObj.get("authenticationIndicator") != null && !jsonObj.get("authenticationIndicator").isJsonNull()) && !jsonObj.get("authenticationIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationIndicator").toString()));
      }
      if ((jsonObj.get("authorizationIdResponse") != null && !jsonObj.get("authorizationIdResponse").isJsonNull()) && !jsonObj.get("authorizationIdResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationIdResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationIdResponse").toString()));
      }
      if ((jsonObj.get("banknetDate") != null && !jsonObj.get("banknetDate").isJsonNull()) && !jsonObj.get("banknetDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `banknetDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("banknetDate").toString()));
      }
      if ((jsonObj.get("banknetReferenceNumber") != null && !jsonObj.get("banknetReferenceNumber").isJsonNull()) && !jsonObj.get("banknetReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `banknetReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("banknetReferenceNumber").toString()));
      }
      if ((jsonObj.get("billingCurrencyCode") != null && !jsonObj.get("billingCurrencyCode").isJsonNull()) && !jsonObj.get("billingCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingCurrencyCode").toString()));
      }
      if ((jsonObj.get("cardAcceptorCity") != null && !jsonObj.get("cardAcceptorCity").isJsonNull()) && !jsonObj.get("cardAcceptorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorCity").toString()));
      }
      if ((jsonObj.get("cardAcceptorId") != null && !jsonObj.get("cardAcceptorId").isJsonNull()) && !jsonObj.get("cardAcceptorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorId").toString()));
      }
      if ((jsonObj.get("cardAcceptorName") != null && !jsonObj.get("cardAcceptorName").isJsonNull()) && !jsonObj.get("cardAcceptorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorName").toString()));
      }
      if ((jsonObj.get("cardAcceptorState") != null && !jsonObj.get("cardAcceptorState").isJsonNull()) && !jsonObj.get("cardAcceptorState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorState").toString()));
      }
      if ((jsonObj.get("cardAcceptorTerminalId") != null && !jsonObj.get("cardAcceptorTerminalId").isJsonNull()) && !jsonObj.get("cardAcceptorTerminalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorTerminalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorTerminalId").toString()));
      }
      if ((jsonObj.get("cardholderActivatedTerminalLevel") != null && !jsonObj.get("cardholderActivatedTerminalLevel").isJsonNull()) && !jsonObj.get("cardholderActivatedTerminalLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderActivatedTerminalLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderActivatedTerminalLevel").toString()));
      }
      if ((jsonObj.get("cardholderBillingActualAmount") != null && !jsonObj.get("cardholderBillingActualAmount").isJsonNull()) && !jsonObj.get("cardholderBillingActualAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderBillingActualAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderBillingActualAmount").toString()));
      }
      if ((jsonObj.get("cardholderBillingAmount") != null && !jsonObj.get("cardholderBillingAmount").isJsonNull()) && !jsonObj.get("cardholderBillingAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderBillingAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderBillingAmount").toString()));
      }
      if ((jsonObj.get("cardAuthenticationMethodValidationCode") != null && !jsonObj.get("cardAuthenticationMethodValidationCode").isJsonNull()) && !jsonObj.get("cardAuthenticationMethodValidationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAuthenticationMethodValidationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAuthenticationMethodValidationCode").toString()));
      }
      if ((jsonObj.get("conversionDate") != null && !jsonObj.get("conversionDate").isJsonNull()) && !jsonObj.get("conversionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionDate").toString()));
      }
      if ((jsonObj.get("conversionRate") != null && !jsonObj.get("conversionRate").isJsonNull()) && !jsonObj.get("conversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionRate").toString()));
      }
      if ((jsonObj.get("electronicCommerceIndicators") != null && !jsonObj.get("electronicCommerceIndicators").isJsonNull()) && !jsonObj.get("electronicCommerceIndicators").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicCommerceIndicators` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicCommerceIndicators").toString()));
      }
      if ((jsonObj.get("electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator") != null && !jsonObj.get("electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").isJsonNull()) && !jsonObj.get("electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").toString()));
      }
      if ((jsonObj.get("expirationDatePresenceInd") != null && !jsonObj.get("expirationDatePresenceInd").isJsonNull()) && !jsonObj.get("expirationDatePresenceInd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDatePresenceInd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDatePresenceInd").toString()));
      }
      if ((jsonObj.get("finalAuthorizationIndicator") != null && !jsonObj.get("finalAuthorizationIndicator").isJsonNull()) && !jsonObj.get("finalAuthorizationIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalAuthorizationIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalAuthorizationIndicator").toString()));
      }
      if ((jsonObj.get("financialNetworkCode") != null && !jsonObj.get("financialNetworkCode").isJsonNull()) && !jsonObj.get("financialNetworkCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialNetworkCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financialNetworkCode").toString()));
      }
      if ((jsonObj.get("forwardingInstitutionId") != null && !jsonObj.get("forwardingInstitutionId").isJsonNull()) && !jsonObj.get("forwardingInstitutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardingInstitutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardingInstitutionId").toString()));
      }
      if ((jsonObj.get("infData") != null && !jsonObj.get("infData").isJsonNull()) && !jsonObj.get("infData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infData").toString()));
      }
      if ((jsonObj.get("integratedCircuitCardRelatedData") != null && !jsonObj.get("integratedCircuitCardRelatedData").isJsonNull()) && !jsonObj.get("integratedCircuitCardRelatedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integratedCircuitCardRelatedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integratedCircuitCardRelatedData").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("mastercardPromotionCode") != null && !jsonObj.get("mastercardPromotionCode").isJsonNull()) && !jsonObj.get("mastercardPromotionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercardPromotionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercardPromotionCode").toString()));
      }
      if ((jsonObj.get("mccMessageId") != null && !jsonObj.get("mccMessageId").isJsonNull()) && !jsonObj.get("mccMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mccMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mccMessageId").toString()));
      }
      if ((jsonObj.get("merchantAdviceCode") != null && !jsonObj.get("merchantAdviceCode").isJsonNull()) && !jsonObj.get("merchantAdviceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAdviceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAdviceCode").toString()));
      }
      if ((jsonObj.get("merchantCategoryCode") != null && !jsonObj.get("merchantCategoryCode").isJsonNull()) && !jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
      if ((jsonObj.get("mobilePhoneNumber") != null && !jsonObj.get("mobilePhoneNumber").isJsonNull()) && !jsonObj.get("mobilePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneNumber").toString()));
      }
      if ((jsonObj.get("mobilePhoneServiceProviderName") != null && !jsonObj.get("mobilePhoneServiceProviderName").isJsonNull()) && !jsonObj.get("mobilePhoneServiceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneServiceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneServiceProviderName").toString()));
      }
      if ((jsonObj.get("originalAcquiringInstitutionIdCode") != null && !jsonObj.get("originalAcquiringInstitutionIdCode").isJsonNull()) && !jsonObj.get("originalAcquiringInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalAcquiringInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalAcquiringInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator") != null && !jsonObj.get("originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").isJsonNull()) && !jsonObj.get("originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalElectronicCommerceSecurityLevelIndicatorAndUcafCollectionIndicator").toString()));
      }
      if ((jsonObj.get("originalIssuerForwardingInstitutionIdCode") != null && !jsonObj.get("originalIssuerForwardingInstitutionIdCode").isJsonNull()) && !jsonObj.get("originalIssuerForwardingInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalIssuerForwardingInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalIssuerForwardingInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("originalMessageTypeIdentifier") != null && !jsonObj.get("originalMessageTypeIdentifier").isJsonNull()) && !jsonObj.get("originalMessageTypeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalMessageTypeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalMessageTypeIdentifier").toString()));
      }
      if ((jsonObj.get("pinServiceCode") != null && !jsonObj.get("pinServiceCode").isJsonNull()) && !jsonObj.get("pinServiceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinServiceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinServiceCode").toString()));
      }
      if ((jsonObj.get("realTimeSubstantiationIndicator") != null && !jsonObj.get("realTimeSubstantiationIndicator").isJsonNull()) && !jsonObj.get("realTimeSubstantiationIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realTimeSubstantiationIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realTimeSubstantiationIndicator").toString()));
      }
      if ((jsonObj.get("reasonForUcafCollectionIndicatorDowngrade") != null && !jsonObj.get("reasonForUcafCollectionIndicatorDowngrade").isJsonNull()) && !jsonObj.get("reasonForUcafCollectionIndicatorDowngrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForUcafCollectionIndicatorDowngrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForUcafCollectionIndicatorDowngrade").toString()));
      }
      if ((jsonObj.get("posCardDataTerminalInputCapability") != null && !jsonObj.get("posCardDataTerminalInputCapability").isJsonNull()) && !jsonObj.get("posCardDataTerminalInputCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCardDataTerminalInputCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCardDataTerminalInputCapability").toString()));
      }
      if ((jsonObj.get("posCardholderPresence") != null && !jsonObj.get("posCardholderPresence").isJsonNull()) && !jsonObj.get("posCardholderPresence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCardholderPresence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCardholderPresence").toString()));
      }
      if ((jsonObj.get("posCardPresence") != null && !jsonObj.get("posCardPresence").isJsonNull()) && !jsonObj.get("posCardPresence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posCardPresence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posCardPresence").toString()));
      }
      if ((jsonObj.get("posEntryModePan") != null && !jsonObj.get("posEntryModePan").isJsonNull()) && !jsonObj.get("posEntryModePan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posEntryModePan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posEntryModePan").toString()));
      }
      if ((jsonObj.get("posEntryModePin") != null && !jsonObj.get("posEntryModePin").isJsonNull()) && !jsonObj.get("posEntryModePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posEntryModePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posEntryModePin").toString()));
      }
      if ((jsonObj.get("posTerminalAttendance") != null && !jsonObj.get("posTerminalAttendance").isJsonNull()) && !jsonObj.get("posTerminalAttendance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posTerminalAttendance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posTerminalAttendance").toString()));
      }
      if ((jsonObj.get("posTerminalLocation") != null && !jsonObj.get("posTerminalLocation").isJsonNull()) && !jsonObj.get("posTerminalLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posTerminalLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posTerminalLocation").toString()));
      }
      if ((jsonObj.get("posTransactionStatus") != null && !jsonObj.get("posTransactionStatus").isJsonNull()) && !jsonObj.get("posTransactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posTransactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posTransactionStatus").toString()));
      }
      if ((jsonObj.get("primaryAccountNumber") != null && !jsonObj.get("primaryAccountNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if ((jsonObj.get("primaryAccountNumberAccountRange") != null && !jsonObj.get("primaryAccountNumberAccountRange").isJsonNull()) && !jsonObj.get("primaryAccountNumberAccountRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumberAccountRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumberAccountRange").toString()));
      }
      if ((jsonObj.get("privateData") != null && !jsonObj.get("privateData").isJsonNull()) && !jsonObj.get("privateData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateData").toString()));
      }
      if ((jsonObj.get("processingCode") != null && !jsonObj.get("processingCode").isJsonNull()) && !jsonObj.get("processingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingCode").toString()));
      }
      if ((jsonObj.get("recordDataPresenceIndicator") != null && !jsonObj.get("recordDataPresenceIndicator").isJsonNull()) && !jsonObj.get("recordDataPresenceIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordDataPresenceIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordDataPresenceIndicator").toString()));
      }
      if ((jsonObj.get("responseCode") != null && !jsonObj.get("responseCode").isJsonNull()) && !jsonObj.get("responseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCode").toString()));
      }
      if ((jsonObj.get("retrievalReferenceNumber") != null && !jsonObj.get("retrievalReferenceNumber").isJsonNull()) && !jsonObj.get("retrievalReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrievalReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrievalReferenceNumber").toString()));
      }
      if ((jsonObj.get("settlementActualAmount") != null && !jsonObj.get("settlementActualAmount").isJsonNull()) && !jsonObj.get("settlementActualAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementActualAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementActualAmount").toString()));
      }
      if ((jsonObj.get("settlementDate") != null && !jsonObj.get("settlementDate").isJsonNull()) && !jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if ((jsonObj.get("stan") != null && !jsonObj.get("stan").isJsonNull()) && !jsonObj.get("stan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stan").toString()));
      }
      if ((jsonObj.get("storageTechnology") != null && !jsonObj.get("storageTechnology").isJsonNull()) && !jsonObj.get("storageTechnology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageTechnology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageTechnology").toString()));
      }
      if ((jsonObj.get("systemsTraceAuditNumber") != null && !jsonObj.get("systemsTraceAuditNumber").isJsonNull()) && !jsonObj.get("systemsTraceAuditNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemsTraceAuditNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemsTraceAuditNumber").toString()));
      }
      if ((jsonObj.get("tokenAssuranceLevel") != null && !jsonObj.get("tokenAssuranceLevel").isJsonNull()) && !jsonObj.get("tokenAssuranceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenAssuranceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenAssuranceLevel").toString()));
      }
      if ((jsonObj.get("tokenRequestorId") != null && !jsonObj.get("tokenRequestorId").isJsonNull()) && !jsonObj.get("tokenRequestorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenRequestorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenRequestorId").toString()));
      }
      if ((jsonObj.get("track1") != null && !jsonObj.get("track1").isJsonNull()) && !jsonObj.get("track1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track1").toString()));
      }
      if ((jsonObj.get("track2") != null && !jsonObj.get("track2").isJsonNull()) && !jsonObj.get("track2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track2").toString()));
      }
      if ((jsonObj.get("transactionActualAmount") != null && !jsonObj.get("transactionActualAmount").isJsonNull()) && !jsonObj.get("transactionActualAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionActualAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionActualAmount").toString()));
      }
      if ((jsonObj.get("transactionAmountLocal") != null && !jsonObj.get("transactionAmountLocal").isJsonNull()) && !jsonObj.get("transactionAmountLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionAmountLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionAmountLocal").toString()));
      }
      if ((jsonObj.get("transactionCategoryCode") != null && !jsonObj.get("transactionCategoryCode").isJsonNull()) && !jsonObj.get("transactionCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCategoryCode").toString()));
      }
      if ((jsonObj.get("transactionCurrencyCode") != null && !jsonObj.get("transactionCurrencyCode").isJsonNull()) && !jsonObj.get("transactionCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrencyCode").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if ((jsonObj.get("transmissionDateAndTime") != null && !jsonObj.get("transmissionDateAndTime").isJsonNull()) && !jsonObj.get("transmissionDateAndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmissionDateAndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmissionDateAndTime").toString()));
      }
      if ((jsonObj.get("universalCardholderAuthenticationFieldUcaf") != null && !jsonObj.get("universalCardholderAuthenticationFieldUcaf").isJsonNull()) && !jsonObj.get("universalCardholderAuthenticationFieldUcaf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `universalCardholderAuthenticationFieldUcaf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("universalCardholderAuthenticationFieldUcaf").toString()));
      }
      if ((jsonObj.get("vcnProductCode") != null && !jsonObj.get("vcnProductCode").isJsonNull()) && !jsonObj.get("vcnProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcnProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcnProductCode").toString()));
      }
      if ((jsonObj.get("walletIdentifier") != null && !jsonObj.get("walletIdentifier").isJsonNull()) && !jsonObj.get("walletIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationDetail>() {
           @Override
           public void write(JsonWriter out, AuthorizationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthorizationDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthorizationDetail
  * @throws IOException if the JSON string is invalid with respect to AuthorizationDetail
  */
  public static AuthorizationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationDetail.class);
  }

 /**
  * Convert an instance of AuthorizationDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

