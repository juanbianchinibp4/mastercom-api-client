/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bp4.mastercom_api_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import bp4.mastercom_api_client.JSON;

/**
 * CreateRetrievalRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CreateRetrievalRequest {
  /**
   * Retrieval Request Reason Codes.   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)   Length: 1-4   Valid Values/Format: 6343 - IIAS Audit (for healthcare transactions only)
   */
  @JsonAdapter(RetrievalRequestReasonEnum.Adapter.class)
  public enum RetrievalRequestReasonEnum {
    _6343("6343");

    private String value;

    RetrievalRequestReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetrievalRequestReasonEnum fromValue(String value) {
      for (RetrievalRequestReasonEnum b : RetrievalRequestReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetrievalRequestReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetrievalRequestReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetrievalRequestReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetrievalRequestReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETRIEVAL_REQUEST_REASON = "retrievalRequestReason";
  @SerializedName(SERIALIZED_NAME_RETRIEVAL_REQUEST_REASON)
  private RetrievalRequestReasonEnum retrievalRequestReason;

  /**
   * Documentation Needed Indicator.   Length: 1   Valid Values/Format: 2 - Copy or image (photocopy, microfilm, fax) of original document, 4 - Substitute draft
   */
  @JsonAdapter(DocNeededEnum.Adapter.class)
  public enum DocNeededEnum {
    _2("2"),
    
    _4("4");

    private String value;

    DocNeededEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocNeededEnum fromValue(String value) {
      for (DocNeededEnum b : DocNeededEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocNeededEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocNeededEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocNeededEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocNeededEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOC_NEEDED = "docNeeded";
  @SerializedName(SERIALIZED_NAME_DOC_NEEDED)
  private DocNeededEnum docNeeded;

  public static final String SERIALIZED_NAME_INSTRUCTIONS_FOR_HEALTHCARE = "instructionsForHealthcare";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_FOR_HEALTHCARE)
  private String instructionsForHealthcare;

  public CreateRetrievalRequest() {
  }

  public CreateRetrievalRequest retrievalRequestReason(RetrievalRequestReasonEnum retrievalRequestReason) {
    
    this.retrievalRequestReason = retrievalRequestReason;
    return this;
  }

   /**
   * Retrieval Request Reason Codes.   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)   Length: 1-4   Valid Values/Format: 6343 - IIAS Audit (for healthcare transactions only)
   * @return retrievalRequestReason
  **/
  @javax.annotation.Nonnull
  public RetrievalRequestReasonEnum getRetrievalRequestReason() {
    return retrievalRequestReason;
  }


  public void setRetrievalRequestReason(RetrievalRequestReasonEnum retrievalRequestReason) {
    this.retrievalRequestReason = retrievalRequestReason;
  }


  public CreateRetrievalRequest docNeeded(DocNeededEnum docNeeded) {
    
    this.docNeeded = docNeeded;
    return this;
  }

   /**
   * Documentation Needed Indicator.   Length: 1   Valid Values/Format: 2 - Copy or image (photocopy, microfilm, fax) of original document, 4 - Substitute draft
   * @return docNeeded
  **/
  @javax.annotation.Nonnull
  public DocNeededEnum getDocNeeded() {
    return docNeeded;
  }


  public void setDocNeeded(DocNeededEnum docNeeded) {
    this.docNeeded = docNeeded;
  }


  public CreateRetrievalRequest instructionsForHealthcare(String instructionsForHealthcare) {
    
    this.instructionsForHealthcare = instructionsForHealthcare;
    return this;
  }

   /**
   * Instructions for Healthcare.   CONDITIONAL: Required when retrievalRequestReason &#x3D; 6343.   Length: 16-200   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return instructionsForHealthcare
  **/
  @javax.annotation.Nullable
  public String getInstructionsForHealthcare() {
    return instructionsForHealthcare;
  }


  public void setInstructionsForHealthcare(String instructionsForHealthcare) {
    this.instructionsForHealthcare = instructionsForHealthcare;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRetrievalRequest createRetrievalRequest = (CreateRetrievalRequest) o;
    return Objects.equals(this.retrievalRequestReason, createRetrievalRequest.retrievalRequestReason) &&
        Objects.equals(this.docNeeded, createRetrievalRequest.docNeeded) &&
        Objects.equals(this.instructionsForHealthcare, createRetrievalRequest.instructionsForHealthcare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retrievalRequestReason, docNeeded, instructionsForHealthcare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRetrievalRequest {\n");
    sb.append("    retrievalRequestReason: ").append(toIndentedString(retrievalRequestReason)).append("\n");
    sb.append("    docNeeded: ").append(toIndentedString(docNeeded)).append("\n");
    sb.append("    instructionsForHealthcare: ").append(toIndentedString(instructionsForHealthcare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("retrievalRequestReason");
    openapiFields.add("docNeeded");
    openapiFields.add("instructionsForHealthcare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("retrievalRequestReason");
    openapiRequiredFields.add("docNeeded");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateRetrievalRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRetrievalRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRetrievalRequest is not found in the empty JSON string", CreateRetrievalRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRetrievalRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRetrievalRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRetrievalRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("retrievalRequestReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrievalRequestReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrievalRequestReason").toString()));
      }
      if (!jsonObj.get("docNeeded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNeeded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNeeded").toString()));
      }
      if ((jsonObj.get("instructionsForHealthcare") != null && !jsonObj.get("instructionsForHealthcare").isJsonNull()) && !jsonObj.get("instructionsForHealthcare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsForHealthcare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsForHealthcare").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRetrievalRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRetrievalRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRetrievalRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRetrievalRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRetrievalRequest>() {
           @Override
           public void write(JsonWriter out, CreateRetrievalRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRetrievalRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateRetrievalRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateRetrievalRequest
  * @throws IOException if the JSON string is invalid with respect to CreateRetrievalRequest
  */
  public static CreateRetrievalRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRetrievalRequest.class);
  }

 /**
  * Convert an instance of CreateRetrievalRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

