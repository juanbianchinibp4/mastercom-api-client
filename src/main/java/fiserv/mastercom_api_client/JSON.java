/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.model.AcquirerFulfillmentRequest;
import fiserv.mastercom_api_client.model.AcquirerFulfillmentResponse;
import fiserv.mastercom_api_client.model.AuthorizationDetail;
import fiserv.mastercom_api_client.model.AuthorizationSummary;
import fiserv.mastercom_api_client.model.CardholderDisputeChargebackDrfDocumentStructure;
import fiserv.mastercom_api_client.model.CardholderVerificationMethodStructure;
import fiserv.mastercom_api_client.model.CaseFilingClaim;
import fiserv.mastercom_api_client.model.CaseFilingClaimsRequest;
import fiserv.mastercom_api_client.model.CaseFilingClaimsResponse;
import fiserv.mastercom_api_client.model.CaseFilingDetails;
import fiserv.mastercom_api_client.model.CaseFilingEbdfStructure;
import fiserv.mastercom_api_client.model.CaseFilingIdSourceRequest;
import fiserv.mastercom_api_client.model.CaseFilingImageStatusRequest;
import fiserv.mastercom_api_client.model.CaseFilingImageStatusResponse;
import fiserv.mastercom_api_client.model.CaseFilingImageStatusResponseStructure;
import fiserv.mastercom_api_client.model.CaseFilingLifeCycle;
import fiserv.mastercom_api_client.model.CaseFilingRespHistory;
import fiserv.mastercom_api_client.model.CaseFilingResponse;
import fiserv.mastercom_api_client.model.CaseFilingStatusRequest;
import fiserv.mastercom_api_client.model.CaseFilingStatusRequestStructure;
import fiserv.mastercom_api_client.model.CaseFilingStatusResponse;
import fiserv.mastercom_api_client.model.CaseFilingStatusResponseStructure;
import fiserv.mastercom_api_client.model.ChargebackAmountNameValueDetail;
import fiserv.mastercom_api_client.model.ChargebackDetails;
import fiserv.mastercom_api_client.model.ChargebackDocIndicatorsNameValueDetail;
import fiserv.mastercom_api_client.model.ChargebackEbdfStructure;
import fiserv.mastercom_api_client.model.ChargebackImageStatusRequest;
import fiserv.mastercom_api_client.model.ChargebackImageStatusResponse;
import fiserv.mastercom_api_client.model.ChargebackImageStatusResponseStructure;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedRequest;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedRequestStructure;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedResponse;
import fiserv.mastercom_api_client.model.ChargebackMarkProcessedResponseStructure;
import fiserv.mastercom_api_client.model.ChargebackMessageTextsNameValueDetail;
import fiserv.mastercom_api_client.model.ChargebackReasonCodesNameValueDetail;
import fiserv.mastercom_api_client.model.ChargebackResponse;
import fiserv.mastercom_api_client.model.ChargebackStatusRequest;
import fiserv.mastercom_api_client.model.ChargebackStatusRequestStructure;
import fiserv.mastercom_api_client.model.ChargebackStatusResponse;
import fiserv.mastercom_api_client.model.ChargebackStatusResponseStructure;
import fiserv.mastercom_api_client.model.ClaimDetail;
import fiserv.mastercom_api_client.model.ClaimResponse;
import fiserv.mastercom_api_client.model.ClaimSummary;
import fiserv.mastercom_api_client.model.ClearingDetail;
import fiserv.mastercom_api_client.model.ClearingSummary;
import fiserv.mastercom_api_client.model.CreateCaseRequest;
import fiserv.mastercom_api_client.model.CreateChargebackRequest;
import fiserv.mastercom_api_client.model.CreateChargebackSingleRequest;
import fiserv.mastercom_api_client.model.CreateChargebackSingleReversalRequest;
import fiserv.mastercom_api_client.model.CreateClaimRequest;
import fiserv.mastercom_api_client.model.CreateFeeRequest;
import fiserv.mastercom_api_client.model.CreateFeeRequestSingle;
import fiserv.mastercom_api_client.model.CreateFraudMasterCardRequest;
import fiserv.mastercom_api_client.model.CreateRetrievalRequest;
import fiserv.mastercom_api_client.model.CreateRetrievalRequestSingle;
import fiserv.mastercom_api_client.model.CreateRetrievalResponse;
import fiserv.mastercom_api_client.model.CurrenciesNameValueDetail;
import fiserv.mastercom_api_client.model.DocumentResponseStructure;
import fiserv.mastercom_api_client.model.DocumentStructure;
import fiserv.mastercom_api_client.model.DocumentStructureResp;
import fiserv.mastercom_api_client.model.Error;
import fiserv.mastercom_api_client.model.ErrorDetail;
import fiserv.mastercom_api_client.model.Errors;
import fiserv.mastercom_api_client.model.ExpeditedBillingDrfDocumentStructure;
import fiserv.mastercom_api_client.model.FeeCountryCodesNameValueDetail;
import fiserv.mastercom_api_client.model.FeeDetails;
import fiserv.mastercom_api_client.model.FeeMessageTextsNameValueDetail;
import fiserv.mastercom_api_client.model.FeeReasonCodesNameValueDetail;
import fiserv.mastercom_api_client.model.FeeResponse;
import fiserv.mastercom_api_client.model.FeeSingleResponse;
import fiserv.mastercom_api_client.model.FraudAcctDeviceTypesNameValueDetail;
import fiserv.mastercom_api_client.model.FraudAcctStatusesNameValueDetail;
import fiserv.mastercom_api_client.model.FraudCardValidCodesNameValueDetail;
import fiserv.mastercom_api_client.model.FraudDrfDocumentStructure;
import fiserv.mastercom_api_client.model.FraudResponse;
import fiserv.mastercom_api_client.model.FraudSubTypesNameValueDetail;
import fiserv.mastercom_api_client.model.GetQueueContentRequest;
import fiserv.mastercom_api_client.model.HealthCheckResponse;
import fiserv.mastercom_api_client.model.InstallmentParameters;
import fiserv.mastercom_api_client.model.IssuerFulfillmentRequest;
import fiserv.mastercom_api_client.model.LoadDataForChargebackResponse;
import fiserv.mastercom_api_client.model.LoadDataForChargebacksRequest;
import fiserv.mastercom_api_client.model.LoadDataForFeeResponse;
import fiserv.mastercom_api_client.model.LoadDataForFeesRequest;
import fiserv.mastercom_api_client.model.LoadDataForFraudResponse;
import fiserv.mastercom_api_client.model.LoadDataForRetrievalResponse;
import fiserv.mastercom_api_client.model.OriginalInformationInstallments;
import fiserv.mastercom_api_client.model.PointOfInteractionErrorsDrfDocumentStructure;
import fiserv.mastercom_api_client.model.Queue;
import fiserv.mastercom_api_client.model.QueueContentSummary;
import fiserv.mastercom_api_client.model.ReconReportDataAcknowledgeRequest;
import fiserv.mastercom_api_client.model.ReconReportDataAcknowledgeResponse;
import fiserv.mastercom_api_client.model.ReconReportDataRetrivalResponse;
import fiserv.mastercom_api_client.model.RetrievalDocNeededNameValueDetail;
import fiserv.mastercom_api_client.model.RetrievalReasonCodesNameValueDetail;
import fiserv.mastercom_api_client.model.RetrievalResponse;
import fiserv.mastercom_api_client.model.RetrievalStatusRequest;
import fiserv.mastercom_api_client.model.RetrievalStatusRequestStructure;
import fiserv.mastercom_api_client.model.RetrievalStatusResponse;
import fiserv.mastercom_api_client.model.RetrievalStatusResponseStructure;
import fiserv.mastercom_api_client.model.RetrievalSummary;
import fiserv.mastercom_api_client.model.RetrievalsImageStatusRequest;
import fiserv.mastercom_api_client.model.RetrievalsImageStatusResponse;
import fiserv.mastercom_api_client.model.RetrievalsImageStatusResponseStructure;
import fiserv.mastercom_api_client.model.SingleMessageDetail;
import fiserv.mastercom_api_client.model.SingleMessageSummary;
import fiserv.mastercom_api_client.model.SingleMessageSummaryDetails;
import fiserv.mastercom_api_client.model.SmsLinkedCaseFilingDrfDocumentStructure;
import fiserv.mastercom_api_client.model.TransactionInformationEbdfStructure;
import fiserv.mastercom_api_client.model.TransactionSearchRequest;
import fiserv.mastercom_api_client.model.TransactionSingleMessageDetail;
import fiserv.mastercom_api_client.model.TransactionSingleMessageSummary;
import fiserv.mastercom_api_client.model.TransactionSingleMessageSummaryList;
import fiserv.mastercom_api_client.model.TransactionSingleSearchRequest;
import fiserv.mastercom_api_client.model.TransactionSummary;
import fiserv.mastercom_api_client.model.UpdateCaseRequest;
import fiserv.mastercom_api_client.model.UpdateChargebackRequest;
import fiserv.mastercom_api_client.model.UpdateClaimRequest;
import io.gsonfire.GsonFireBuilder;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new AcquirerFulfillmentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new AcquirerFulfillmentResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new AuthorizationDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new AuthorizationSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CardholderDisputeChargebackDrfDocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CardholderVerificationMethodStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingClaim.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingClaimsRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingClaimsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingEbdfStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingIdSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingImageStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingImageStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingImageStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingLifeCycle.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingRespHistory.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingStatusRequestStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CaseFilingStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackAmountNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackDocIndicatorsNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackEbdfStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackImageStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackImageStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackImageStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackMarkProcessedRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackMarkProcessedRequestStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackMarkProcessedResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackMarkProcessedResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackMessageTextsNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackReasonCodesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackStatusRequestStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ChargebackStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ClaimDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ClaimResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ClaimSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ClearingDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ClearingSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateCaseRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateChargebackRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateChargebackSingleRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateChargebackSingleReversalRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateClaimRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateFeeRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateFeeRequestSingle.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateFraudMasterCardRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateRetrievalRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateRetrievalRequestSingle.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CreateRetrievalResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new CurrenciesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new DocumentResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new DocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new DocumentStructureResp.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ErrorDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new Errors.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ExpeditedBillingDrfDocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeCountryCodesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeMessageTextsNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeReasonCodesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FeeSingleResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudAcctDeviceTypesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudAcctStatusesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudCardValidCodesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudDrfDocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new FraudSubTypesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new GetQueueContentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new HealthCheckResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new InstallmentParameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new IssuerFulfillmentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForChargebackResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForChargebacksRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForFeeResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForFeesRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForFraudResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new LoadDataForRetrievalResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new OriginalInformationInstallments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new PointOfInteractionErrorsDrfDocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new Queue.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new QueueContentSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ReconReportDataAcknowledgeRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ReconReportDataAcknowledgeResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new ReconReportDataRetrivalResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalDocNeededNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalReasonCodesNameValueDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalStatusRequestStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalsImageStatusRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalsImageStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new RetrievalsImageStatusResponseStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new SingleMessageDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new SingleMessageSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new SingleMessageSummaryDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new SmsLinkedCaseFilingDrfDocumentStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionInformationEbdfStructure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSearchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSingleMessageDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSingleMessageSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSingleMessageSummaryList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSingleSearchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new TransactionSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new UpdateCaseRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new UpdateChargebackRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new UpdateClaimRequest.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
