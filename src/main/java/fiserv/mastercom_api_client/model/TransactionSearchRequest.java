/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TransactionSearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class TransactionSearchRequest {
  public static final String SERIALIZED_NAME_ACQUIRER_REF_NUMBER = "acquirerRefNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REF_NUMBER)
  private String acquirerRefNumber;

  public static final String SERIALIZED_NAME_BANK_NET_REF_NUMBER = "bankNetRefNumber";
  @SerializedName(SERIALIZED_NAME_BANK_NET_REF_NUMBER)
  private String bankNetRefNumber;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUM = "primaryAccountNum";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUM)
  private String primaryAccountNum;

  public static final String SERIALIZED_NAME_TRANS_AMOUNT_FROM = "transAmountFrom";
  @SerializedName(SERIALIZED_NAME_TRANS_AMOUNT_FROM)
  private String transAmountFrom;

  public static final String SERIALIZED_NAME_TRANS_AMOUNT_TO = "transAmountTo";
  @SerializedName(SERIALIZED_NAME_TRANS_AMOUNT_TO)
  private String transAmountTo;

  public static final String SERIALIZED_NAME_TRAN_START_DATE = "tranStartDate";
  @SerializedName(SERIALIZED_NAME_TRAN_START_DATE)
  private String tranStartDate;

  public static final String SERIALIZED_NAME_TRAN_END_DATE = "tranEndDate";
  @SerializedName(SERIALIZED_NAME_TRAN_END_DATE)
  private String tranEndDate;

  public TransactionSearchRequest() {
  }

  public TransactionSearchRequest acquirerRefNumber(String acquirerRefNumber) {
    
    this.acquirerRefNumber = acquirerRefNumber;
    return this;
  }

   /**
   * CONDITIONAL: Acquirer Reference Number. If provided bankNetRefNumber may not be used. This field is required and applicable if primaryAccountNum is not provided.   Length: 23   Valid Values/Format: Numeric
   * @return acquirerRefNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerRefNumber() {
    return acquirerRefNumber;
  }


  public void setAcquirerRefNumber(String acquirerRefNumber) {
    this.acquirerRefNumber = acquirerRefNumber;
  }


  public TransactionSearchRequest bankNetRefNumber(String bankNetRefNumber) {
    
    this.bankNetRefNumber = bankNetRefNumber;
    return this;
  }

   /**
   * CONDITIONAL: Banknet Reference Number.  If provided acquirerRefNumber may not be used.   Length: 9   Valid Values/Format: Alphanumeric
   * @return bankNetRefNumber
  **/
  @javax.annotation.Nullable
  public String getBankNetRefNumber() {
    return bankNetRefNumber;
  }


  public void setBankNetRefNumber(String bankNetRefNumber) {
    this.bankNetRefNumber = bankNetRefNumber;
  }


  public TransactionSearchRequest primaryAccountNum(String primaryAccountNum) {
    
    this.primaryAccountNum = primaryAccountNum;
    return this;
  }

   /**
   * CONDITIONAL: Primary Account Number. This field is required and applicable if acquirerRefNum is not provided.   Length: 11-19   Valid Values/Format: Numeric
   * @return primaryAccountNum
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNum() {
    return primaryAccountNum;
  }


  public void setPrimaryAccountNum(String primaryAccountNum) {
    this.primaryAccountNum = primaryAccountNum;
  }


  public TransactionSearchRequest transAmountFrom(String transAmountFrom) {
    
    this.transAmountFrom = transAmountFrom;
    return this;
  }

   /**
   * Transaction amount lower limit value to be searched.   Length: 0-12   Valid Values/Format: Numeric
   * @return transAmountFrom
  **/
  @javax.annotation.Nullable
  public String getTransAmountFrom() {
    return transAmountFrom;
  }


  public void setTransAmountFrom(String transAmountFrom) {
    this.transAmountFrom = transAmountFrom;
  }


  public TransactionSearchRequest transAmountTo(String transAmountTo) {
    
    this.transAmountTo = transAmountTo;
    return this;
  }

   /**
   * Transaction amount upper limit value to be searched.   Length: 0-12   Valid Values/Format: Numeric
   * @return transAmountTo
  **/
  @javax.annotation.Nullable
  public String getTransAmountTo() {
    return transAmountTo;
  }


  public void setTransAmountTo(String transAmountTo) {
    this.transAmountTo = transAmountTo;
  }


  public TransactionSearchRequest tranStartDate(String tranStartDate) {
    
    this.tranStartDate = tranStartDate;
    return this;
  }

   /**
   * Transaction Date min search range.  The search range is a maximum of 30 days, and searches can be completed for up to 730 days of history.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return tranStartDate
  **/
  @javax.annotation.Nonnull
  public String getTranStartDate() {
    return tranStartDate;
  }


  public void setTranStartDate(String tranStartDate) {
    this.tranStartDate = tranStartDate;
  }


  public TransactionSearchRequest tranEndDate(String tranEndDate) {
    
    this.tranEndDate = tranEndDate;
    return this;
  }

   /**
   * Transaction Date max search range.  The search range is a maximum of 30 days, and searches can be completed for up to 730 days of history.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return tranEndDate
  **/
  @javax.annotation.Nonnull
  public String getTranEndDate() {
    return tranEndDate;
  }


  public void setTranEndDate(String tranEndDate) {
    this.tranEndDate = tranEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSearchRequest transactionSearchRequest = (TransactionSearchRequest) o;
    return Objects.equals(this.acquirerRefNumber, transactionSearchRequest.acquirerRefNumber) &&
        Objects.equals(this.bankNetRefNumber, transactionSearchRequest.bankNetRefNumber) &&
        Objects.equals(this.primaryAccountNum, transactionSearchRequest.primaryAccountNum) &&
        Objects.equals(this.transAmountFrom, transactionSearchRequest.transAmountFrom) &&
        Objects.equals(this.transAmountTo, transactionSearchRequest.transAmountTo) &&
        Objects.equals(this.tranStartDate, transactionSearchRequest.tranStartDate) &&
        Objects.equals(this.tranEndDate, transactionSearchRequest.tranEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerRefNumber, bankNetRefNumber, primaryAccountNum, transAmountFrom, transAmountTo, tranStartDate, tranEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSearchRequest {\n");
    sb.append("    acquirerRefNumber: ").append(toIndentedString(acquirerRefNumber)).append("\n");
    sb.append("    bankNetRefNumber: ").append(toIndentedString(bankNetRefNumber)).append("\n");
    sb.append("    primaryAccountNum: ").append(toIndentedString(primaryAccountNum)).append("\n");
    sb.append("    transAmountFrom: ").append(toIndentedString(transAmountFrom)).append("\n");
    sb.append("    transAmountTo: ").append(toIndentedString(transAmountTo)).append("\n");
    sb.append("    tranStartDate: ").append(toIndentedString(tranStartDate)).append("\n");
    sb.append("    tranEndDate: ").append(toIndentedString(tranEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirerRefNumber");
    openapiFields.add("bankNetRefNumber");
    openapiFields.add("primaryAccountNum");
    openapiFields.add("transAmountFrom");
    openapiFields.add("transAmountTo");
    openapiFields.add("tranStartDate");
    openapiFields.add("tranEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tranStartDate");
    openapiRequiredFields.add("tranEndDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSearchRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSearchRequest is not found in the empty JSON string", TransactionSearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionSearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionSearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionSearchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirerRefNumber") != null && !jsonObj.get("acquirerRefNumber").isJsonNull()) && !jsonObj.get("acquirerRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerRefNumber").toString()));
      }
      if ((jsonObj.get("bankNetRefNumber") != null && !jsonObj.get("bankNetRefNumber").isJsonNull()) && !jsonObj.get("bankNetRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankNetRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankNetRefNumber").toString()));
      }
      if ((jsonObj.get("primaryAccountNum") != null && !jsonObj.get("primaryAccountNum").isJsonNull()) && !jsonObj.get("primaryAccountNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNum").toString()));
      }
      if ((jsonObj.get("transAmountFrom") != null && !jsonObj.get("transAmountFrom").isJsonNull()) && !jsonObj.get("transAmountFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transAmountFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transAmountFrom").toString()));
      }
      if ((jsonObj.get("transAmountTo") != null && !jsonObj.get("transAmountTo").isJsonNull()) && !jsonObj.get("transAmountTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transAmountTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transAmountTo").toString()));
      }
      if (!jsonObj.get("tranStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tranStartDate").toString()));
      }
      if (!jsonObj.get("tranEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tranEndDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSearchRequest>() {
           @Override
           public void write(JsonWriter out, TransactionSearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSearchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSearchRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionSearchRequest
  */
  public static TransactionSearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSearchRequest.class);
  }

 /**
  * Convert an instance of TransactionSearchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

