/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TransactionSingleMessageSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class TransactionSingleMessageSummary {
  public static final String SERIALIZED_NAME_AUTH_TRANSACTION_ID = "authTransactionId";
  @SerializedName(SERIALIZED_NAME_AUTH_TRANSACTION_ID)
  private String authTransactionId;

  public static final String SERIALIZED_NAME_CLEARING_TRANSACTION_ID = "clearingTransactionId";
  @SerializedName(SERIALIZED_NAME_CLEARING_TRANSACTION_ID)
  private String clearingTransactionId;

  public static final String SERIALIZED_NAME_SINGLE_MESSAGE_SUMMARY_DETAILS = "singleMessageSummaryDetails";
  @SerializedName(SERIALIZED_NAME_SINGLE_MESSAGE_SUMMARY_DETAILS)
  private SingleMessageSummaryDetails singleMessageSummaryDetails;

  public TransactionSingleMessageSummary() {
  }

  public TransactionSingleMessageSummary authTransactionId(String authTransactionId) {
    
    this.authTransactionId = authTransactionId;
    return this;
  }

   /**
   * Authorization Transaction Identifier
   * @return authTransactionId
  **/
  @javax.annotation.Nullable
  public String getAuthTransactionId() {
    return authTransactionId;
  }


  public void setAuthTransactionId(String authTransactionId) {
    this.authTransactionId = authTransactionId;
  }


  public TransactionSingleMessageSummary clearingTransactionId(String clearingTransactionId) {
    
    this.clearingTransactionId = clearingTransactionId;
    return this;
  }

   /**
   * Authorization Transaction Identifier
   * @return clearingTransactionId
  **/
  @javax.annotation.Nullable
  public String getClearingTransactionId() {
    return clearingTransactionId;
  }


  public void setClearingTransactionId(String clearingTransactionId) {
    this.clearingTransactionId = clearingTransactionId;
  }


  public TransactionSingleMessageSummary singleMessageSummaryDetails(SingleMessageSummaryDetails singleMessageSummaryDetails) {
    
    this.singleMessageSummaryDetails = singleMessageSummaryDetails;
    return this;
  }

   /**
   * Get singleMessageSummaryDetails
   * @return singleMessageSummaryDetails
  **/
  @javax.annotation.Nullable
  public SingleMessageSummaryDetails getSingleMessageSummaryDetails() {
    return singleMessageSummaryDetails;
  }


  public void setSingleMessageSummaryDetails(SingleMessageSummaryDetails singleMessageSummaryDetails) {
    this.singleMessageSummaryDetails = singleMessageSummaryDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSingleMessageSummary transactionSingleMessageSummary = (TransactionSingleMessageSummary) o;
    return Objects.equals(this.authTransactionId, transactionSingleMessageSummary.authTransactionId) &&
        Objects.equals(this.clearingTransactionId, transactionSingleMessageSummary.clearingTransactionId) &&
        Objects.equals(this.singleMessageSummaryDetails, transactionSingleMessageSummary.singleMessageSummaryDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authTransactionId, clearingTransactionId, singleMessageSummaryDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSingleMessageSummary {\n");
    sb.append("    authTransactionId: ").append(toIndentedString(authTransactionId)).append("\n");
    sb.append("    clearingTransactionId: ").append(toIndentedString(clearingTransactionId)).append("\n");
    sb.append("    singleMessageSummaryDetails: ").append(toIndentedString(singleMessageSummaryDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authTransactionId");
    openapiFields.add("clearingTransactionId");
    openapiFields.add("singleMessageSummaryDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionSingleMessageSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSingleMessageSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSingleMessageSummary is not found in the empty JSON string", TransactionSingleMessageSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionSingleMessageSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionSingleMessageSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authTransactionId") != null && !jsonObj.get("authTransactionId").isJsonNull()) && !jsonObj.get("authTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authTransactionId").toString()));
      }
      if ((jsonObj.get("clearingTransactionId") != null && !jsonObj.get("clearingTransactionId").isJsonNull()) && !jsonObj.get("clearingTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clearingTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clearingTransactionId").toString()));
      }
      // validate the optional field `singleMessageSummaryDetails`
      if (jsonObj.get("singleMessageSummaryDetails") != null && !jsonObj.get("singleMessageSummaryDetails").isJsonNull()) {
        SingleMessageSummaryDetails.validateJsonElement(jsonObj.get("singleMessageSummaryDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSingleMessageSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSingleMessageSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSingleMessageSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSingleMessageSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSingleMessageSummary>() {
           @Override
           public void write(JsonWriter out, TransactionSingleMessageSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSingleMessageSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionSingleMessageSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionSingleMessageSummary
  * @throws IOException if the JSON string is invalid with respect to TransactionSingleMessageSummary
  */
  public static TransactionSingleMessageSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSingleMessageSummary.class);
  }

 /**
  * Convert an instance of TransactionSingleMessageSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

