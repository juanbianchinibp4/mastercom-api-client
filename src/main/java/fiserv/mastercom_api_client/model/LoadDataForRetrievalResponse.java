/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * LoadDataForRetrievalResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class LoadDataForRetrievalResponse {
  public static final String SERIALIZED_NAME_DOC_NEEDED = "docNeeded";
  @SerializedName(SERIALIZED_NAME_DOC_NEEDED)
  private List<RetrievalDocNeededNameValueDetail> docNeeded;

  public static final String SERIALIZED_NAME_REASON_CODES = "reasonCodes";
  @SerializedName(SERIALIZED_NAME_REASON_CODES)
  private List<RetrievalReasonCodesNameValueDetail> reasonCodes;

  public LoadDataForRetrievalResponse() {
  }

  public LoadDataForRetrievalResponse docNeeded(List<RetrievalDocNeededNameValueDetail> docNeeded) {
    
    this.docNeeded = docNeeded;
    return this;
  }

  public LoadDataForRetrievalResponse addDocNeededItem(RetrievalDocNeededNameValueDetail docNeededItem) {
    if (this.docNeeded == null) {
      this.docNeeded = new ArrayList<>();
    }
    this.docNeeded.add(docNeededItem);
    return this;
  }

   /**
   * List of valid docNeeded fields
   * @return docNeeded
  **/
  @javax.annotation.Nullable
  public List<RetrievalDocNeededNameValueDetail> getDocNeeded() {
    return docNeeded;
  }


  public void setDocNeeded(List<RetrievalDocNeededNameValueDetail> docNeeded) {
    this.docNeeded = docNeeded;
  }


  public LoadDataForRetrievalResponse reasonCodes(List<RetrievalReasonCodesNameValueDetail> reasonCodes) {
    
    this.reasonCodes = reasonCodes;
    return this;
  }

  public LoadDataForRetrievalResponse addReasonCodesItem(RetrievalReasonCodesNameValueDetail reasonCodesItem) {
    if (this.reasonCodes == null) {
      this.reasonCodes = new ArrayList<>();
    }
    this.reasonCodes.add(reasonCodesItem);
    return this;
  }

   /**
   * List of valid reason codes
   * @return reasonCodes
  **/
  @javax.annotation.Nullable
  public List<RetrievalReasonCodesNameValueDetail> getReasonCodes() {
    return reasonCodes;
  }


  public void setReasonCodes(List<RetrievalReasonCodesNameValueDetail> reasonCodes) {
    this.reasonCodes = reasonCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadDataForRetrievalResponse loadDataForRetrievalResponse = (LoadDataForRetrievalResponse) o;
    return Objects.equals(this.docNeeded, loadDataForRetrievalResponse.docNeeded) &&
        Objects.equals(this.reasonCodes, loadDataForRetrievalResponse.reasonCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docNeeded, reasonCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadDataForRetrievalResponse {\n");
    sb.append("    docNeeded: ").append(toIndentedString(docNeeded)).append("\n");
    sb.append("    reasonCodes: ").append(toIndentedString(reasonCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("docNeeded");
    openapiFields.add("reasonCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadDataForRetrievalResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadDataForRetrievalResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadDataForRetrievalResponse is not found in the empty JSON string", LoadDataForRetrievalResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadDataForRetrievalResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadDataForRetrievalResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("docNeeded") != null && !jsonObj.get("docNeeded").isJsonNull()) {
        JsonArray jsonArraydocNeeded = jsonObj.getAsJsonArray("docNeeded");
        if (jsonArraydocNeeded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("docNeeded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `docNeeded` to be an array in the JSON string but got `%s`", jsonObj.get("docNeeded").toString()));
          }

          // validate the optional field `docNeeded` (array)
          for (int i = 0; i < jsonArraydocNeeded.size(); i++) {
            RetrievalDocNeededNameValueDetail.validateJsonElement(jsonArraydocNeeded.get(i));
          };
        }
      }
      if (jsonObj.get("reasonCodes") != null && !jsonObj.get("reasonCodes").isJsonNull()) {
        JsonArray jsonArrayreasonCodes = jsonObj.getAsJsonArray("reasonCodes");
        if (jsonArrayreasonCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reasonCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reasonCodes` to be an array in the JSON string but got `%s`", jsonObj.get("reasonCodes").toString()));
          }

          // validate the optional field `reasonCodes` (array)
          for (int i = 0; i < jsonArrayreasonCodes.size(); i++) {
            RetrievalReasonCodesNameValueDetail.validateJsonElement(jsonArrayreasonCodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadDataForRetrievalResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadDataForRetrievalResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadDataForRetrievalResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadDataForRetrievalResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadDataForRetrievalResponse>() {
           @Override
           public void write(JsonWriter out, LoadDataForRetrievalResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadDataForRetrievalResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadDataForRetrievalResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadDataForRetrievalResponse
  * @throws IOException if the JSON string is invalid with respect to LoadDataForRetrievalResponse
  */
  public static LoadDataForRetrievalResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadDataForRetrievalResponse.class);
  }

 /**
  * Convert an instance of LoadDataForRetrievalResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

