/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * UpdateCaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class UpdateCaseRequest {
  /**
   * Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACCEPT("ACCEPT"),
    
    REJECT("REJECT"),
    
    REBUT("REBUT"),
    
    ESCALATE("ESCALATE"),
    
    WITHDRAW("WITHDRAW"),
    
    DOC_RETRY("DOC_RETRY");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_FILE_ATTACHMENT = "fileAttachment";
  @SerializedName(SERIALIZED_NAME_FILE_ATTACHMENT)
  private DocumentStructure fileAttachment;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC
   */
  @JsonAdapter(RebuttedAsEnum.Adapter.class)
  public enum RebuttedAsEnum {
    SND("SND"),
    
    REC("REC");

    private String value;

    RebuttedAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebuttedAsEnum fromValue(String value) {
      for (RebuttedAsEnum b : RebuttedAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RebuttedAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebuttedAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebuttedAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RebuttedAsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REBUTTED_AS = "rebuttedAs";
  @SerializedName(SERIALIZED_NAME_REBUTTED_AS)
  private RebuttedAsEnum rebuttedAs;

  /**
   * Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC
   */
  @JsonAdapter(DocRetryAsEnum.Adapter.class)
  public enum DocRetryAsEnum {
    SND("SND"),
    
    REC("REC");

    private String value;

    DocRetryAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocRetryAsEnum fromValue(String value) {
      for (DocRetryAsEnum b : DocRetryAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocRetryAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocRetryAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocRetryAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocRetryAsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOC_RETRY_AS = "docRetryAs";
  @SerializedName(SERIALIZED_NAME_DOC_RETRY_AS)
  private DocRetryAsEnum docRetryAs;

  public UpdateCaseRequest() {
  }

  public UpdateCaseRequest action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
   * @return action
  **/
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public UpdateCaseRequest fileAttachment(DocumentStructure fileAttachment) {
    
    this.fileAttachment = fileAttachment;
    return this;
  }

   /**
   * Get fileAttachment
   * @return fileAttachment
  **/
  @javax.annotation.Nullable
  public DocumentStructure getFileAttachment() {
    return fileAttachment;
  }


  public void setFileAttachment(DocumentStructure fileAttachment) {
    this.fileAttachment = fileAttachment;
  }


  public UpdateCaseRequest memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Memo pertaining to the case.   CONDITIONAL:  This field is mandatory and applicable if the action code is ACCEPT, REJECT, REBUT or DOC_RETRY.   Length: 0-100   Valid Values/Format: Alphanumeric
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public UpdateCaseRequest rebuttedAs(RebuttedAsEnum rebuttedAs) {
    
    this.rebuttedAs = rebuttedAs;
    return this;
  }

   /**
   * Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC
   * @return rebuttedAs
  **/
  @javax.annotation.Nullable
  public RebuttedAsEnum getRebuttedAs() {
    return rebuttedAs;
  }


  public void setRebuttedAs(RebuttedAsEnum rebuttedAs) {
    this.rebuttedAs = rebuttedAs;
  }


  public UpdateCaseRequest docRetryAs(DocRetryAsEnum docRetryAs) {
    
    this.docRetryAs = docRetryAs;
    return this;
  }

   /**
   * Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC
   * @return docRetryAs
  **/
  @javax.annotation.Nullable
  public DocRetryAsEnum getDocRetryAs() {
    return docRetryAs;
  }


  public void setDocRetryAs(DocRetryAsEnum docRetryAs) {
    this.docRetryAs = docRetryAs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCaseRequest updateCaseRequest = (UpdateCaseRequest) o;
    return Objects.equals(this.action, updateCaseRequest.action) &&
        Objects.equals(this.fileAttachment, updateCaseRequest.fileAttachment) &&
        Objects.equals(this.memo, updateCaseRequest.memo) &&
        Objects.equals(this.rebuttedAs, updateCaseRequest.rebuttedAs) &&
        Objects.equals(this.docRetryAs, updateCaseRequest.docRetryAs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, fileAttachment, memo, rebuttedAs, docRetryAs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCaseRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    fileAttachment: ").append(toIndentedString(fileAttachment)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    rebuttedAs: ").append(toIndentedString(rebuttedAs)).append("\n");
    sb.append("    docRetryAs: ").append(toIndentedString(docRetryAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("fileAttachment");
    openapiFields.add("memo");
    openapiFields.add("rebuttedAs");
    openapiFields.add("docRetryAs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateCaseRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCaseRequest is not found in the empty JSON string", UpdateCaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateCaseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `fileAttachment`
      if (jsonObj.get("fileAttachment") != null && !jsonObj.get("fileAttachment").isJsonNull()) {
        DocumentStructure.validateJsonElement(jsonObj.get("fileAttachment"));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("rebuttedAs") != null && !jsonObj.get("rebuttedAs").isJsonNull()) && !jsonObj.get("rebuttedAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebuttedAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebuttedAs").toString()));
      }
      if ((jsonObj.get("docRetryAs") != null && !jsonObj.get("docRetryAs").isJsonNull()) && !jsonObj.get("docRetryAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docRetryAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docRetryAs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCaseRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateCaseRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCaseRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateCaseRequest
  */
  public static UpdateCaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCaseRequest.class);
  }

 /**
  * Convert an instance of UpdateCaseRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

