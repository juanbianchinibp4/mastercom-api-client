/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FraudDrfDocumentStructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class FraudDrfDocumentStructure {
  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS = "numberOfItems";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS)
  private String numberOfItems;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private String types;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_CHARGEBACK_REPRESENTATIVE = "chargebackRepresentative";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_REPRESENTATIVE)
  private String chargebackRepresentative;

  /**
   * The card issuer region.   Length: 2-6   Valid Values/Format: AP, Europe, NAM, LAC, MEA
   */
  @JsonAdapter(CardIssuerRegionEnum.Adapter.class)
  public enum CardIssuerRegionEnum {
    AP("AP"),
    
    EUROPE("Europe"),
    
    NAM("NAM"),
    
    LAC("LAC"),
    
    MEA("MEA");

    private String value;

    CardIssuerRegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardIssuerRegionEnum fromValue(String value) {
      for (CardIssuerRegionEnum b : CardIssuerRegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardIssuerRegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardIssuerRegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardIssuerRegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardIssuerRegionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CARD_ISSUER_REGION = "cardIssuerRegion";
  @SerializedName(SERIALIZED_NAME_CARD_ISSUER_REGION)
  private CardIssuerRegionEnum cardIssuerRegion;

  public static final String SERIALIZED_NAME_CARDHOLDER_VERIFICATION_METHOD = "cardholderVerificationMethod";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_VERIFICATION_METHOD)
  private CardholderVerificationMethodStructure cardholderVerificationMethod;

  public FraudDrfDocumentStructure() {
  }

  public FraudDrfDocumentStructure numberOfItems(String numberOfItems) {
    
    this.numberOfItems = numberOfItems;
    return this;
  }

   /**
   * Numeric value of number of transactions being disputed.   Length: 0-19   Valid Values/Format: Numeric
   * @return numberOfItems
  **/
  @javax.annotation.Nullable
  public String getNumberOfItems() {
    return numberOfItems;
  }


  public void setNumberOfItems(String numberOfItems) {
    this.numberOfItems = numberOfItems;
  }


  public FraudDrfDocumentStructure types(String types) {
    
    this.types = types;
    return this;
  }

   /**
   * Enter any of the valid values comma separated.   Length: 7-12   Valid Values/Format: CARD_CLOSED, REPORT_SAFE, CAPTURE_CARD, LOST_STOLEN, COUNTERFEIT, RC_4837, RC_4840
   * @return types
  **/
  @javax.annotation.Nullable
  public String getTypes() {
    return types;
  }


  public void setTypes(String types) {
    this.types = types;
  }


  public FraudDrfDocumentStructure additionalInformation(String additionalInformation) {
    
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Additional information, if needed   Length: 0-1000   Valid Values/Format: Alphanumeric / Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return additionalInformation
  **/
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }


  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public FraudDrfDocumentStructure chargebackRepresentative(String chargebackRepresentative) {
    
    this.chargebackRepresentative = chargebackRepresentative;
    return this;
  }

   /**
   * Customer Service/Chargeback Representative   Length: 0-25   Valid Values/Format: Alphanumeric / Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return chargebackRepresentative
  **/
  @javax.annotation.Nullable
  public String getChargebackRepresentative() {
    return chargebackRepresentative;
  }


  public void setChargebackRepresentative(String chargebackRepresentative) {
    this.chargebackRepresentative = chargebackRepresentative;
  }


  public FraudDrfDocumentStructure cardIssuerRegion(CardIssuerRegionEnum cardIssuerRegion) {
    
    this.cardIssuerRegion = cardIssuerRegion;
    return this;
  }

   /**
   * The card issuer region.   Length: 2-6   Valid Values/Format: AP, Europe, NAM, LAC, MEA
   * @return cardIssuerRegion
  **/
  @javax.annotation.Nullable
  public CardIssuerRegionEnum getCardIssuerRegion() {
    return cardIssuerRegion;
  }


  public void setCardIssuerRegion(CardIssuerRegionEnum cardIssuerRegion) {
    this.cardIssuerRegion = cardIssuerRegion;
  }


  public FraudDrfDocumentStructure cardholderVerificationMethod(CardholderVerificationMethodStructure cardholderVerificationMethod) {
    
    this.cardholderVerificationMethod = cardholderVerificationMethod;
    return this;
  }

   /**
   * Get cardholderVerificationMethod
   * @return cardholderVerificationMethod
  **/
  @javax.annotation.Nullable
  public CardholderVerificationMethodStructure getCardholderVerificationMethod() {
    return cardholderVerificationMethod;
  }


  public void setCardholderVerificationMethod(CardholderVerificationMethodStructure cardholderVerificationMethod) {
    this.cardholderVerificationMethod = cardholderVerificationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FraudDrfDocumentStructure fraudDrfDocumentStructure = (FraudDrfDocumentStructure) o;
    return Objects.equals(this.numberOfItems, fraudDrfDocumentStructure.numberOfItems) &&
        Objects.equals(this.types, fraudDrfDocumentStructure.types) &&
        Objects.equals(this.additionalInformation, fraudDrfDocumentStructure.additionalInformation) &&
        Objects.equals(this.chargebackRepresentative, fraudDrfDocumentStructure.chargebackRepresentative) &&
        Objects.equals(this.cardIssuerRegion, fraudDrfDocumentStructure.cardIssuerRegion) &&
        Objects.equals(this.cardholderVerificationMethod, fraudDrfDocumentStructure.cardholderVerificationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfItems, types, additionalInformation, chargebackRepresentative, cardIssuerRegion, cardholderVerificationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FraudDrfDocumentStructure {\n");
    sb.append("    numberOfItems: ").append(toIndentedString(numberOfItems)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    chargebackRepresentative: ").append(toIndentedString(chargebackRepresentative)).append("\n");
    sb.append("    cardIssuerRegion: ").append(toIndentedString(cardIssuerRegion)).append("\n");
    sb.append("    cardholderVerificationMethod: ").append(toIndentedString(cardholderVerificationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfItems");
    openapiFields.add("types");
    openapiFields.add("additionalInformation");
    openapiFields.add("chargebackRepresentative");
    openapiFields.add("cardIssuerRegion");
    openapiFields.add("cardholderVerificationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FraudDrfDocumentStructure
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FraudDrfDocumentStructure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FraudDrfDocumentStructure is not found in the empty JSON string", FraudDrfDocumentStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FraudDrfDocumentStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FraudDrfDocumentStructure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("numberOfItems") != null && !jsonObj.get("numberOfItems").isJsonNull()) && !jsonObj.get("numberOfItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberOfItems").toString()));
      }
      if ((jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) && !jsonObj.get("types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      if ((jsonObj.get("chargebackRepresentative") != null && !jsonObj.get("chargebackRepresentative").isJsonNull()) && !jsonObj.get("chargebackRepresentative").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackRepresentative` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackRepresentative").toString()));
      }
      if ((jsonObj.get("cardIssuerRegion") != null && !jsonObj.get("cardIssuerRegion").isJsonNull()) && !jsonObj.get("cardIssuerRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardIssuerRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardIssuerRegion").toString()));
      }
      // validate the optional field `cardholderVerificationMethod`
      if (jsonObj.get("cardholderVerificationMethod") != null && !jsonObj.get("cardholderVerificationMethod").isJsonNull()) {
        CardholderVerificationMethodStructure.validateJsonElement(jsonObj.get("cardholderVerificationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FraudDrfDocumentStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FraudDrfDocumentStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FraudDrfDocumentStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FraudDrfDocumentStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<FraudDrfDocumentStructure>() {
           @Override
           public void write(JsonWriter out, FraudDrfDocumentStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FraudDrfDocumentStructure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FraudDrfDocumentStructure given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FraudDrfDocumentStructure
  * @throws IOException if the JSON string is invalid with respect to FraudDrfDocumentStructure
  */
  public static FraudDrfDocumentStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FraudDrfDocumentStructure.class);
  }

 /**
  * Convert an instance of FraudDrfDocumentStructure to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

