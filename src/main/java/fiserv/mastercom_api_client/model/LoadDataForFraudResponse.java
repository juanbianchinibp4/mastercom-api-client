/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * LoadDataForFraudResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class LoadDataForFraudResponse {
  public static final String SERIALIZED_NAME_ACCT_DEVICE_TYPES = "acctDeviceTypes";
  @SerializedName(SERIALIZED_NAME_ACCT_DEVICE_TYPES)
  private List<FraudAcctDeviceTypesNameValueDetail> acctDeviceTypes;

  public static final String SERIALIZED_NAME_ACCT_STATUSES = "acctStatuses";
  @SerializedName(SERIALIZED_NAME_ACCT_STATUSES)
  private List<FraudAcctStatusesNameValueDetail> acctStatuses;

  public static final String SERIALIZED_NAME_CARD_VALID_CODES = "cardValidCodes";
  @SerializedName(SERIALIZED_NAME_CARD_VALID_CODES)
  private List<FraudCardValidCodesNameValueDetail> cardValidCodes;

  public static final String SERIALIZED_NAME_SUB_TYPES = "subTypes";
  @SerializedName(SERIALIZED_NAME_SUB_TYPES)
  private List<FraudSubTypesNameValueDetail> subTypes;

  public LoadDataForFraudResponse() {
  }

  public LoadDataForFraudResponse acctDeviceTypes(List<FraudAcctDeviceTypesNameValueDetail> acctDeviceTypes) {
    
    this.acctDeviceTypes = acctDeviceTypes;
    return this;
  }

  public LoadDataForFraudResponse addAcctDeviceTypesItem(FraudAcctDeviceTypesNameValueDetail acctDeviceTypesItem) {
    if (this.acctDeviceTypes == null) {
      this.acctDeviceTypes = new ArrayList<>();
    }
    this.acctDeviceTypes.add(acctDeviceTypesItem);
    return this;
  }

   /**
   * List of valid account device types
   * @return acctDeviceTypes
  **/
  @javax.annotation.Nullable
  public List<FraudAcctDeviceTypesNameValueDetail> getAcctDeviceTypes() {
    return acctDeviceTypes;
  }


  public void setAcctDeviceTypes(List<FraudAcctDeviceTypesNameValueDetail> acctDeviceTypes) {
    this.acctDeviceTypes = acctDeviceTypes;
  }


  public LoadDataForFraudResponse acctStatuses(List<FraudAcctStatusesNameValueDetail> acctStatuses) {
    
    this.acctStatuses = acctStatuses;
    return this;
  }

  public LoadDataForFraudResponse addAcctStatusesItem(FraudAcctStatusesNameValueDetail acctStatusesItem) {
    if (this.acctStatuses == null) {
      this.acctStatuses = new ArrayList<>();
    }
    this.acctStatuses.add(acctStatusesItem);
    return this;
  }

   /**
   * List of valid account statuses
   * @return acctStatuses
  **/
  @javax.annotation.Nullable
  public List<FraudAcctStatusesNameValueDetail> getAcctStatuses() {
    return acctStatuses;
  }


  public void setAcctStatuses(List<FraudAcctStatusesNameValueDetail> acctStatuses) {
    this.acctStatuses = acctStatuses;
  }


  public LoadDataForFraudResponse cardValidCodes(List<FraudCardValidCodesNameValueDetail> cardValidCodes) {
    
    this.cardValidCodes = cardValidCodes;
    return this;
  }

  public LoadDataForFraudResponse addCardValidCodesItem(FraudCardValidCodesNameValueDetail cardValidCodesItem) {
    if (this.cardValidCodes == null) {
      this.cardValidCodes = new ArrayList<>();
    }
    this.cardValidCodes.add(cardValidCodesItem);
    return this;
  }

   /**
   * List of valid card valid codes
   * @return cardValidCodes
  **/
  @javax.annotation.Nullable
  public List<FraudCardValidCodesNameValueDetail> getCardValidCodes() {
    return cardValidCodes;
  }


  public void setCardValidCodes(List<FraudCardValidCodesNameValueDetail> cardValidCodes) {
    this.cardValidCodes = cardValidCodes;
  }


  public LoadDataForFraudResponse subTypes(List<FraudSubTypesNameValueDetail> subTypes) {
    
    this.subTypes = subTypes;
    return this;
  }

  public LoadDataForFraudResponse addSubTypesItem(FraudSubTypesNameValueDetail subTypesItem) {
    if (this.subTypes == null) {
      this.subTypes = new ArrayList<>();
    }
    this.subTypes.add(subTypesItem);
    return this;
  }

   /**
   * List of valid sub types
   * @return subTypes
  **/
  @javax.annotation.Nullable
  public List<FraudSubTypesNameValueDetail> getSubTypes() {
    return subTypes;
  }


  public void setSubTypes(List<FraudSubTypesNameValueDetail> subTypes) {
    this.subTypes = subTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadDataForFraudResponse loadDataForFraudResponse = (LoadDataForFraudResponse) o;
    return Objects.equals(this.acctDeviceTypes, loadDataForFraudResponse.acctDeviceTypes) &&
        Objects.equals(this.acctStatuses, loadDataForFraudResponse.acctStatuses) &&
        Objects.equals(this.cardValidCodes, loadDataForFraudResponse.cardValidCodes) &&
        Objects.equals(this.subTypes, loadDataForFraudResponse.subTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctDeviceTypes, acctStatuses, cardValidCodes, subTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadDataForFraudResponse {\n");
    sb.append("    acctDeviceTypes: ").append(toIndentedString(acctDeviceTypes)).append("\n");
    sb.append("    acctStatuses: ").append(toIndentedString(acctStatuses)).append("\n");
    sb.append("    cardValidCodes: ").append(toIndentedString(cardValidCodes)).append("\n");
    sb.append("    subTypes: ").append(toIndentedString(subTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctDeviceTypes");
    openapiFields.add("acctStatuses");
    openapiFields.add("cardValidCodes");
    openapiFields.add("subTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadDataForFraudResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadDataForFraudResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadDataForFraudResponse is not found in the empty JSON string", LoadDataForFraudResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadDataForFraudResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadDataForFraudResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acctDeviceTypes") != null && !jsonObj.get("acctDeviceTypes").isJsonNull()) {
        JsonArray jsonArrayacctDeviceTypes = jsonObj.getAsJsonArray("acctDeviceTypes");
        if (jsonArrayacctDeviceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acctDeviceTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acctDeviceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("acctDeviceTypes").toString()));
          }

          // validate the optional field `acctDeviceTypes` (array)
          for (int i = 0; i < jsonArrayacctDeviceTypes.size(); i++) {
            FraudAcctDeviceTypesNameValueDetail.validateJsonElement(jsonArrayacctDeviceTypes.get(i));
          };
        }
      }
      if (jsonObj.get("acctStatuses") != null && !jsonObj.get("acctStatuses").isJsonNull()) {
        JsonArray jsonArrayacctStatuses = jsonObj.getAsJsonArray("acctStatuses");
        if (jsonArrayacctStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acctStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acctStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("acctStatuses").toString()));
          }

          // validate the optional field `acctStatuses` (array)
          for (int i = 0; i < jsonArrayacctStatuses.size(); i++) {
            FraudAcctStatusesNameValueDetail.validateJsonElement(jsonArrayacctStatuses.get(i));
          };
        }
      }
      if (jsonObj.get("cardValidCodes") != null && !jsonObj.get("cardValidCodes").isJsonNull()) {
        JsonArray jsonArraycardValidCodes = jsonObj.getAsJsonArray("cardValidCodes");
        if (jsonArraycardValidCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cardValidCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cardValidCodes` to be an array in the JSON string but got `%s`", jsonObj.get("cardValidCodes").toString()));
          }

          // validate the optional field `cardValidCodes` (array)
          for (int i = 0; i < jsonArraycardValidCodes.size(); i++) {
            FraudCardValidCodesNameValueDetail.validateJsonElement(jsonArraycardValidCodes.get(i));
          };
        }
      }
      if (jsonObj.get("subTypes") != null && !jsonObj.get("subTypes").isJsonNull()) {
        JsonArray jsonArraysubTypes = jsonObj.getAsJsonArray("subTypes");
        if (jsonArraysubTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subTypes` to be an array in the JSON string but got `%s`", jsonObj.get("subTypes").toString()));
          }

          // validate the optional field `subTypes` (array)
          for (int i = 0; i < jsonArraysubTypes.size(); i++) {
            FraudSubTypesNameValueDetail.validateJsonElement(jsonArraysubTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadDataForFraudResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadDataForFraudResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadDataForFraudResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadDataForFraudResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadDataForFraudResponse>() {
           @Override
           public void write(JsonWriter out, LoadDataForFraudResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadDataForFraudResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadDataForFraudResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadDataForFraudResponse
  * @throws IOException if the JSON string is invalid with respect to LoadDataForFraudResponse
  */
  public static LoadDataForFraudResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadDataForFraudResponse.class);
  }

 /**
  * Convert an instance of LoadDataForFraudResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

