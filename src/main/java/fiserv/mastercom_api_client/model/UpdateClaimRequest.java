/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * UpdateClaimRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class UpdateClaimRequest {
  public static final String SERIALIZED_NAME_OPEN_CLAIM_DUE_DATE = "openClaimDueDate";
  @SerializedName(SERIALIZED_NAME_OPEN_CLAIM_DUE_DATE)
  private String openClaimDueDate;

  /**
   * Action to perform on claim.   Length: 5-6   Valid Values/Format: REOPEN, CLOSE
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    REOPEN("REOPEN"),
    
    CLOSE("CLOSE");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  /**
   * Reason code for closing the claim.   Length: 2   Valid Values/Format: 10, 20, 30, 40
   */
  @JsonAdapter(CloseClaimReasonCodeEnum.Adapter.class)
  public enum CloseClaimReasonCodeEnum {
    _10("10"),
    
    _20("20"),
    
    _30("30"),
    
    _40("40");

    private String value;

    CloseClaimReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CloseClaimReasonCodeEnum fromValue(String value) {
      for (CloseClaimReasonCodeEnum b : CloseClaimReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CloseClaimReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloseClaimReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CloseClaimReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CloseClaimReasonCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLOSE_CLAIM_REASON_CODE = "closeClaimReasonCode";
  @SerializedName(SERIALIZED_NAME_CLOSE_CLAIM_REASON_CODE)
  private CloseClaimReasonCodeEnum closeClaimReasonCode;

  public UpdateClaimRequest() {
  }

  public UpdateClaimRequest openClaimDueDate(String openClaimDueDate) {
    
    this.openClaimDueDate = openClaimDueDate;
    return this;
  }

   /**
   * The due date for opening the claim.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return openClaimDueDate
  **/
  @javax.annotation.Nullable
  public String getOpenClaimDueDate() {
    return openClaimDueDate;
  }


  public void setOpenClaimDueDate(String openClaimDueDate) {
    this.openClaimDueDate = openClaimDueDate;
  }


  public UpdateClaimRequest action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to perform on claim.   Length: 5-6   Valid Values/Format: REOPEN, CLOSE
   * @return action
  **/
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public UpdateClaimRequest closeClaimReasonCode(CloseClaimReasonCodeEnum closeClaimReasonCode) {
    
    this.closeClaimReasonCode = closeClaimReasonCode;
    return this;
  }

   /**
   * Reason code for closing the claim.   Length: 2   Valid Values/Format: 10, 20, 30, 40
   * @return closeClaimReasonCode
  **/
  @javax.annotation.Nullable
  public CloseClaimReasonCodeEnum getCloseClaimReasonCode() {
    return closeClaimReasonCode;
  }


  public void setCloseClaimReasonCode(CloseClaimReasonCodeEnum closeClaimReasonCode) {
    this.closeClaimReasonCode = closeClaimReasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateClaimRequest updateClaimRequest = (UpdateClaimRequest) o;
    return Objects.equals(this.openClaimDueDate, updateClaimRequest.openClaimDueDate) &&
        Objects.equals(this.action, updateClaimRequest.action) &&
        Objects.equals(this.closeClaimReasonCode, updateClaimRequest.closeClaimReasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openClaimDueDate, action, closeClaimReasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateClaimRequest {\n");
    sb.append("    openClaimDueDate: ").append(toIndentedString(openClaimDueDate)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    closeClaimReasonCode: ").append(toIndentedString(closeClaimReasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("openClaimDueDate");
    openapiFields.add("action");
    openapiFields.add("closeClaimReasonCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateClaimRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateClaimRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateClaimRequest is not found in the empty JSON string", UpdateClaimRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateClaimRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateClaimRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateClaimRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("openClaimDueDate") != null && !jsonObj.get("openClaimDueDate").isJsonNull()) && !jsonObj.get("openClaimDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openClaimDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openClaimDueDate").toString()));
      }
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("closeClaimReasonCode") != null && !jsonObj.get("closeClaimReasonCode").isJsonNull()) && !jsonObj.get("closeClaimReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closeClaimReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closeClaimReasonCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateClaimRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateClaimRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateClaimRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateClaimRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateClaimRequest>() {
           @Override
           public void write(JsonWriter out, UpdateClaimRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateClaimRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateClaimRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateClaimRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateClaimRequest
  */
  public static UpdateClaimRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateClaimRequest.class);
  }

 /**
  * Convert an instance of UpdateClaimRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

