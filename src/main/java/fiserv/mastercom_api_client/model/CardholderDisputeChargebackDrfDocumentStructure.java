/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CardholderDisputeChargebackDrfDocumentStructure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CardholderDisputeChargebackDrfDocumentStructure {
  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private String transactionAmount;

  /**
   * Type of Carholder Dispute.   Length: 11-22   Valid Values/Format: PRODUCT_DISPUTE,NOT_PROVIDED,DIGITAL_GOODS,CREDIT_NOT_PROCESSED,COUNTERFEIT,RECURRING_CANCELLED,RECURRING_DISCLOSURE,ADDENDUM_DISPUTE,HOTEL_NO_SHOW,PURCHASE_INCOMPLETE,CANCELLATION_AGREEMENT,POSTED_CREDIT,FAILED_TRAVEL
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PRODUCT_DISPUTE("PRODUCT_DISPUTE"),
    
    NOT_PROVIDED("NOT_PROVIDED"),
    
    DIGITAL_GOODS("DIGITAL_GOODS"),
    
    CREDIT_NOT_PROCESSED("CREDIT_NOT_PROCESSED"),
    
    COUNTERFEIT("COUNTERFEIT"),
    
    RECURRING_CANCELLED("RECURRING_CANCELLED"),
    
    RECURRING_DISCLOSURE("RECURRING_DISCLOSURE"),
    
    ADDENDUM_DISPUTE("ADDENDUM_DISPUTE"),
    
    HOTEL_NO_SHOW("HOTEL_NO_SHOW"),
    
    PURCHASE_INCOMPLETE("PURCHASE_INCOMPLETE"),
    
    CANCELLATION_AGREEMENT("CANCELLATION_AGREEMENT"),
    
    POSTED_CREDIT("POSTED_CREDIT"),
    
    FAILED_TRAVEL("FAILED_TRAVEL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DELIVERY_DATE_OF_GOODS_OR_SERVICES = "deliveryDateOfGoodsOrServices";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE_OF_GOODS_OR_SERVICES)
  private String deliveryDateOfGoodsOrServices;

  public static final String SERIALIZED_NAME_EXPECTED_DELIVERY_DATE_OF_GOOD_OR_SERVICES = "expectedDeliveryDateOfGoodOrServices";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DELIVERY_DATE_OF_GOOD_OR_SERVICES)
  private String expectedDeliveryDateOfGoodOrServices;

  public static final String SERIALIZED_NAME_RETURN_DATE = "returnDate";
  @SerializedName(SERIALIZED_NAME_RETURN_DATE)
  private String returnDate;

  public static final String SERIALIZED_NAME_CANCELLATION_DATE = "cancellationDate";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_DATE)
  private String cancellationDate;

  public static final String SERIALIZED_NAME_CARDHOLDER_PARTICIPATION = "cardholderParticipation";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_PARTICIPATION)
  private Boolean cardholderParticipation;

  public static final String SERIALIZED_NAME_DISPUTE_DETAILS = "disputeDetails";
  @SerializedName(SERIALIZED_NAME_DISPUTE_DETAILS)
  private String disputeDetails;

  public static final String SERIALIZED_NAME_CHARGEBACK_REPRESENTATIVE = "chargebackRepresentative";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_REPRESENTATIVE)
  private String chargebackRepresentative;

  public CardholderDisputeChargebackDrfDocumentStructure() {
  }

  public CardholderDisputeChargebackDrfDocumentStructure transactionAmount(String transactionAmount) {
    
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * The transaction amount.   Length: 0-12   Valid Values/Format: Numeric
   * @return transactionAmount
  **/
  @javax.annotation.Nullable
  public String getTransactionAmount() {
    return transactionAmount;
  }


  public void setTransactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public CardholderDisputeChargebackDrfDocumentStructure type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of Carholder Dispute.   Length: 11-22   Valid Values/Format: PRODUCT_DISPUTE,NOT_PROVIDED,DIGITAL_GOODS,CREDIT_NOT_PROCESSED,COUNTERFEIT,RECURRING_CANCELLED,RECURRING_DISCLOSURE,ADDENDUM_DISPUTE,HOTEL_NO_SHOW,PURCHASE_INCOMPLETE,CANCELLATION_AGREEMENT,POSTED_CREDIT,FAILED_TRAVEL
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CardholderDisputeChargebackDrfDocumentStructure deliveryDateOfGoodsOrServices(String deliveryDateOfGoodsOrServices) {
    
    this.deliveryDateOfGoodsOrServices = deliveryDateOfGoodsOrServices;
    return this;
  }

   /**
   * CONDITIONAL: In case of PRODUCT_DISPUTE, delivery date of the goods or services.   Length: 11   Valid Values/Format: Date (dd-MMM-yyyy)
   * @return deliveryDateOfGoodsOrServices
  **/
  @javax.annotation.Nullable
  public String getDeliveryDateOfGoodsOrServices() {
    return deliveryDateOfGoodsOrServices;
  }


  public void setDeliveryDateOfGoodsOrServices(String deliveryDateOfGoodsOrServices) {
    this.deliveryDateOfGoodsOrServices = deliveryDateOfGoodsOrServices;
  }


  public CardholderDisputeChargebackDrfDocumentStructure expectedDeliveryDateOfGoodOrServices(String expectedDeliveryDateOfGoodOrServices) {
    
    this.expectedDeliveryDateOfGoodOrServices = expectedDeliveryDateOfGoodOrServices;
    return this;
  }

   /**
   * CONDITIONAL: In case of NOT_PROVIDED, expected delivery date of the goods or services.   Length: 11   Valid Values/Format: Date (dd-MMM-yyyy)
   * @return expectedDeliveryDateOfGoodOrServices
  **/
  @javax.annotation.Nullable
  public String getExpectedDeliveryDateOfGoodOrServices() {
    return expectedDeliveryDateOfGoodOrServices;
  }


  public void setExpectedDeliveryDateOfGoodOrServices(String expectedDeliveryDateOfGoodOrServices) {
    this.expectedDeliveryDateOfGoodOrServices = expectedDeliveryDateOfGoodOrServices;
  }


  public CardholderDisputeChargebackDrfDocumentStructure returnDate(String returnDate) {
    
    this.returnDate = returnDate;
    return this;
  }

   /**
   * CONDITIONAL: In case of DIGITAL_GOODS, return or cancellation of the goods or services.   Length: 11   Valid Values/Format: Date (dd-MMM-yyyy)
   * @return returnDate
  **/
  @javax.annotation.Nullable
  public String getReturnDate() {
    return returnDate;
  }


  public void setReturnDate(String returnDate) {
    this.returnDate = returnDate;
  }


  public CardholderDisputeChargebackDrfDocumentStructure cancellationDate(String cancellationDate) {
    
    this.cancellationDate = cancellationDate;
    return this;
  }

   /**
   * CONDITIONAL: In case of RECURRING_CANCELLED, cancellation of the goods or services.   Length: 11   Valid Values/Format: Date (dd-MMM-yyyy)
   * @return cancellationDate
  **/
  @javax.annotation.Nullable
  public String getCancellationDate() {
    return cancellationDate;
  }


  public void setCancellationDate(String cancellationDate) {
    this.cancellationDate = cancellationDate;
  }


  public CardholderDisputeChargebackDrfDocumentStructure cardholderParticipation(Boolean cardholderParticipation) {
    
    this.cardholderParticipation = cardholderParticipation;
    return this;
  }

   /**
   * Did the cardholder participate in the transaction?   Length: 4-5   Valid Values/Format: true / false
   * @return cardholderParticipation
  **/
  @javax.annotation.Nullable
  public Boolean getCardholderParticipation() {
    return cardholderParticipation;
  }


  public void setCardholderParticipation(Boolean cardholderParticipation) {
    this.cardholderParticipation = cardholderParticipation;
  }


  public CardholderDisputeChargebackDrfDocumentStructure disputeDetails(String disputeDetails) {
    
    this.disputeDetails = disputeDetails;
    return this;
  }

   /**
   * Describe the cardholderâ€™s compliant in sufficient detail to meet the requirements for the chargeback as described in the Chargeback Guide and to enable all parties to understand the dispute.   Length: 0-3000   Valid Values/Format: Alphanumeric / Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return disputeDetails
  **/
  @javax.annotation.Nullable
  public String getDisputeDetails() {
    return disputeDetails;
  }


  public void setDisputeDetails(String disputeDetails) {
    this.disputeDetails = disputeDetails;
  }


  public CardholderDisputeChargebackDrfDocumentStructure chargebackRepresentative(String chargebackRepresentative) {
    
    this.chargebackRepresentative = chargebackRepresentative;
    return this;
  }

   /**
   * Customer Service/Chargeback Representative.   Length: 0-25   Valid Values/Format: Alphanumeric / Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return chargebackRepresentative
  **/
  @javax.annotation.Nullable
  public String getChargebackRepresentative() {
    return chargebackRepresentative;
  }


  public void setChargebackRepresentative(String chargebackRepresentative) {
    this.chargebackRepresentative = chargebackRepresentative;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardholderDisputeChargebackDrfDocumentStructure cardholderDisputeChargebackDrfDocumentStructure = (CardholderDisputeChargebackDrfDocumentStructure) o;
    return Objects.equals(this.transactionAmount, cardholderDisputeChargebackDrfDocumentStructure.transactionAmount) &&
        Objects.equals(this.type, cardholderDisputeChargebackDrfDocumentStructure.type) &&
        Objects.equals(this.deliveryDateOfGoodsOrServices, cardholderDisputeChargebackDrfDocumentStructure.deliveryDateOfGoodsOrServices) &&
        Objects.equals(this.expectedDeliveryDateOfGoodOrServices, cardholderDisputeChargebackDrfDocumentStructure.expectedDeliveryDateOfGoodOrServices) &&
        Objects.equals(this.returnDate, cardholderDisputeChargebackDrfDocumentStructure.returnDate) &&
        Objects.equals(this.cancellationDate, cardholderDisputeChargebackDrfDocumentStructure.cancellationDate) &&
        Objects.equals(this.cardholderParticipation, cardholderDisputeChargebackDrfDocumentStructure.cardholderParticipation) &&
        Objects.equals(this.disputeDetails, cardholderDisputeChargebackDrfDocumentStructure.disputeDetails) &&
        Objects.equals(this.chargebackRepresentative, cardholderDisputeChargebackDrfDocumentStructure.chargebackRepresentative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionAmount, type, deliveryDateOfGoodsOrServices, expectedDeliveryDateOfGoodOrServices, returnDate, cancellationDate, cardholderParticipation, disputeDetails, chargebackRepresentative);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardholderDisputeChargebackDrfDocumentStructure {\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deliveryDateOfGoodsOrServices: ").append(toIndentedString(deliveryDateOfGoodsOrServices)).append("\n");
    sb.append("    expectedDeliveryDateOfGoodOrServices: ").append(toIndentedString(expectedDeliveryDateOfGoodOrServices)).append("\n");
    sb.append("    returnDate: ").append(toIndentedString(returnDate)).append("\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    cardholderParticipation: ").append(toIndentedString(cardholderParticipation)).append("\n");
    sb.append("    disputeDetails: ").append(toIndentedString(disputeDetails)).append("\n");
    sb.append("    chargebackRepresentative: ").append(toIndentedString(chargebackRepresentative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionAmount");
    openapiFields.add("type");
    openapiFields.add("deliveryDateOfGoodsOrServices");
    openapiFields.add("expectedDeliveryDateOfGoodOrServices");
    openapiFields.add("returnDate");
    openapiFields.add("cancellationDate");
    openapiFields.add("cardholderParticipation");
    openapiFields.add("disputeDetails");
    openapiFields.add("chargebackRepresentative");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CardholderDisputeChargebackDrfDocumentStructure
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardholderDisputeChargebackDrfDocumentStructure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardholderDisputeChargebackDrfDocumentStructure is not found in the empty JSON string", CardholderDisputeChargebackDrfDocumentStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardholderDisputeChargebackDrfDocumentStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardholderDisputeChargebackDrfDocumentStructure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transactionAmount") != null && !jsonObj.get("transactionAmount").isJsonNull()) && !jsonObj.get("transactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionAmount").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("deliveryDateOfGoodsOrServices") != null && !jsonObj.get("deliveryDateOfGoodsOrServices").isJsonNull()) && !jsonObj.get("deliveryDateOfGoodsOrServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryDateOfGoodsOrServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryDateOfGoodsOrServices").toString()));
      }
      if ((jsonObj.get("expectedDeliveryDateOfGoodOrServices") != null && !jsonObj.get("expectedDeliveryDateOfGoodOrServices").isJsonNull()) && !jsonObj.get("expectedDeliveryDateOfGoodOrServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedDeliveryDateOfGoodOrServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedDeliveryDateOfGoodOrServices").toString()));
      }
      if ((jsonObj.get("returnDate") != null && !jsonObj.get("returnDate").isJsonNull()) && !jsonObj.get("returnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnDate").toString()));
      }
      if ((jsonObj.get("cancellationDate") != null && !jsonObj.get("cancellationDate").isJsonNull()) && !jsonObj.get("cancellationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellationDate").toString()));
      }
      if ((jsonObj.get("disputeDetails") != null && !jsonObj.get("disputeDetails").isJsonNull()) && !jsonObj.get("disputeDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disputeDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disputeDetails").toString()));
      }
      if ((jsonObj.get("chargebackRepresentative") != null && !jsonObj.get("chargebackRepresentative").isJsonNull()) && !jsonObj.get("chargebackRepresentative").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargebackRepresentative` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargebackRepresentative").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardholderDisputeChargebackDrfDocumentStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardholderDisputeChargebackDrfDocumentStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardholderDisputeChargebackDrfDocumentStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardholderDisputeChargebackDrfDocumentStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<CardholderDisputeChargebackDrfDocumentStructure>() {
           @Override
           public void write(JsonWriter out, CardholderDisputeChargebackDrfDocumentStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardholderDisputeChargebackDrfDocumentStructure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardholderDisputeChargebackDrfDocumentStructure given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardholderDisputeChargebackDrfDocumentStructure
  * @throws IOException if the JSON string is invalid with respect to CardholderDisputeChargebackDrfDocumentStructure
  */
  public static CardholderDisputeChargebackDrfDocumentStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardholderDisputeChargebackDrfDocumentStructure.class);
  }

 /**
  * Convert an instance of CardholderDisputeChargebackDrfDocumentStructure to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

