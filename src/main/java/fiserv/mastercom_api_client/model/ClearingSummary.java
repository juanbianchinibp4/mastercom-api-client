/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ClearingSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class ClearingSummary {
  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL = "transactionAmountLocal";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL)
  private String transactionAmountLocal;

  public static final String SERIALIZED_NAME_DATE_AND_TIME_LOCAL = "dateAndTimeLocal";
  @SerializedName(SERIALIZED_NAME_DATE_AND_TIME_LOCAL)
  private String dateAndTimeLocal;

  public static final String SERIALIZED_NAME_CARD_DATA_INPUT_CAPABILITY = "cardDataInputCapability";
  @SerializedName(SERIALIZED_NAME_CARD_DATA_INPUT_CAPABILITY)
  private String cardDataInputCapability;

  public static final String SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_CAPABILITY = "cardholderAuthenticationCapability";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_CAPABILITY)
  private String cardholderAuthenticationCapability;

  public static final String SERIALIZED_NAME_CARD_PRESENT = "cardPresent";
  @SerializedName(SERIALIZED_NAME_CARD_PRESENT)
  private String cardPresent;

  public static final String SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER = "acquirerReferenceNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER)
  private String acquirerReferenceNumber;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_NAME = "cardAcceptorName";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_NAME)
  private String cardAcceptorName;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_BRAZIL = "installmentPaymentDataBrazil";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_BRAZIL)
  private String installmentPaymentDataBrazil;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_SETTLEMENT_INDICATOR = "settlementIndicator";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INDICATOR)
  private String settlementIndicator;

  public static final String SERIALIZED_NAME_MESSAGE_REVERSAL_INDICATOR = "messageReversalIndicator";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REVERSAL_INDICATOR)
  private String messageReversalIndicator;

  public ClearingSummary() {
  }

  public ClearingSummary primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Primary Account Number
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public ClearingSummary transactionAmountLocal(String transactionAmountLocal) {
    
    this.transactionAmountLocal = transactionAmountLocal;
    return this;
  }

   /**
   * Transaction amount in local currency
   * @return transactionAmountLocal
  **/
  @javax.annotation.Nullable
  public String getTransactionAmountLocal() {
    return transactionAmountLocal;
  }


  public void setTransactionAmountLocal(String transactionAmountLocal) {
    this.transactionAmountLocal = transactionAmountLocal;
  }


  public ClearingSummary dateAndTimeLocal(String dateAndTimeLocal) {
    
    this.dateAndTimeLocal = dateAndTimeLocal;
    return this;
  }

   /**
   * Local date and time of transaction.The seconds in time will always be set to 00
   * @return dateAndTimeLocal
  **/
  @javax.annotation.Nullable
  public String getDateAndTimeLocal() {
    return dateAndTimeLocal;
  }


  public void setDateAndTimeLocal(String dateAndTimeLocal) {
    this.dateAndTimeLocal = dateAndTimeLocal;
  }


  public ClearingSummary cardDataInputCapability(String cardDataInputCapability) {
    
    this.cardDataInputCapability = cardDataInputCapability;
    return this;
  }

   /**
   * Indicates the conditions that exist at the point of service at the time of the transaction
   * @return cardDataInputCapability
  **/
  @javax.annotation.Nullable
  public String getCardDataInputCapability() {
    return cardDataInputCapability;
  }


  public void setCardDataInputCapability(String cardDataInputCapability) {
    this.cardDataInputCapability = cardDataInputCapability;
  }


  public ClearingSummary cardholderAuthenticationCapability(String cardholderAuthenticationCapability) {
    
    this.cardholderAuthenticationCapability = cardholderAuthenticationCapability;
    return this;
  }

   /**
   * Describes the capability of the terminal device to support/accept authentication data
   * @return cardholderAuthenticationCapability
  **/
  @javax.annotation.Nullable
  public String getCardholderAuthenticationCapability() {
    return cardholderAuthenticationCapability;
  }


  public void setCardholderAuthenticationCapability(String cardholderAuthenticationCapability) {
    this.cardholderAuthenticationCapability = cardholderAuthenticationCapability;
  }


  public ClearingSummary cardPresent(String cardPresent) {
    
    this.cardPresent = cardPresent;
    return this;
  }

   /**
   * Indicates if the card was present or not
   * @return cardPresent
  **/
  @javax.annotation.Nullable
  public String getCardPresent() {
    return cardPresent;
  }


  public void setCardPresent(String cardPresent) {
    this.cardPresent = cardPresent;
  }


  public ClearingSummary acquirerReferenceNumber(String acquirerReferenceNumber) {
    
    this.acquirerReferenceNumber = acquirerReferenceNumber;
    return this;
  }

   /**
   * Acquirer reference number
   * @return acquirerReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerReferenceNumber() {
    return acquirerReferenceNumber;
  }


  public void setAcquirerReferenceNumber(String acquirerReferenceNumber) {
    this.acquirerReferenceNumber = acquirerReferenceNumber;
  }


  public ClearingSummary cardAcceptorName(String cardAcceptorName) {
    
    this.cardAcceptorName = cardAcceptorName;
    return this;
  }

   /**
   * Name the card acceptor that defines the point of interaction in both local and interchange environments (excluding ATM and Card-Activated Public Phones)
   * @return cardAcceptorName
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorName() {
    return cardAcceptorName;
  }


  public void setCardAcceptorName(String cardAcceptorName) {
    this.cardAcceptorName = cardAcceptorName;
  }


  public ClearingSummary currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Currency code the issuer will be charging the cardholder for repayment
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ClearingSummary installmentPaymentDataBrazil(String installmentPaymentDataBrazil) {
    
    this.installmentPaymentDataBrazil = installmentPaymentDataBrazil;
    return this;
  }

   /**
   * The field will contain installment payment data for Brazilian intracountry transactions
   * @return installmentPaymentDataBrazil
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataBrazil() {
    return installmentPaymentDataBrazil;
  }


  public void setInstallmentPaymentDataBrazil(String installmentPaymentDataBrazil) {
    this.installmentPaymentDataBrazil = installmentPaymentDataBrazil;
  }


  public ClearingSummary transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The host&#39;s identifier
   * @return transactionId
  **/
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ClearingSummary settlementIndicator(String settlementIndicator) {
    
    this.settlementIndicator = settlementIndicator;
    return this;
  }

   /**
   * Field to identify GCO and NON-GCO transactions
   * @return settlementIndicator
  **/
  @javax.annotation.Nullable
  public String getSettlementIndicator() {
    return settlementIndicator;
  }


  public void setSettlementIndicator(String settlementIndicator) {
    this.settlementIndicator = settlementIndicator;
  }


  public ClearingSummary messageReversalIndicator(String messageReversalIndicator) {
    
    this.messageReversalIndicator = messageReversalIndicator;
    return this;
  }

   /**
   * Identifies a message as a reversal of a previous message
   * @return messageReversalIndicator
  **/
  @javax.annotation.Nullable
  public String getMessageReversalIndicator() {
    return messageReversalIndicator;
  }


  public void setMessageReversalIndicator(String messageReversalIndicator) {
    this.messageReversalIndicator = messageReversalIndicator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClearingSummary clearingSummary = (ClearingSummary) o;
    return Objects.equals(this.primaryAccountNumber, clearingSummary.primaryAccountNumber) &&
        Objects.equals(this.transactionAmountLocal, clearingSummary.transactionAmountLocal) &&
        Objects.equals(this.dateAndTimeLocal, clearingSummary.dateAndTimeLocal) &&
        Objects.equals(this.cardDataInputCapability, clearingSummary.cardDataInputCapability) &&
        Objects.equals(this.cardholderAuthenticationCapability, clearingSummary.cardholderAuthenticationCapability) &&
        Objects.equals(this.cardPresent, clearingSummary.cardPresent) &&
        Objects.equals(this.acquirerReferenceNumber, clearingSummary.acquirerReferenceNumber) &&
        Objects.equals(this.cardAcceptorName, clearingSummary.cardAcceptorName) &&
        Objects.equals(this.currencyCode, clearingSummary.currencyCode) &&
        Objects.equals(this.installmentPaymentDataBrazil, clearingSummary.installmentPaymentDataBrazil) &&
        Objects.equals(this.transactionId, clearingSummary.transactionId) &&
        Objects.equals(this.settlementIndicator, clearingSummary.settlementIndicator) &&
        Objects.equals(this.messageReversalIndicator, clearingSummary.messageReversalIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryAccountNumber, transactionAmountLocal, dateAndTimeLocal, cardDataInputCapability, cardholderAuthenticationCapability, cardPresent, acquirerReferenceNumber, cardAcceptorName, currencyCode, installmentPaymentDataBrazil, transactionId, settlementIndicator, messageReversalIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearingSummary {\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    transactionAmountLocal: ").append(toIndentedString(transactionAmountLocal)).append("\n");
    sb.append("    dateAndTimeLocal: ").append(toIndentedString(dateAndTimeLocal)).append("\n");
    sb.append("    cardDataInputCapability: ").append(toIndentedString(cardDataInputCapability)).append("\n");
    sb.append("    cardholderAuthenticationCapability: ").append(toIndentedString(cardholderAuthenticationCapability)).append("\n");
    sb.append("    cardPresent: ").append(toIndentedString(cardPresent)).append("\n");
    sb.append("    acquirerReferenceNumber: ").append(toIndentedString(acquirerReferenceNumber)).append("\n");
    sb.append("    cardAcceptorName: ").append(toIndentedString(cardAcceptorName)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    installmentPaymentDataBrazil: ").append(toIndentedString(installmentPaymentDataBrazil)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    settlementIndicator: ").append(toIndentedString(settlementIndicator)).append("\n");
    sb.append("    messageReversalIndicator: ").append(toIndentedString(messageReversalIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("transactionAmountLocal");
    openapiFields.add("dateAndTimeLocal");
    openapiFields.add("cardDataInputCapability");
    openapiFields.add("cardholderAuthenticationCapability");
    openapiFields.add("cardPresent");
    openapiFields.add("acquirerReferenceNumber");
    openapiFields.add("cardAcceptorName");
    openapiFields.add("currencyCode");
    openapiFields.add("installmentPaymentDataBrazil");
    openapiFields.add("transactionId");
    openapiFields.add("settlementIndicator");
    openapiFields.add("messageReversalIndicator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClearingSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClearingSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClearingSummary is not found in the empty JSON string", ClearingSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClearingSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClearingSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("primaryAccountNumber") != null && !jsonObj.get("primaryAccountNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if ((jsonObj.get("transactionAmountLocal") != null && !jsonObj.get("transactionAmountLocal").isJsonNull()) && !jsonObj.get("transactionAmountLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionAmountLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionAmountLocal").toString()));
      }
      if ((jsonObj.get("dateAndTimeLocal") != null && !jsonObj.get("dateAndTimeLocal").isJsonNull()) && !jsonObj.get("dateAndTimeLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateAndTimeLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateAndTimeLocal").toString()));
      }
      if ((jsonObj.get("cardDataInputCapability") != null && !jsonObj.get("cardDataInputCapability").isJsonNull()) && !jsonObj.get("cardDataInputCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDataInputCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDataInputCapability").toString()));
      }
      if ((jsonObj.get("cardholderAuthenticationCapability") != null && !jsonObj.get("cardholderAuthenticationCapability").isJsonNull()) && !jsonObj.get("cardholderAuthenticationCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderAuthenticationCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderAuthenticationCapability").toString()));
      }
      if ((jsonObj.get("cardPresent") != null && !jsonObj.get("cardPresent").isJsonNull()) && !jsonObj.get("cardPresent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardPresent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardPresent").toString()));
      }
      if ((jsonObj.get("acquirerReferenceNumber") != null && !jsonObj.get("acquirerReferenceNumber").isJsonNull()) && !jsonObj.get("acquirerReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerReferenceNumber").toString()));
      }
      if ((jsonObj.get("cardAcceptorName") != null && !jsonObj.get("cardAcceptorName").isJsonNull()) && !jsonObj.get("cardAcceptorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorName").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataBrazil") != null && !jsonObj.get("installmentPaymentDataBrazil").isJsonNull()) && !jsonObj.get("installmentPaymentDataBrazil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataBrazil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataBrazil").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("settlementIndicator") != null && !jsonObj.get("settlementIndicator").isJsonNull()) && !jsonObj.get("settlementIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementIndicator").toString()));
      }
      if ((jsonObj.get("messageReversalIndicator") != null && !jsonObj.get("messageReversalIndicator").isJsonNull()) && !jsonObj.get("messageReversalIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageReversalIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageReversalIndicator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClearingSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClearingSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClearingSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClearingSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ClearingSummary>() {
           @Override
           public void write(JsonWriter out, ClearingSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClearingSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClearingSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClearingSummary
  * @throws IOException if the JSON string is invalid with respect to ClearingSummary
  */
  public static ClearingSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClearingSummary.class);
  }

 /**
  * Convert an instance of ClearingSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

