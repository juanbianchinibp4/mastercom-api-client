/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CaseFilingRespHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CaseFilingRespHistory {
  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_RESPONSE_DATE = "responseDate";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DATE)
  private String responseDate;

  public CaseFilingRespHistory() {
  }

  public CaseFilingRespHistory memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Memo pertaining to the case
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public CaseFilingRespHistory action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action taken by party.   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY
   * @return action
  **/
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public CaseFilingRespHistory responseDate(String responseDate) {
    
    this.responseDate = responseDate;
    return this;
  }

   /**
   * The date and the response was provided
   * @return responseDate
  **/
  @javax.annotation.Nullable
  public String getResponseDate() {
    return responseDate;
  }


  public void setResponseDate(String responseDate) {
    this.responseDate = responseDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseFilingRespHistory caseFilingRespHistory = (CaseFilingRespHistory) o;
    return Objects.equals(this.memo, caseFilingRespHistory.memo) &&
        Objects.equals(this.action, caseFilingRespHistory.action) &&
        Objects.equals(this.responseDate, caseFilingRespHistory.responseDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memo, action, responseDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseFilingRespHistory {\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    responseDate: ").append(toIndentedString(responseDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memo");
    openapiFields.add("action");
    openapiFields.add("responseDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CaseFilingRespHistory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaseFilingRespHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaseFilingRespHistory is not found in the empty JSON string", CaseFilingRespHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaseFilingRespHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaseFilingRespHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("responseDate") != null && !jsonObj.get("responseDate").isJsonNull()) && !jsonObj.get("responseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaseFilingRespHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaseFilingRespHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaseFilingRespHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaseFilingRespHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<CaseFilingRespHistory>() {
           @Override
           public void write(JsonWriter out, CaseFilingRespHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaseFilingRespHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaseFilingRespHistory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaseFilingRespHistory
  * @throws IOException if the JSON string is invalid with respect to CaseFilingRespHistory
  */
  public static CaseFilingRespHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaseFilingRespHistory.class);
  }

 /**
  * Convert an instance of CaseFilingRespHistory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

