/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SingleMessageSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class SingleMessageSummary {
  public static final String SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER = "acquirerReferenceNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER)
  private String acquirerReferenceNumber;

  public static final String SERIALIZED_NAME_ADVICE_REASON_CODE = "adviceReasonCode";
  @SerializedName(SERIALIZED_NAME_ADVICE_REASON_CODE)
  private String adviceReasonCode;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_LOCAL_CURRENCY_CODE = "localCurrencyCode";
  @SerializedName(SERIALIZED_NAME_LOCAL_CURRENCY_CODE)
  private String localCurrencyCode;

  public static final String SERIALIZED_NAME_LOCAL_REQUESTED_AMOUNT = "localRequestedAmount";
  @SerializedName(SERIALIZED_NAME_LOCAL_REQUESTED_AMOUNT)
  private String localRequestedAmount;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_TYPE = "merchantType";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TYPE)
  private String merchantType;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_PROCESSING_CODE = "processingCode";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CODE)
  private String processingCode;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private String responseCode;

  public static final String SERIALIZED_NAME_RESPONSE_SOURCE = "responseSource";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SOURCE)
  private String responseSource;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_SWITCH_SERIAL_NUMBER = "switchSerialNumber";
  @SerializedName(SERIALIZED_NAME_SWITCH_SERIAL_NUMBER)
  private String switchSerialNumber;

  public static final String SERIALIZED_NAME_SWITCH_DATE_TIME = "switchDateTime";
  @SerializedName(SERIALIZED_NAME_SWITCH_DATE_TIME)
  private String switchDateTime;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private String trace;

  public static final String SERIALIZED_NAME_TRAN_TYPE = "tranType";
  @SerializedName(SERIALIZED_NAME_TRAN_TYPE)
  private String tranType;

  public SingleMessageSummary() {
  }

  public SingleMessageSummary acquirerReferenceNumber(String acquirerReferenceNumber) {
    
    this.acquirerReferenceNumber = acquirerReferenceNumber;
    return this;
  }

   /**
   * Contains the acquirers reference number.
   * @return acquirerReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerReferenceNumber() {
    return acquirerReferenceNumber;
  }


  public void setAcquirerReferenceNumber(String acquirerReferenceNumber) {
    this.acquirerReferenceNumber = acquirerReferenceNumber;
  }


  public SingleMessageSummary adviceReasonCode(String adviceReasonCode) {
    
    this.adviceReasonCode = adviceReasonCode;
    return this;
  }

   /**
   * Used to inform processors an action has been taken on the advice messages. 
   * @return adviceReasonCode
  **/
  @javax.annotation.Nullable
  public String getAdviceReasonCode() {
    return adviceReasonCode;
  }


  public void setAdviceReasonCode(String adviceReasonCode) {
    this.adviceReasonCode = adviceReasonCode;
  }


  public SingleMessageSummary brand(String brand) {
    
    this.brand = brand;
    return this;
  }

   /**
   * The brand of service or program.  Acceptable values...MC - Mastercard, CI - Cirrus®, MS - Maestro®, MD - Debit Mastercard ®card, PL - Plus®, PV(L) - Private Label, VI - VISA
   * @return brand
  **/
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }


  public void setBrand(String brand) {
    this.brand = brand;
  }


  public SingleMessageSummary localCurrencyCode(String localCurrencyCode) {
    
    this.localCurrencyCode = localCurrencyCode;
    return this;
  }

   /**
   * The code defining the currency of the transaction as it was submitted to the Single Message System. The Single Message System uses it to specify the currency used in localRequestedAmount
   * @return localCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getLocalCurrencyCode() {
    return localCurrencyCode;
  }


  public void setLocalCurrencyCode(String localCurrencyCode) {
    this.localCurrencyCode = localCurrencyCode;
  }


  public SingleMessageSummary localRequestedAmount(String localRequestedAmount) {
    
    this.localRequestedAmount = localRequestedAmount;
    return this;
  }

   /**
   * The amount of funds requested by the cardholder in the local currency of the acquirer or source location of the transaction.
   * @return localRequestedAmount
  **/
  @javax.annotation.Nullable
  public String getLocalRequestedAmount() {
    return localRequestedAmount;
  }


  public void setLocalRequestedAmount(String localRequestedAmount) {
    this.localRequestedAmount = localRequestedAmount;
  }


  public SingleMessageSummary merchantName(String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * For POS acquirers this is the name of the merchant owning the POS terminal. For ATM acquirers this the ATM owning institution name.
   * @return merchantName
  **/
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public SingleMessageSummary merchantType(String merchantType) {
    
    this.merchantType = merchantType;
    return this;
  }

   /**
   * Card Acceptor Business Code. Identifies the card acceptor’s primary business.
   * @return merchantType
  **/
  @javax.annotation.Nullable
  public String getMerchantType() {
    return merchantType;
  }


  public void setMerchantType(String merchantType) {
    this.merchantType = merchantType;
  }


  public SingleMessageSummary primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Series of digits used to identify a customer account or relationship.
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public SingleMessageSummary processingCode(String processingCode) {
    
    this.processingCode = processingCode;
    return this;
  }

   /**
   * Series of digits used to describe the effect of a transaction on the customer account and the type of accounts affected.
   * @return processingCode
  **/
  @javax.annotation.Nullable
  public String getProcessingCode() {
    return processingCode;
  }


  public void setProcessingCode(String processingCode) {
    this.processingCode = processingCode;
  }


  public SingleMessageSummary responseCode(String responseCode) {
    
    this.responseCode = responseCode;
    return this;
  }

   /**
   * This field displays the disposition of a message.
   * @return responseCode
  **/
  @javax.annotation.Nullable
  public String getResponseCode() {
    return responseCode;
  }


  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }


  public SingleMessageSummary responseSource(String responseSource) {
    
    this.responseSource = responseSource;
    return this;
  }

   /**
   * M &#x3D; The decline was initiated by the member/issuer, S &#x3D; The decline was initiated by the Single Message System.
   * @return responseSource
  **/
  @javax.annotation.Nullable
  public String getResponseSource() {
    return responseSource;
  }


  public void setResponseSource(String responseSource) {
    this.responseSource = responseSource;
  }


  public SingleMessageSummary settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Date Mastercard uses to group the transactions for reporting and for subsequent settlement: Format: MMDDYY
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public SingleMessageSummary switchSerialNumber(String switchSerialNumber) {
    
    this.switchSerialNumber = switchSerialNumber;
    return this;
  }

   /**
   * Describes a unique transaction identification number generated (or assigned) by the Single Message System
   * @return switchSerialNumber
  **/
  @javax.annotation.Nullable
  public String getSwitchSerialNumber() {
    return switchSerialNumber;
  }


  public void setSwitchSerialNumber(String switchSerialNumber) {
    this.switchSerialNumber = switchSerialNumber;
  }


  public SingleMessageSummary switchDateTime(String switchDateTime) {
    
    this.switchDateTime = switchDateTime;
    return this;
  }

   /**
   * Date and time Mastercard routes the transaction to the issuer  (MMDDHHMMSS)
   * @return switchDateTime
  **/
  @javax.annotation.Nullable
  public String getSwitchDateTime() {
    return switchDateTime;
  }


  public void setSwitchDateTime(String switchDateTime) {
    this.switchDateTime = switchDateTime;
  }


  public SingleMessageSummary trace(String trace) {
    
    this.trace = trace;
    return this;
  }

   /**
   * Unique identifier assigned to each transaction by the originator of the message
   * @return trace
  **/
  @javax.annotation.Nullable
  public String getTrace() {
    return trace;
  }


  public void setTrace(String trace) {
    this.trace = trace;
  }


  public SingleMessageSummary tranType(String tranType) {
    
    this.tranType = tranType;
    return this;
  }

   /**
   * Tran Type
   * @return tranType
  **/
  @javax.annotation.Nullable
  public String getTranType() {
    return tranType;
  }


  public void setTranType(String tranType) {
    this.tranType = tranType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleMessageSummary singleMessageSummary = (SingleMessageSummary) o;
    return Objects.equals(this.acquirerReferenceNumber, singleMessageSummary.acquirerReferenceNumber) &&
        Objects.equals(this.adviceReasonCode, singleMessageSummary.adviceReasonCode) &&
        Objects.equals(this.brand, singleMessageSummary.brand) &&
        Objects.equals(this.localCurrencyCode, singleMessageSummary.localCurrencyCode) &&
        Objects.equals(this.localRequestedAmount, singleMessageSummary.localRequestedAmount) &&
        Objects.equals(this.merchantName, singleMessageSummary.merchantName) &&
        Objects.equals(this.merchantType, singleMessageSummary.merchantType) &&
        Objects.equals(this.primaryAccountNumber, singleMessageSummary.primaryAccountNumber) &&
        Objects.equals(this.processingCode, singleMessageSummary.processingCode) &&
        Objects.equals(this.responseCode, singleMessageSummary.responseCode) &&
        Objects.equals(this.responseSource, singleMessageSummary.responseSource) &&
        Objects.equals(this.settlementDate, singleMessageSummary.settlementDate) &&
        Objects.equals(this.switchSerialNumber, singleMessageSummary.switchSerialNumber) &&
        Objects.equals(this.switchDateTime, singleMessageSummary.switchDateTime) &&
        Objects.equals(this.trace, singleMessageSummary.trace) &&
        Objects.equals(this.tranType, singleMessageSummary.tranType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerReferenceNumber, adviceReasonCode, brand, localCurrencyCode, localRequestedAmount, merchantName, merchantType, primaryAccountNumber, processingCode, responseCode, responseSource, settlementDate, switchSerialNumber, switchDateTime, trace, tranType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleMessageSummary {\n");
    sb.append("    acquirerReferenceNumber: ").append(toIndentedString(acquirerReferenceNumber)).append("\n");
    sb.append("    adviceReasonCode: ").append(toIndentedString(adviceReasonCode)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    localCurrencyCode: ").append(toIndentedString(localCurrencyCode)).append("\n");
    sb.append("    localRequestedAmount: ").append(toIndentedString(localRequestedAmount)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantType: ").append(toIndentedString(merchantType)).append("\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    processingCode: ").append(toIndentedString(processingCode)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseSource: ").append(toIndentedString(responseSource)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    switchSerialNumber: ").append(toIndentedString(switchSerialNumber)).append("\n");
    sb.append("    switchDateTime: ").append(toIndentedString(switchDateTime)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    tranType: ").append(toIndentedString(tranType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirerReferenceNumber");
    openapiFields.add("adviceReasonCode");
    openapiFields.add("brand");
    openapiFields.add("localCurrencyCode");
    openapiFields.add("localRequestedAmount");
    openapiFields.add("merchantName");
    openapiFields.add("merchantType");
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("processingCode");
    openapiFields.add("responseCode");
    openapiFields.add("responseSource");
    openapiFields.add("settlementDate");
    openapiFields.add("switchSerialNumber");
    openapiFields.add("switchDateTime");
    openapiFields.add("trace");
    openapiFields.add("tranType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SingleMessageSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleMessageSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleMessageSummary is not found in the empty JSON string", SingleMessageSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleMessageSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleMessageSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirerReferenceNumber") != null && !jsonObj.get("acquirerReferenceNumber").isJsonNull()) && !jsonObj.get("acquirerReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerReferenceNumber").toString()));
      }
      if ((jsonObj.get("adviceReasonCode") != null && !jsonObj.get("adviceReasonCode").isJsonNull()) && !jsonObj.get("adviceReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adviceReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adviceReasonCode").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("localCurrencyCode") != null && !jsonObj.get("localCurrencyCode").isJsonNull()) && !jsonObj.get("localCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localCurrencyCode").toString()));
      }
      if ((jsonObj.get("localRequestedAmount") != null && !jsonObj.get("localRequestedAmount").isJsonNull()) && !jsonObj.get("localRequestedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localRequestedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localRequestedAmount").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if ((jsonObj.get("merchantType") != null && !jsonObj.get("merchantType").isJsonNull()) && !jsonObj.get("merchantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantType").toString()));
      }
      if ((jsonObj.get("primaryAccountNumber") != null && !jsonObj.get("primaryAccountNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if ((jsonObj.get("processingCode") != null && !jsonObj.get("processingCode").isJsonNull()) && !jsonObj.get("processingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingCode").toString()));
      }
      if ((jsonObj.get("responseCode") != null && !jsonObj.get("responseCode").isJsonNull()) && !jsonObj.get("responseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCode").toString()));
      }
      if ((jsonObj.get("responseSource") != null && !jsonObj.get("responseSource").isJsonNull()) && !jsonObj.get("responseSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseSource").toString()));
      }
      if ((jsonObj.get("settlementDate") != null && !jsonObj.get("settlementDate").isJsonNull()) && !jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if ((jsonObj.get("switchSerialNumber") != null && !jsonObj.get("switchSerialNumber").isJsonNull()) && !jsonObj.get("switchSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchSerialNumber").toString()));
      }
      if ((jsonObj.get("switchDateTime") != null && !jsonObj.get("switchDateTime").isJsonNull()) && !jsonObj.get("switchDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchDateTime").toString()));
      }
      if ((jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull()) && !jsonObj.get("trace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace").toString()));
      }
      if ((jsonObj.get("tranType") != null && !jsonObj.get("tranType").isJsonNull()) && !jsonObj.get("tranType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tranType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleMessageSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleMessageSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleMessageSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleMessageSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleMessageSummary>() {
           @Override
           public void write(JsonWriter out, SingleMessageSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleMessageSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SingleMessageSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SingleMessageSummary
  * @throws IOException if the JSON string is invalid with respect to SingleMessageSummary
  */
  public static SingleMessageSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleMessageSummary.class);
  }

 /**
  * Convert an instance of SingleMessageSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

