/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * LoadDataForFeeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class LoadDataForFeeResponse {
  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<CurrenciesNameValueDetail> currencies;

  public static final String SERIALIZED_NAME_REASON_CODES = "reasonCodes";
  @SerializedName(SERIALIZED_NAME_REASON_CODES)
  private List<FeeReasonCodesNameValueDetail> reasonCodes;

  public static final String SERIALIZED_NAME_COUNTRY_CODES = "countryCodes";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODES)
  private List<FeeCountryCodesNameValueDetail> countryCodes;

  public static final String SERIALIZED_NAME_MESSAGE_TEXTS = "messageTexts";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEXTS)
  private List<FeeMessageTextsNameValueDetail> messageTexts;

  public LoadDataForFeeResponse() {
  }

  public LoadDataForFeeResponse currencies(List<CurrenciesNameValueDetail> currencies) {
    
    this.currencies = currencies;
    return this;
  }

  public LoadDataForFeeResponse addCurrenciesItem(CurrenciesNameValueDetail currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

   /**
   * List of valid currencies
   * @return currencies
  **/
  @javax.annotation.Nullable
  public List<CurrenciesNameValueDetail> getCurrencies() {
    return currencies;
  }


  public void setCurrencies(List<CurrenciesNameValueDetail> currencies) {
    this.currencies = currencies;
  }


  public LoadDataForFeeResponse reasonCodes(List<FeeReasonCodesNameValueDetail> reasonCodes) {
    
    this.reasonCodes = reasonCodes;
    return this;
  }

  public LoadDataForFeeResponse addReasonCodesItem(FeeReasonCodesNameValueDetail reasonCodesItem) {
    if (this.reasonCodes == null) {
      this.reasonCodes = new ArrayList<>();
    }
    this.reasonCodes.add(reasonCodesItem);
    return this;
  }

   /**
   * List of valid reason codes
   * @return reasonCodes
  **/
  @javax.annotation.Nullable
  public List<FeeReasonCodesNameValueDetail> getReasonCodes() {
    return reasonCodes;
  }


  public void setReasonCodes(List<FeeReasonCodesNameValueDetail> reasonCodes) {
    this.reasonCodes = reasonCodes;
  }


  public LoadDataForFeeResponse countryCodes(List<FeeCountryCodesNameValueDetail> countryCodes) {
    
    this.countryCodes = countryCodes;
    return this;
  }

  public LoadDataForFeeResponse addCountryCodesItem(FeeCountryCodesNameValueDetail countryCodesItem) {
    if (this.countryCodes == null) {
      this.countryCodes = new ArrayList<>();
    }
    this.countryCodes.add(countryCodesItem);
    return this;
  }

   /**
   * List of valid country codes
   * @return countryCodes
  **/
  @javax.annotation.Nullable
  public List<FeeCountryCodesNameValueDetail> getCountryCodes() {
    return countryCodes;
  }


  public void setCountryCodes(List<FeeCountryCodesNameValueDetail> countryCodes) {
    this.countryCodes = countryCodes;
  }


  public LoadDataForFeeResponse messageTexts(List<FeeMessageTextsNameValueDetail> messageTexts) {
    
    this.messageTexts = messageTexts;
    return this;
  }

  public LoadDataForFeeResponse addMessageTextsItem(FeeMessageTextsNameValueDetail messageTextsItem) {
    if (this.messageTexts == null) {
      this.messageTexts = new ArrayList<>();
    }
    this.messageTexts.add(messageTextsItem);
    return this;
  }

   /**
   * List of valid message texts
   * @return messageTexts
  **/
  @javax.annotation.Nullable
  public List<FeeMessageTextsNameValueDetail> getMessageTexts() {
    return messageTexts;
  }


  public void setMessageTexts(List<FeeMessageTextsNameValueDetail> messageTexts) {
    this.messageTexts = messageTexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadDataForFeeResponse loadDataForFeeResponse = (LoadDataForFeeResponse) o;
    return Objects.equals(this.currencies, loadDataForFeeResponse.currencies) &&
        Objects.equals(this.reasonCodes, loadDataForFeeResponse.reasonCodes) &&
        Objects.equals(this.countryCodes, loadDataForFeeResponse.countryCodes) &&
        Objects.equals(this.messageTexts, loadDataForFeeResponse.messageTexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencies, reasonCodes, countryCodes, messageTexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadDataForFeeResponse {\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    reasonCodes: ").append(toIndentedString(reasonCodes)).append("\n");
    sb.append("    countryCodes: ").append(toIndentedString(countryCodes)).append("\n");
    sb.append("    messageTexts: ").append(toIndentedString(messageTexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencies");
    openapiFields.add("reasonCodes");
    openapiFields.add("countryCodes");
    openapiFields.add("messageTexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadDataForFeeResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadDataForFeeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadDataForFeeResponse is not found in the empty JSON string", LoadDataForFeeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadDataForFeeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadDataForFeeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull()) {
        JsonArray jsonArraycurrencies = jsonObj.getAsJsonArray("currencies");
        if (jsonArraycurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
          }

          // validate the optional field `currencies` (array)
          for (int i = 0; i < jsonArraycurrencies.size(); i++) {
            CurrenciesNameValueDetail.validateJsonElement(jsonArraycurrencies.get(i));
          };
        }
      }
      if (jsonObj.get("reasonCodes") != null && !jsonObj.get("reasonCodes").isJsonNull()) {
        JsonArray jsonArrayreasonCodes = jsonObj.getAsJsonArray("reasonCodes");
        if (jsonArrayreasonCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reasonCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reasonCodes` to be an array in the JSON string but got `%s`", jsonObj.get("reasonCodes").toString()));
          }

          // validate the optional field `reasonCodes` (array)
          for (int i = 0; i < jsonArrayreasonCodes.size(); i++) {
            FeeReasonCodesNameValueDetail.validateJsonElement(jsonArrayreasonCodes.get(i));
          };
        }
      }
      if (jsonObj.get("countryCodes") != null && !jsonObj.get("countryCodes").isJsonNull()) {
        JsonArray jsonArraycountryCodes = jsonObj.getAsJsonArray("countryCodes");
        if (jsonArraycountryCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countryCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countryCodes` to be an array in the JSON string but got `%s`", jsonObj.get("countryCodes").toString()));
          }

          // validate the optional field `countryCodes` (array)
          for (int i = 0; i < jsonArraycountryCodes.size(); i++) {
            FeeCountryCodesNameValueDetail.validateJsonElement(jsonArraycountryCodes.get(i));
          };
        }
      }
      if (jsonObj.get("messageTexts") != null && !jsonObj.get("messageTexts").isJsonNull()) {
        JsonArray jsonArraymessageTexts = jsonObj.getAsJsonArray("messageTexts");
        if (jsonArraymessageTexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messageTexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messageTexts` to be an array in the JSON string but got `%s`", jsonObj.get("messageTexts").toString()));
          }

          // validate the optional field `messageTexts` (array)
          for (int i = 0; i < jsonArraymessageTexts.size(); i++) {
            FeeMessageTextsNameValueDetail.validateJsonElement(jsonArraymessageTexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadDataForFeeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadDataForFeeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadDataForFeeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadDataForFeeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadDataForFeeResponse>() {
           @Override
           public void write(JsonWriter out, LoadDataForFeeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadDataForFeeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadDataForFeeResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadDataForFeeResponse
  * @throws IOException if the JSON string is invalid with respect to LoadDataForFeeResponse
  */
  public static LoadDataForFeeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadDataForFeeResponse.class);
  }

 /**
  * Convert an instance of LoadDataForFeeResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

