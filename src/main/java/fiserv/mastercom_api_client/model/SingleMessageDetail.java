/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SingleMessageDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class SingleMessageDetail {
  public static final String SERIALIZED_NAME_ACQ_LOC_CNTRY = "acqLocCntry";
  @SerializedName(SERIALIZED_NAME_ACQ_LOC_CNTRY)
  private String acqLocCntry;

  public static final String SERIALIZED_NAME_ACQUIRER_ADDRESS = "acquirerAddress";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADDRESS)
  private String acquirerAddress;

  public static final String SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_AMOUNT = "acquirerAdjustmentSettlementAmount";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_AMOUNT)
  private String acquirerAdjustmentSettlementAmount;

  public static final String SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_AMOUNT_INDICATOR = "acquirerAdjustmentSettlementAmountIndicator";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_AMOUNT_INDICATOR)
  private String acquirerAdjustmentSettlementAmountIndicator;

  public static final String SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_COMPLETION_AMOUNT = "acquirerAdjustmentSettlementCompletionAmount";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_COMPLETION_AMOUNT)
  private String acquirerAdjustmentSettlementCompletionAmount;

  public static final String SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_CURRENCY = "acquirerAdjustmentSettlementCurrency";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADJUSTMENT_SETTLEMENT_CURRENCY)
  private String acquirerAdjustmentSettlementCurrency;

  public static final String SERIALIZED_NAME_ACQUIRER_ADVICE_REASON = "acquirerAdviceReason";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_ADVICE_REASON)
  private String acquirerAdviceReason;

  public static final String SERIALIZED_NAME_ACQUIRER_BRIDGED_I_C_A = "acquirerBridgedICA";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_BRIDGED_I_C_A)
  private String acquirerBridgedICA;

  public static final String SERIALIZED_NAME_ACQUIRER_CITY = "acquirerCity";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_CITY)
  private String acquirerCity;

  public static final String SERIALIZED_NAME_ACQUIRER_CURRENCY_CONVERSION_RATE = "acquirerCurrencyConversionRate";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_CURRENCY_CONVERSION_RATE)
  private String acquirerCurrencyConversionRate;

  public static final String SERIALIZED_NAME_ACQUIRER_INSTITUTION_NUMBER = "acquirerInstitutionNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_INSTITUTION_NUMBER)
  private String acquirerInstitutionNumber;

  public static final String SERIALIZED_NAME_ACQUIRER_INTERCHANGE_AMOUNT = "acquirerInterchangeAmount";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_INTERCHANGE_AMOUNT)
  private String acquirerInterchangeAmount;

  public static final String SERIALIZED_NAME_ACQUIRER_INTERCHANGE_CURRENCY = "acquirerInterchangeCurrency";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_INTERCHANGE_CURRENCY)
  private String acquirerInterchangeCurrency;

  public static final String SERIALIZED_NAME_ACQUIRER_NAME = "acquirerName";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_NAME)
  private String acquirerName;

  public static final String SERIALIZED_NAME_ACQUIRER_PROCESSOR_I_D = "acquirerProcessorID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_PROCESSOR_I_D)
  private String acquirerProcessorID;

  public static final String SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER = "acquirerReferenceNumber";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REFERENCE_NUMBER)
  private String acquirerReferenceNumber;

  public static final String SERIALIZED_NAME_ACQUIRER_SETTLEMENT_COMPLETION_AMOUNT = "acquirerSettlementCompletionAmount";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_SETTLEMENT_COMPLETION_AMOUNT)
  private String acquirerSettlementCompletionAmount;

  public static final String SERIALIZED_NAME_ACQUIRER_SETTLEMENT_COMPLETION_CURRENCY = "acquirerSettlementCompletionCurrency";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_SETTLEMENT_COMPLETION_CURRENCY)
  private String acquirerSettlementCompletionCurrency;

  public static final String SERIALIZED_NAME_ACQUIRER_SETTLEMENT_CONVERSION_RATE = "acquirerSettlementConversionRate";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_SETTLEMENT_CONVERSION_RATE)
  private String acquirerSettlementConversionRate;

  public static final String SERIALIZED_NAME_ADDITIONAL_ADVICE = "additionalAdvice";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ADVICE)
  private String additionalAdvice;

  public static final String SERIALIZED_NAME_ADDITIONAL_P_O_S_DATA = "additionalPOSData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_P_O_S_DATA)
  private String additionalPOSData;

  public static final String SERIALIZED_NAME_ADDITIONAL_RESPONSE = "additionalResponse";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RESPONSE)
  private String additionalResponse;

  public static final String SERIALIZED_NAME_ADJUSTMENT_ADVICE_REASON = "adjustmentAdviceReason";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_ADVICE_REASON)
  private String adjustmentAdviceReason;

  public static final String SERIALIZED_NAME_ADJUSTMENT_CASHBACK_AMOUNT = "adjustmentCashbackAmount";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_CASHBACK_AMOUNT)
  private String adjustmentCashbackAmount;

  public static final String SERIALIZED_NAME_ADJUSTMENT_DATE = "adjustmentDate";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_DATE)
  private String adjustmentDate;

  public static final String SERIALIZED_NAME_ADJUSTMENT_PURCHASE_AMOUNT = "adjustmentPurchaseAmount";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_PURCHASE_AMOUNT)
  private String adjustmentPurchaseAmount;

  public static final String SERIALIZED_NAME_AFA_MEMBER = "afaMember";
  @SerializedName(SERIALIZED_NAME_AFA_MEMBER)
  private String afaMember;

  public static final String SERIALIZED_NAME_ALTERNATE_PRIMARY_ACCOUNT_NUMBER = "alternatePrimaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_PRIMARY_ACCOUNT_NUMBER)
  private String alternatePrimaryAccountNumber;

  public static final String SERIALIZED_NAME_AMOUNT_I_C_C_R = "amountICCR";
  @SerializedName(SERIALIZED_NAME_AMOUNT_I_C_C_R)
  private String amountICCR;

  public static final String SERIALIZED_NAME_ATM_POS_FLAG = "atmPosFlag";
  @SerializedName(SERIALIZED_NAME_ATM_POS_FLAG)
  private String atmPosFlag;

  public static final String SERIALIZED_NAME_BANKNET_REFERENCE_NUMBER = "banknetReferenceNumber";
  @SerializedName(SERIALIZED_NAME_BANKNET_REFERENCE_NUMBER)
  private String banknetReferenceNumber;

  public static final String SERIALIZED_NAME_BRIDGING_I_C_A = "bridgingICA";
  @SerializedName(SERIALIZED_NAME_BRIDGING_I_C_A)
  private String bridgingICA;

  public static final String SERIALIZED_NAME_BUSINESS_ACTIVITY = "businessActivity";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ACTIVITY)
  private String businessActivity;

  public static final String SERIALIZED_NAME_CASH_BACK_AMOUNT = "cashBackAmount";
  @SerializedName(SERIALIZED_NAME_CASH_BACK_AMOUNT)
  private String cashBackAmount;

  public static final String SERIALIZED_NAME_CASH_BACK_CURRENCY = "cashBackCurrency";
  @SerializedName(SERIALIZED_NAME_CASH_BACK_CURRENCY)
  private String cashBackCurrency;

  public static final String SERIALIZED_NAME_CAT_LEVEL = "catLevel";
  @SerializedName(SERIALIZED_NAME_CAT_LEVEL)
  private String catLevel;

  public static final String SERIALIZED_NAME_CCCA_ISSUER_BANK_NAME = "cccaIssuerBankName";
  @SerializedName(SERIALIZED_NAME_CCCA_ISSUER_BANK_NAME)
  private String cccaIssuerBankName;

  public static final String SERIALIZED_NAME_CHIP_FLAG = "chipFlag";
  @SerializedName(SERIALIZED_NAME_CHIP_FLAG)
  private String chipFlag;

  public static final String SERIALIZED_NAME_CONDITION_CODE = "conditionCode";
  @SerializedName(SERIALIZED_NAME_CONDITION_CODE)
  private String conditionCode;

  public static final String SERIALIZED_NAME_CORPORATE_CARD_INDICATOR = "corporateCardIndicator";
  @SerializedName(SERIALIZED_NAME_CORPORATE_CARD_INDICATOR)
  private String corporateCardIndicator;

  public static final String SERIALIZED_NAME_CREDIT_LINE_USAGE_FEE = "creditLineUsageFee";
  @SerializedName(SERIALIZED_NAME_CREDIT_LINE_USAGE_FEE)
  private String creditLineUsageFee;

  public static final String SERIALIZED_NAME_CROSS_BORDER_INDICATOR = "crossBorderIndicator";
  @SerializedName(SERIALIZED_NAME_CROSS_BORDER_INDICATOR)
  private String crossBorderIndicator;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESEMENT_AMOUNT = "currencyConversionAssesementAmount";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESEMENT_AMOUNT)
  private String currencyConversionAssesementAmount;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESEMENT_CURRENCY = "currencyConversionAssesementCurrency";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESEMENT_CURRENCY)
  private String currencyConversionAssesementCurrency;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_INDICATOR = "currencyConversionIndicator";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_INDICATOR)
  private String currencyConversionIndicator;

  public static final String SERIALIZED_NAME_CVC2_PROGRAM_VALIDATION_CODE = "cvc2ProgramValidationCode";
  @SerializedName(SERIALIZED_NAME_CVC2_PROGRAM_VALIDATION_CODE)
  private String cvc2ProgramValidationCode;

  public static final String SERIALIZED_NAME_DOCUMENT_INDICATOR = "documentIndicator";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INDICATOR)
  private String documentIndicator;

  public static final String SERIALIZED_NAME_FEES_INTER_CHG_ACQ_LOC = "feesInterChgAcqLoc";
  @SerializedName(SERIALIZED_NAME_FEES_INTER_CHG_ACQ_LOC)
  private String feesInterChgAcqLoc;

  public static final String SERIALIZED_NAME_FINANCIAL_INSTITUTION_I_D = "financialInstitutionID";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_INSTITUTION_I_D)
  private String financialInstitutionID;

  public static final String SERIALIZED_NAME_FRAUD_DATE = "fraudDate";
  @SerializedName(SERIALIZED_NAME_FRAUD_DATE)
  private String fraudDate;

  public static final String SERIALIZED_NAME_FRAUD_DEVICE_TYPE = "fraudDeviceType";
  @SerializedName(SERIALIZED_NAME_FRAUD_DEVICE_TYPE)
  private String fraudDeviceType;

  public static final String SERIALIZED_NAME_FRAUD_TYPE = "fraudType";
  @SerializedName(SERIALIZED_NAME_FRAUD_TYPE)
  private String fraudType;

  public static final String SERIALIZED_NAME_GCMS_ADVICE_CODE = "gcmsAdviceCode";
  @SerializedName(SERIALIZED_NAME_GCMS_ADVICE_CODE)
  private String gcmsAdviceCode;

  public static final String SERIALIZED_NAME_GCMS_SETTLEMENT_DATE = "gcmsSettlementDate";
  @SerializedName(SERIALIZED_NAME_GCMS_SETTLEMENT_DATE)
  private String gcmsSettlementDate;

  public static final String SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_AMOUNT = "issuerAdjustmentSettlementAmount";
  @SerializedName(SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_AMOUNT)
  private String issuerAdjustmentSettlementAmount;

  public static final String SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_AMOUNT_INDICATOR = "issuerAdjustmentSettlementAmountIndicator";
  @SerializedName(SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_AMOUNT_INDICATOR)
  private String issuerAdjustmentSettlementAmountIndicator;

  public static final String SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_COMPLETION_AMOUNT = "issuerAdjustmentSettlementCompletionAmount";
  @SerializedName(SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_COMPLETION_AMOUNT)
  private String issuerAdjustmentSettlementCompletionAmount;

  public static final String SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_CURRENCY = "issuerAdjustmentSettlementCurrency";
  @SerializedName(SERIALIZED_NAME_ISSUER_ADJUSTMENT_SETTLEMENT_CURRENCY)
  private String issuerAdjustmentSettlementCurrency;

  public static final String SERIALIZED_NAME_ISSUER_ADVICE_REASON = "issuerAdviceReason";
  @SerializedName(SERIALIZED_NAME_ISSUER_ADVICE_REASON)
  private String issuerAdviceReason;

  public static final String SERIALIZED_NAME_ISSUER_CURRENCY_CONVERSION_RATE = "issuerCurrencyConversionRate";
  @SerializedName(SERIALIZED_NAME_ISSUER_CURRENCY_CONVERSION_RATE)
  private String issuerCurrencyConversionRate;

  public static final String SERIALIZED_NAME_ISSUER_I_C_A = "issuerICA";
  @SerializedName(SERIALIZED_NAME_ISSUER_I_C_A)
  private String issuerICA;

  public static final String SERIALIZED_NAME_ISSUER_INSTITUTION_NUMBER = "issuerInstitutionNumber";
  @SerializedName(SERIALIZED_NAME_ISSUER_INSTITUTION_NUMBER)
  private String issuerInstitutionNumber;

  public static final String SERIALIZED_NAME_ISSUER_INTERCHANGE_AMOUNT = "issuerInterchangeAmount";
  @SerializedName(SERIALIZED_NAME_ISSUER_INTERCHANGE_AMOUNT)
  private String issuerInterchangeAmount;

  public static final String SERIALIZED_NAME_ISSUER_INTERCHANGE_CURRENCY = "issuerInterchangeCurrency";
  @SerializedName(SERIALIZED_NAME_ISSUER_INTERCHANGE_CURRENCY)
  private String issuerInterchangeCurrency;

  public static final String SERIALIZED_NAME_ISSUER_PROCESSOR_I_D = "issuerProcessorID";
  @SerializedName(SERIALIZED_NAME_ISSUER_PROCESSOR_I_D)
  private String issuerProcessorID;

  public static final String SERIALIZED_NAME_ISSUER_SETTLEMENT_COMPLETION_AMOUNT = "issuerSettlementCompletionAmount";
  @SerializedName(SERIALIZED_NAME_ISSUER_SETTLEMENT_COMPLETION_AMOUNT)
  private String issuerSettlementCompletionAmount;

  public static final String SERIALIZED_NAME_ISSUER_SETTLEMENT_COMPLETION_CURRENCY = "issuerSettlementCompletionCurrency";
  @SerializedName(SERIALIZED_NAME_ISSUER_SETTLEMENT_COMPLETION_CURRENCY)
  private String issuerSettlementCompletionCurrency;

  public static final String SERIALIZED_NAME_ISSUER_SETTLEMENT_CONVERSION_RATE = "issuerSettlementConversionRate";
  @SerializedName(SERIALIZED_NAME_ISSUER_SETTLEMENT_CONVERSION_RATE)
  private String issuerSettlementConversionRate;

  public static final String SERIALIZED_NAME_LOCAL_COMPLETION_AMOUNT = "localCompletionAmount";
  @SerializedName(SERIALIZED_NAME_LOCAL_COMPLETION_AMOUNT)
  private String localCompletionAmount;

  public static final String SERIALIZED_NAME_LOCAL_CURRENCY_CODE = "localCurrencyCode";
  @SerializedName(SERIALIZED_NAME_LOCAL_CURRENCY_CODE)
  private String localCurrencyCode;

  public static final String SERIALIZED_NAME_LOCAL_REQUESTED_AMOUNT = "localRequestedAmount";
  @SerializedName(SERIALIZED_NAME_LOCAL_REQUESTED_AMOUNT)
  private String localRequestedAmount;

  public static final String SERIALIZED_NAME_MC_ELECTRONIC_INDICATOR = "mcElectronicIndicator";
  @SerializedName(SERIALIZED_NAME_MC_ELECTRONIC_INDICATOR)
  private String mcElectronicIndicator;

  public static final String SERIALIZED_NAME_MC_RESPONSE_VALUE = "mcResponseValue";
  @SerializedName(SERIALIZED_NAME_MC_RESPONSE_VALUE)
  private String mcResponseValue;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE_INFO = "merchantCategoryCodeInfo";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE_INFO)
  private String merchantCategoryCodeInfo;

  public static final String SERIALIZED_NAME_MERCHANT_TYPE = "merchantType";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TYPE)
  private String merchantType;

  public static final String SERIALIZED_NAME_ORIGINAL_CARD_HOLDER_BILLING_AMOUNT = "originalCardHolderBillingAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CARD_HOLDER_BILLING_AMOUNT)
  private String originalCardHolderBillingAmount;

  public static final String SERIALIZED_NAME_ORIGINAL_CARD_HOLDER_BILLING_CURRENCY = "originalCardHolderBillingCurrency";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CARD_HOLDER_BILLING_CURRENCY)
  private String originalCardHolderBillingCurrency;

  public static final String SERIALIZED_NAME_ORIGINAL_CASHBACK_AMOUNT = "originalCashbackAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CASHBACK_AMOUNT)
  private String originalCashbackAmount;

  public static final String SERIALIZED_NAME_ORIGINAL_CASHBACK_CURRENCY = "originalCashbackCurrency";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CASHBACK_CURRENCY)
  private String originalCashbackCurrency;

  public static final String SERIALIZED_NAME_ORIGINAL_PURCHASE_AMOUNT = "originalPurchaseAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PURCHASE_AMOUNT)
  private String originalPurchaseAmount;

  public static final String SERIALIZED_NAME_OWNER_I_D = "ownerID";
  @SerializedName(SERIALIZED_NAME_OWNER_I_D)
  private String ownerID;

  public static final String SERIALIZED_NAME_POINT_OF_SERVICE_AMOUNT = "pointOfServiceAmount";
  @SerializedName(SERIALIZED_NAME_POINT_OF_SERVICE_AMOUNT)
  private String pointOfServiceAmount;

  public static final String SERIALIZED_NAME_POINT_OF_SERVICE_CURRENCY = "pointOfServiceCurrency";
  @SerializedName(SERIALIZED_NAME_POINT_OF_SERVICE_CURRENCY)
  private String pointOfServiceCurrency;

  public static final String SERIALIZED_NAME_POS_DATA = "posData";
  @SerializedName(SERIALIZED_NAME_POS_DATA)
  private String posData;

  public static final String SERIALIZED_NAME_POS_ENTRY = "posEntry";
  @SerializedName(SERIALIZED_NAME_POS_ENTRY)
  private String posEntry;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER_SEQUENCE_NUMBER = "primaryAccountNumberSequenceNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER_SEQUENCE_NUMBER)
  private String primaryAccountNumberSequenceNumber;

  public static final String SERIALIZED_NAME_PROCESSING_CODE = "processingCode";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CODE)
  private String processingCode;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIER_CODE = "productIdentifierCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIER_CODE)
  private String productIdentifierCode;

  public static final String SERIALIZED_NAME_PROGRAM_INDICATOR = "programIndicator";
  @SerializedName(SERIALIZED_NAME_PROGRAM_INDICATOR)
  private String programIndicator;

  public static final String SERIALIZED_NAME_QPS_PAY_PASS_CHARGEBACK_ELGIBILITY = "qpsPayPassChargebackElgibility";
  @SerializedName(SERIALIZED_NAME_QPS_PAY_PASS_CHARGEBACK_ELGIBILITY)
  private String qpsPayPassChargebackElgibility;

  public static final String SERIALIZED_NAME_REFERENCE_NUMBER = "referenceNumber";
  @SerializedName(SERIALIZED_NAME_REFERENCE_NUMBER)
  private String referenceNumber;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private String responseCode;

  public static final String SERIALIZED_NAME_RESPONSE_SOURCE = "responseSource";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SOURCE)
  private String responseSource;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "serviceCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SERVICE_LEVEL_INDICATOR = "serviceLevelIndicator";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL_INDICATOR)
  private String serviceLevelIndicator;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "settlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE_POSITION = "settlementDatePosition";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE_POSITION)
  private String settlementDatePosition;

  public static final String SERIALIZED_NAME_SETTLEMENT_SERVICE_CONFIGURATION = "settlementServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_SERVICE_CONFIGURATION)
  private String settlementServiceConfiguration;

  public static final String SERIALIZED_NAME_SURCHARGE_FREE_INDICATOR = "surchargeFreeIndicator";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_FREE_INDICATOR)
  private String surchargeFreeIndicator;

  public static final String SERIALIZED_NAME_SWITCH_DATE_TIME = "switchDateTime";
  @SerializedName(SERIALIZED_NAME_SWITCH_DATE_TIME)
  private String switchDateTime;

  public static final String SERIALIZED_NAME_SWITCH_SERIAL_NUMBER = "switchSerialNumber";
  @SerializedName(SERIALIZED_NAME_SWITCH_SERIAL_NUMBER)
  private String switchSerialNumber;

  public static final String SERIALIZED_NAME_SWITCH_SERIAL_NUMBER_POSITION = "switchSerialNumberPosition";
  @SerializedName(SERIALIZED_NAME_SWITCH_SERIAL_NUMBER_POSITION)
  private String switchSerialNumberPosition;

  public static final String SERIALIZED_NAME_SWITCH_TIME = "switchTime";
  @SerializedName(SERIALIZED_NAME_SWITCH_TIME)
  private String switchTime;

  public static final String SERIALIZED_NAME_TERMINAL_I_D = "terminalID";
  @SerializedName(SERIALIZED_NAME_TERMINAL_I_D)
  private String terminalID;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private String trace;

  public static final String SERIALIZED_NAME_TRANSACTION_CATEGORY_CODE = "transactionCategoryCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CATEGORY_CODE)
  private String transactionCategoryCode;

  public static final String SERIALIZED_NAME_TRANSACTION_CLASS = "transactionClass";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CLASS)
  private String transactionClass;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE_TIME = "transactionDateTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE_TIME)
  private String transactionDateTime;

  public static final String SERIALIZED_NAME_TRANSIT_DATA = "transitData";
  @SerializedName(SERIALIZED_NAME_TRANSIT_DATA)
  private String transitData;

  public static final String SERIALIZED_NAME_TRAN_TYPE = "tranType";
  @SerializedName(SERIALIZED_NAME_TRAN_TYPE)
  private String tranType;

  public static final String SERIALIZED_NAME_UNIVERSAL_CARD_AUTHENTICATION_FEE = "universalCardAuthenticationFee";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_CARD_AUTHENTICATION_FEE)
  private String universalCardAuthenticationFee;

  public static final String SERIALIZED_NAME_USAGE_CODE = "usageCode";
  @SerializedName(SERIALIZED_NAME_USAGE_CODE)
  private String usageCode;

  public SingleMessageDetail() {
  }

  public SingleMessageDetail acqLocCntry(String acqLocCntry) {
    
    this.acqLocCntry = acqLocCntry;
    return this;
  }

   /**
   * Acquirer Country
   * @return acqLocCntry
  **/
  @javax.annotation.Nullable
  public String getAcqLocCntry() {
    return acqLocCntry;
  }


  public void setAcqLocCntry(String acqLocCntry) {
    this.acqLocCntry = acqLocCntry;
  }


  public SingleMessageDetail acquirerAddress(String acquirerAddress) {
    
    this.acquirerAddress = acquirerAddress;
    return this;
  }

   /**
   * Acquirer Address City
   * @return acquirerAddress
  **/
  @javax.annotation.Nullable
  public String getAcquirerAddress() {
    return acquirerAddress;
  }


  public void setAcquirerAddress(String acquirerAddress) {
    this.acquirerAddress = acquirerAddress;
  }


  public SingleMessageDetail acquirerAdjustmentSettlementAmount(String acquirerAdjustmentSettlementAmount) {
    
    this.acquirerAdjustmentSettlementAmount = acquirerAdjustmentSettlementAmount;
    return this;
  }

   /**
   * Acquirer Adjustment Settlement Amount
   * @return acquirerAdjustmentSettlementAmount
  **/
  @javax.annotation.Nullable
  public String getAcquirerAdjustmentSettlementAmount() {
    return acquirerAdjustmentSettlementAmount;
  }


  public void setAcquirerAdjustmentSettlementAmount(String acquirerAdjustmentSettlementAmount) {
    this.acquirerAdjustmentSettlementAmount = acquirerAdjustmentSettlementAmount;
  }


  public SingleMessageDetail acquirerAdjustmentSettlementAmountIndicator(String acquirerAdjustmentSettlementAmountIndicator) {
    
    this.acquirerAdjustmentSettlementAmountIndicator = acquirerAdjustmentSettlementAmountIndicator;
    return this;
  }

   /**
   * Acquirer Adjustment Settlement Amount Indicator
   * @return acquirerAdjustmentSettlementAmountIndicator
  **/
  @javax.annotation.Nullable
  public String getAcquirerAdjustmentSettlementAmountIndicator() {
    return acquirerAdjustmentSettlementAmountIndicator;
  }


  public void setAcquirerAdjustmentSettlementAmountIndicator(String acquirerAdjustmentSettlementAmountIndicator) {
    this.acquirerAdjustmentSettlementAmountIndicator = acquirerAdjustmentSettlementAmountIndicator;
  }


  public SingleMessageDetail acquirerAdjustmentSettlementCompletionAmount(String acquirerAdjustmentSettlementCompletionAmount) {
    
    this.acquirerAdjustmentSettlementCompletionAmount = acquirerAdjustmentSettlementCompletionAmount;
    return this;
  }

   /**
   * Acquirer Adjustment Settlement Completion Amount
   * @return acquirerAdjustmentSettlementCompletionAmount
  **/
  @javax.annotation.Nullable
  public String getAcquirerAdjustmentSettlementCompletionAmount() {
    return acquirerAdjustmentSettlementCompletionAmount;
  }


  public void setAcquirerAdjustmentSettlementCompletionAmount(String acquirerAdjustmentSettlementCompletionAmount) {
    this.acquirerAdjustmentSettlementCompletionAmount = acquirerAdjustmentSettlementCompletionAmount;
  }


  public SingleMessageDetail acquirerAdjustmentSettlementCurrency(String acquirerAdjustmentSettlementCurrency) {
    
    this.acquirerAdjustmentSettlementCurrency = acquirerAdjustmentSettlementCurrency;
    return this;
  }

   /**
   * Acquirer Adjustment Settlement Currency
   * @return acquirerAdjustmentSettlementCurrency
  **/
  @javax.annotation.Nullable
  public String getAcquirerAdjustmentSettlementCurrency() {
    return acquirerAdjustmentSettlementCurrency;
  }


  public void setAcquirerAdjustmentSettlementCurrency(String acquirerAdjustmentSettlementCurrency) {
    this.acquirerAdjustmentSettlementCurrency = acquirerAdjustmentSettlementCurrency;
  }


  public SingleMessageDetail acquirerAdviceReason(String acquirerAdviceReason) {
    
    this.acquirerAdviceReason = acquirerAdviceReason;
    return this;
  }

   /**
   * Acquirer Advice Reason Code
   * @return acquirerAdviceReason
  **/
  @javax.annotation.Nullable
  public String getAcquirerAdviceReason() {
    return acquirerAdviceReason;
  }


  public void setAcquirerAdviceReason(String acquirerAdviceReason) {
    this.acquirerAdviceReason = acquirerAdviceReason;
  }


  public SingleMessageDetail acquirerBridgedICA(String acquirerBridgedICA) {
    
    this.acquirerBridgedICA = acquirerBridgedICA;
    return this;
  }

   /**
   * Acquirer Bridged ICA 
   * @return acquirerBridgedICA
  **/
  @javax.annotation.Nullable
  public String getAcquirerBridgedICA() {
    return acquirerBridgedICA;
  }


  public void setAcquirerBridgedICA(String acquirerBridgedICA) {
    this.acquirerBridgedICA = acquirerBridgedICA;
  }


  public SingleMessageDetail acquirerCity(String acquirerCity) {
    
    this.acquirerCity = acquirerCity;
    return this;
  }

   /**
   * Acquirer Address City
   * @return acquirerCity
  **/
  @javax.annotation.Nullable
  public String getAcquirerCity() {
    return acquirerCity;
  }


  public void setAcquirerCity(String acquirerCity) {
    this.acquirerCity = acquirerCity;
  }


  public SingleMessageDetail acquirerCurrencyConversionRate(String acquirerCurrencyConversionRate) {
    
    this.acquirerCurrencyConversionRate = acquirerCurrencyConversionRate;
    return this;
  }

   /**
   * Acquirer Currency Conversion Rate
   * @return acquirerCurrencyConversionRate
  **/
  @javax.annotation.Nullable
  public String getAcquirerCurrencyConversionRate() {
    return acquirerCurrencyConversionRate;
  }


  public void setAcquirerCurrencyConversionRate(String acquirerCurrencyConversionRate) {
    this.acquirerCurrencyConversionRate = acquirerCurrencyConversionRate;
  }


  public SingleMessageDetail acquirerInstitutionNumber(String acquirerInstitutionNumber) {
    
    this.acquirerInstitutionNumber = acquirerInstitutionNumber;
    return this;
  }

   /**
   * Displays the routing and transit number of the customer
   * @return acquirerInstitutionNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerInstitutionNumber() {
    return acquirerInstitutionNumber;
  }


  public void setAcquirerInstitutionNumber(String acquirerInstitutionNumber) {
    this.acquirerInstitutionNumber = acquirerInstitutionNumber;
  }


  public SingleMessageDetail acquirerInterchangeAmount(String acquirerInterchangeAmount) {
    
    this.acquirerInterchangeAmount = acquirerInterchangeAmount;
    return this;
  }

   /**
   * Acquirer Interchange Amount
   * @return acquirerInterchangeAmount
  **/
  @javax.annotation.Nullable
  public String getAcquirerInterchangeAmount() {
    return acquirerInterchangeAmount;
  }


  public void setAcquirerInterchangeAmount(String acquirerInterchangeAmount) {
    this.acquirerInterchangeAmount = acquirerInterchangeAmount;
  }


  public SingleMessageDetail acquirerInterchangeCurrency(String acquirerInterchangeCurrency) {
    
    this.acquirerInterchangeCurrency = acquirerInterchangeCurrency;
    return this;
  }

   /**
   * Acquirer Interchange Currency
   * @return acquirerInterchangeCurrency
  **/
  @javax.annotation.Nullable
  public String getAcquirerInterchangeCurrency() {
    return acquirerInterchangeCurrency;
  }


  public void setAcquirerInterchangeCurrency(String acquirerInterchangeCurrency) {
    this.acquirerInterchangeCurrency = acquirerInterchangeCurrency;
  }


  public SingleMessageDetail acquirerName(String acquirerName) {
    
    this.acquirerName = acquirerName;
    return this;
  }

   /**
   * Debit Mastercard field only. Acquirer Name is a card acceptor identification code assigned by the merchant.
   * @return acquirerName
  **/
  @javax.annotation.Nullable
  public String getAcquirerName() {
    return acquirerName;
  }


  public void setAcquirerName(String acquirerName) {
    this.acquirerName = acquirerName;
  }


  public SingleMessageDetail acquirerProcessorID(String acquirerProcessorID) {
    
    this.acquirerProcessorID = acquirerProcessorID;
    return this;
  }

   /**
   * Acquirer processor number
   * @return acquirerProcessorID
  **/
  @javax.annotation.Nullable
  public String getAcquirerProcessorID() {
    return acquirerProcessorID;
  }


  public void setAcquirerProcessorID(String acquirerProcessorID) {
    this.acquirerProcessorID = acquirerProcessorID;
  }


  public SingleMessageDetail acquirerReferenceNumber(String acquirerReferenceNumber) {
    
    this.acquirerReferenceNumber = acquirerReferenceNumber;
    return this;
  }

   /**
   * Contains the acquirers reference number.
   * @return acquirerReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getAcquirerReferenceNumber() {
    return acquirerReferenceNumber;
  }


  public void setAcquirerReferenceNumber(String acquirerReferenceNumber) {
    this.acquirerReferenceNumber = acquirerReferenceNumber;
  }


  public SingleMessageDetail acquirerSettlementCompletionAmount(String acquirerSettlementCompletionAmount) {
    
    this.acquirerSettlementCompletionAmount = acquirerSettlementCompletionAmount;
    return this;
  }

   /**
   * Acquirer Settlement Completion Amount
   * @return acquirerSettlementCompletionAmount
  **/
  @javax.annotation.Nullable
  public String getAcquirerSettlementCompletionAmount() {
    return acquirerSettlementCompletionAmount;
  }


  public void setAcquirerSettlementCompletionAmount(String acquirerSettlementCompletionAmount) {
    this.acquirerSettlementCompletionAmount = acquirerSettlementCompletionAmount;
  }


  public SingleMessageDetail acquirerSettlementCompletionCurrency(String acquirerSettlementCompletionCurrency) {
    
    this.acquirerSettlementCompletionCurrency = acquirerSettlementCompletionCurrency;
    return this;
  }

   /**
   * Acquirer Settlement Completion Currency
   * @return acquirerSettlementCompletionCurrency
  **/
  @javax.annotation.Nullable
  public String getAcquirerSettlementCompletionCurrency() {
    return acquirerSettlementCompletionCurrency;
  }


  public void setAcquirerSettlementCompletionCurrency(String acquirerSettlementCompletionCurrency) {
    this.acquirerSettlementCompletionCurrency = acquirerSettlementCompletionCurrency;
  }


  public SingleMessageDetail acquirerSettlementConversionRate(String acquirerSettlementConversionRate) {
    
    this.acquirerSettlementConversionRate = acquirerSettlementConversionRate;
    return this;
  }

   /**
   * Acquirer Settlement Conversion Rate
   * @return acquirerSettlementConversionRate
  **/
  @javax.annotation.Nullable
  public String getAcquirerSettlementConversionRate() {
    return acquirerSettlementConversionRate;
  }


  public void setAcquirerSettlementConversionRate(String acquirerSettlementConversionRate) {
    this.acquirerSettlementConversionRate = acquirerSettlementConversionRate;
  }


  public SingleMessageDetail additionalAdvice(String additionalAdvice) {
    
    this.additionalAdvice = additionalAdvice;
    return this;
  }

   /**
   * Additional Advice
   * @return additionalAdvice
  **/
  @javax.annotation.Nullable
  public String getAdditionalAdvice() {
    return additionalAdvice;
  }


  public void setAdditionalAdvice(String additionalAdvice) {
    this.additionalAdvice = additionalAdvice;
  }


  public SingleMessageDetail additionalPOSData(String additionalPOSData) {
    
    this.additionalPOSData = additionalPOSData;
    return this;
  }

   /**
   * Additional POS Data
   * @return additionalPOSData
  **/
  @javax.annotation.Nullable
  public String getAdditionalPOSData() {
    return additionalPOSData;
  }


  public void setAdditionalPOSData(String additionalPOSData) {
    this.additionalPOSData = additionalPOSData;
  }


  public SingleMessageDetail additionalResponse(String additionalResponse) {
    
    this.additionalResponse = additionalResponse;
    return this;
  }

   /**
   * A code that provides additional supporting data pertaining to the response code associated with the transaction
   * @return additionalResponse
  **/
  @javax.annotation.Nullable
  public String getAdditionalResponse() {
    return additionalResponse;
  }


  public void setAdditionalResponse(String additionalResponse) {
    this.additionalResponse = additionalResponse;
  }


  public SingleMessageDetail adjustmentAdviceReason(String adjustmentAdviceReason) {
    
    this.adjustmentAdviceReason = adjustmentAdviceReason;
    return this;
  }

   /**
   * Adjustment Advice Reason
   * @return adjustmentAdviceReason
  **/
  @javax.annotation.Nullable
  public String getAdjustmentAdviceReason() {
    return adjustmentAdviceReason;
  }


  public void setAdjustmentAdviceReason(String adjustmentAdviceReason) {
    this.adjustmentAdviceReason = adjustmentAdviceReason;
  }


  public SingleMessageDetail adjustmentCashbackAmount(String adjustmentCashbackAmount) {
    
    this.adjustmentCashbackAmount = adjustmentCashbackAmount;
    return this;
  }

   /**
   * Adjustment Cashback Amount
   * @return adjustmentCashbackAmount
  **/
  @javax.annotation.Nullable
  public String getAdjustmentCashbackAmount() {
    return adjustmentCashbackAmount;
  }


  public void setAdjustmentCashbackAmount(String adjustmentCashbackAmount) {
    this.adjustmentCashbackAmount = adjustmentCashbackAmount;
  }


  public SingleMessageDetail adjustmentDate(String adjustmentDate) {
    
    this.adjustmentDate = adjustmentDate;
    return this;
  }

   /**
   * Date the adjustment is performed. YYMMDD
   * @return adjustmentDate
  **/
  @javax.annotation.Nullable
  public String getAdjustmentDate() {
    return adjustmentDate;
  }


  public void setAdjustmentDate(String adjustmentDate) {
    this.adjustmentDate = adjustmentDate;
  }


  public SingleMessageDetail adjustmentPurchaseAmount(String adjustmentPurchaseAmount) {
    
    this.adjustmentPurchaseAmount = adjustmentPurchaseAmount;
    return this;
  }

   /**
   * Adjustment Purchase Amount
   * @return adjustmentPurchaseAmount
  **/
  @javax.annotation.Nullable
  public String getAdjustmentPurchaseAmount() {
    return adjustmentPurchaseAmount;
  }


  public void setAdjustmentPurchaseAmount(String adjustmentPurchaseAmount) {
    this.adjustmentPurchaseAmount = adjustmentPurchaseAmount;
  }


  public SingleMessageDetail afaMember(String afaMember) {
    
    this.afaMember = afaMember;
    return this;
  }

   /**
   * AFA Member
   * @return afaMember
  **/
  @javax.annotation.Nullable
  public String getAfaMember() {
    return afaMember;
  }


  public void setAfaMember(String afaMember) {
    this.afaMember = afaMember;
  }


  public SingleMessageDetail alternatePrimaryAccountNumber(String alternatePrimaryAccountNumber) {
    
    this.alternatePrimaryAccountNumber = alternatePrimaryAccountNumber;
    return this;
  }

   /**
   * Alternate Primary Account Number
   * @return alternatePrimaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getAlternatePrimaryAccountNumber() {
    return alternatePrimaryAccountNumber;
  }


  public void setAlternatePrimaryAccountNumber(String alternatePrimaryAccountNumber) {
    this.alternatePrimaryAccountNumber = alternatePrimaryAccountNumber;
  }


  public SingleMessageDetail amountICCR(String amountICCR) {
    
    this.amountICCR = amountICCR;
    return this;
  }

   /**
   * Amount ICCR
   * @return amountICCR
  **/
  @javax.annotation.Nullable
  public String getAmountICCR() {
    return amountICCR;
  }


  public void setAmountICCR(String amountICCR) {
    this.amountICCR = amountICCR;
  }


  public SingleMessageDetail atmPosFlag(String atmPosFlag) {
    
    this.atmPosFlag = atmPosFlag;
    return this;
  }

   /**
   * ATM Pos Flag
   * @return atmPosFlag
  **/
  @javax.annotation.Nullable
  public String getAtmPosFlag() {
    return atmPosFlag;
  }


  public void setAtmPosFlag(String atmPosFlag) {
    this.atmPosFlag = atmPosFlag;
  }


  public SingleMessageDetail banknetReferenceNumber(String banknetReferenceNumber) {
    
    this.banknetReferenceNumber = banknetReferenceNumber;
    return this;
  }

   /**
   * Banknet Reference Number
   * @return banknetReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getBanknetReferenceNumber() {
    return banknetReferenceNumber;
  }


  public void setBanknetReferenceNumber(String banknetReferenceNumber) {
    this.banknetReferenceNumber = banknetReferenceNumber;
  }


  public SingleMessageDetail bridgingICA(String bridgingICA) {
    
    this.bridgingICA = bridgingICA;
    return this;
  }

   /**
   * Bridging ICA
   * @return bridgingICA
  **/
  @javax.annotation.Nullable
  public String getBridgingICA() {
    return bridgingICA;
  }


  public void setBridgingICA(String bridgingICA) {
    this.bridgingICA = bridgingICA;
  }


  public SingleMessageDetail businessActivity(String businessActivity) {
    
    this.businessActivity = businessActivity;
    return this;
  }

   /**
   * Business Activity
   * @return businessActivity
  **/
  @javax.annotation.Nullable
  public String getBusinessActivity() {
    return businessActivity;
  }


  public void setBusinessActivity(String businessActivity) {
    this.businessActivity = businessActivity;
  }


  public SingleMessageDetail cashBackAmount(String cashBackAmount) {
    
    this.cashBackAmount = cashBackAmount;
    return this;
  }

   /**
   * Cash Back Amount
   * @return cashBackAmount
  **/
  @javax.annotation.Nullable
  public String getCashBackAmount() {
    return cashBackAmount;
  }


  public void setCashBackAmount(String cashBackAmount) {
    this.cashBackAmount = cashBackAmount;
  }


  public SingleMessageDetail cashBackCurrency(String cashBackCurrency) {
    
    this.cashBackCurrency = cashBackCurrency;
    return this;
  }

   /**
   * Cash Back Currency
   * @return cashBackCurrency
  **/
  @javax.annotation.Nullable
  public String getCashBackCurrency() {
    return cashBackCurrency;
  }


  public void setCashBackCurrency(String cashBackCurrency) {
    this.cashBackCurrency = cashBackCurrency;
  }


  public SingleMessageDetail catLevel(String catLevel) {
    
    this.catLevel = catLevel;
    return this;
  }

   /**
   * This field indicates the specific conditions present at the point of service (POS) at the time that a transaction takes place.
   * @return catLevel
  **/
  @javax.annotation.Nullable
  public String getCatLevel() {
    return catLevel;
  }


  public void setCatLevel(String catLevel) {
    this.catLevel = catLevel;
  }


  public SingleMessageDetail cccaIssuerBankName(String cccaIssuerBankName) {
    
    this.cccaIssuerBankName = cccaIssuerBankName;
    return this;
  }

   /**
   * For Mexico domestic credit card cash advance ATM transactions
   * @return cccaIssuerBankName
  **/
  @javax.annotation.Nullable
  public String getCccaIssuerBankName() {
    return cccaIssuerBankName;
  }


  public void setCccaIssuerBankName(String cccaIssuerBankName) {
    this.cccaIssuerBankName = cccaIssuerBankName;
  }


  public SingleMessageDetail chipFlag(String chipFlag) {
    
    this.chipFlag = chipFlag;
    return this;
  }

   /**
   * Indicates if chip was present or not.
   * @return chipFlag
  **/
  @javax.annotation.Nullable
  public String getChipFlag() {
    return chipFlag;
  }


  public void setChipFlag(String chipFlag) {
    this.chipFlag = chipFlag;
  }


  public SingleMessageDetail conditionCode(String conditionCode) {
    
    this.conditionCode = conditionCode;
    return this;
  }

   /**
   * Code that describes the PAN entry, PIN entry, and authorization mode of a transaction.
   * @return conditionCode
  **/
  @javax.annotation.Nullable
  public String getConditionCode() {
    return conditionCode;
  }


  public void setConditionCode(String conditionCode) {
    this.conditionCode = conditionCode;
  }


  public SingleMessageDetail corporateCardIndicator(String corporateCardIndicator) {
    
    this.corporateCardIndicator = corporateCardIndicator;
    return this;
  }

   /**
   * Corporate Card Indicator
   * @return corporateCardIndicator
  **/
  @javax.annotation.Nullable
  public String getCorporateCardIndicator() {
    return corporateCardIndicator;
  }


  public void setCorporateCardIndicator(String corporateCardIndicator) {
    this.corporateCardIndicator = corporateCardIndicator;
  }


  public SingleMessageDetail creditLineUsageFee(String creditLineUsageFee) {
    
    this.creditLineUsageFee = creditLineUsageFee;
    return this;
  }

   /**
   * For Mexico domestic credit card cash advance ATM transactions.
   * @return creditLineUsageFee
  **/
  @javax.annotation.Nullable
  public String getCreditLineUsageFee() {
    return creditLineUsageFee;
  }


  public void setCreditLineUsageFee(String creditLineUsageFee) {
    this.creditLineUsageFee = creditLineUsageFee;
  }


  public SingleMessageDetail crossBorderIndicator(String crossBorderIndicator) {
    
    this.crossBorderIndicator = crossBorderIndicator;
    return this;
  }

   /**
   * Any transaction on a credit or debit card branded by Mastercard processed through the Single Message System in which the cardholder country code differs from the merchant country code
   * @return crossBorderIndicator
  **/
  @javax.annotation.Nullable
  public String getCrossBorderIndicator() {
    return crossBorderIndicator;
  }


  public void setCrossBorderIndicator(String crossBorderIndicator) {
    this.crossBorderIndicator = crossBorderIndicator;
  }


  public SingleMessageDetail currencyConversionAssesementAmount(String currencyConversionAssesementAmount) {
    
    this.currencyConversionAssesementAmount = currencyConversionAssesementAmount;
    return this;
  }

   /**
   * Currency Conversion Assessment amount
   * @return currencyConversionAssesementAmount
  **/
  @javax.annotation.Nullable
  public String getCurrencyConversionAssesementAmount() {
    return currencyConversionAssesementAmount;
  }


  public void setCurrencyConversionAssesementAmount(String currencyConversionAssesementAmount) {
    this.currencyConversionAssesementAmount = currencyConversionAssesementAmount;
  }


  public SingleMessageDetail currencyConversionAssesementCurrency(String currencyConversionAssesementCurrency) {
    
    this.currencyConversionAssesementCurrency = currencyConversionAssesementCurrency;
    return this;
  }

   /**
   * Currency Conversion Assesement Currency
   * @return currencyConversionAssesementCurrency
  **/
  @javax.annotation.Nullable
  public String getCurrencyConversionAssesementCurrency() {
    return currencyConversionAssesementCurrency;
  }


  public void setCurrencyConversionAssesementCurrency(String currencyConversionAssesementCurrency) {
    this.currencyConversionAssesementCurrency = currencyConversionAssesementCurrency;
  }


  public SingleMessageDetail currencyConversionIndicator(String currencyConversionIndicator) {
    
    this.currencyConversionIndicator = currencyConversionIndicator;
    return this;
  }

   /**
   * Compares the currency of the cardholder with the merchant’s country currency when the cardholder performs a transaction in another country
   * @return currencyConversionIndicator
  **/
  @javax.annotation.Nullable
  public String getCurrencyConversionIndicator() {
    return currencyConversionIndicator;
  }


  public void setCurrencyConversionIndicator(String currencyConversionIndicator) {
    this.currencyConversionIndicator = currencyConversionIndicator;
  }


  public SingleMessageDetail cvc2ProgramValidationCode(String cvc2ProgramValidationCode) {
    
    this.cvc2ProgramValidationCode = cvc2ProgramValidationCode;
    return this;
  }

   /**
   * Debit Mastercard field only. A value of C indicates that the merchant participates in the Mastercard CVC 2 Validation Program
   * @return cvc2ProgramValidationCode
  **/
  @javax.annotation.Nullable
  public String getCvc2ProgramValidationCode() {
    return cvc2ProgramValidationCode;
  }


  public void setCvc2ProgramValidationCode(String cvc2ProgramValidationCode) {
    this.cvc2ProgramValidationCode = cvc2ProgramValidationCode;
  }


  public SingleMessageDetail documentIndicator(String documentIndicator) {
    
    this.documentIndicator = documentIndicator;
    return this;
  }

   /**
   * The document Indicator field indicates whether documentation is sent supporting the chargeback
   * @return documentIndicator
  **/
  @javax.annotation.Nullable
  public String getDocumentIndicator() {
    return documentIndicator;
  }


  public void setDocumentIndicator(String documentIndicator) {
    this.documentIndicator = documentIndicator;
  }


  public SingleMessageDetail feesInterChgAcqLoc(String feesInterChgAcqLoc) {
    
    this.feesInterChgAcqLoc = feesInterChgAcqLoc;
    return this;
  }

   /**
   * Fees Inter Chg Acq Loc
   * @return feesInterChgAcqLoc
  **/
  @javax.annotation.Nullable
  public String getFeesInterChgAcqLoc() {
    return feesInterChgAcqLoc;
  }


  public void setFeesInterChgAcqLoc(String feesInterChgAcqLoc) {
    this.feesInterChgAcqLoc = feesInterChgAcqLoc;
  }


  public SingleMessageDetail financialInstitutionID(String financialInstitutionID) {
    
    this.financialInstitutionID = financialInstitutionID;
    return this;
  }

   /**
   * Financial Institution ID
   * @return financialInstitutionID
  **/
  @javax.annotation.Nullable
  public String getFinancialInstitutionID() {
    return financialInstitutionID;
  }


  public void setFinancialInstitutionID(String financialInstitutionID) {
    this.financialInstitutionID = financialInstitutionID;
  }


  public SingleMessageDetail fraudDate(String fraudDate) {
    
    this.fraudDate = fraudDate;
    return this;
  }

   /**
   * Fraud Date
   * @return fraudDate
  **/
  @javax.annotation.Nullable
  public String getFraudDate() {
    return fraudDate;
  }


  public void setFraudDate(String fraudDate) {
    this.fraudDate = fraudDate;
  }


  public SingleMessageDetail fraudDeviceType(String fraudDeviceType) {
    
    this.fraudDeviceType = fraudDeviceType;
    return this;
  }

   /**
   * Fraud Device Type
   * @return fraudDeviceType
  **/
  @javax.annotation.Nullable
  public String getFraudDeviceType() {
    return fraudDeviceType;
  }


  public void setFraudDeviceType(String fraudDeviceType) {
    this.fraudDeviceType = fraudDeviceType;
  }


  public SingleMessageDetail fraudType(String fraudType) {
    
    this.fraudType = fraudType;
    return this;
  }

   /**
   * Fraud Type
   * @return fraudType
  **/
  @javax.annotation.Nullable
  public String getFraudType() {
    return fraudType;
  }


  public void setFraudType(String fraudType) {
    this.fraudType = fraudType;
  }


  public SingleMessageDetail gcmsAdviceCode(String gcmsAdviceCode) {
    
    this.gcmsAdviceCode = gcmsAdviceCode;
    return this;
  }

   /**
   * Advice reason code that identifies the Global Clearing Management System (GCMS) message reason code when an exception item is processed
   * @return gcmsAdviceCode
  **/
  @javax.annotation.Nullable
  public String getGcmsAdviceCode() {
    return gcmsAdviceCode;
  }


  public void setGcmsAdviceCode(String gcmsAdviceCode) {
    this.gcmsAdviceCode = gcmsAdviceCode;
  }


  public SingleMessageDetail gcmsSettlementDate(String gcmsSettlementDate) {
    
    this.gcmsSettlementDate = gcmsSettlementDate;
    return this;
  }

   /**
   * GCMS Settlement Date
   * @return gcmsSettlementDate
  **/
  @javax.annotation.Nullable
  public String getGcmsSettlementDate() {
    return gcmsSettlementDate;
  }


  public void setGcmsSettlementDate(String gcmsSettlementDate) {
    this.gcmsSettlementDate = gcmsSettlementDate;
  }


  public SingleMessageDetail issuerAdjustmentSettlementAmount(String issuerAdjustmentSettlementAmount) {
    
    this.issuerAdjustmentSettlementAmount = issuerAdjustmentSettlementAmount;
    return this;
  }

   /**
   * Issuer Adjustment Settlement Amount
   * @return issuerAdjustmentSettlementAmount
  **/
  @javax.annotation.Nullable
  public String getIssuerAdjustmentSettlementAmount() {
    return issuerAdjustmentSettlementAmount;
  }


  public void setIssuerAdjustmentSettlementAmount(String issuerAdjustmentSettlementAmount) {
    this.issuerAdjustmentSettlementAmount = issuerAdjustmentSettlementAmount;
  }


  public SingleMessageDetail issuerAdjustmentSettlementAmountIndicator(String issuerAdjustmentSettlementAmountIndicator) {
    
    this.issuerAdjustmentSettlementAmountIndicator = issuerAdjustmentSettlementAmountIndicator;
    return this;
  }

   /**
   * Issuer Adjustment Settlement Amount Indicator
   * @return issuerAdjustmentSettlementAmountIndicator
  **/
  @javax.annotation.Nullable
  public String getIssuerAdjustmentSettlementAmountIndicator() {
    return issuerAdjustmentSettlementAmountIndicator;
  }


  public void setIssuerAdjustmentSettlementAmountIndicator(String issuerAdjustmentSettlementAmountIndicator) {
    this.issuerAdjustmentSettlementAmountIndicator = issuerAdjustmentSettlementAmountIndicator;
  }


  public SingleMessageDetail issuerAdjustmentSettlementCompletionAmount(String issuerAdjustmentSettlementCompletionAmount) {
    
    this.issuerAdjustmentSettlementCompletionAmount = issuerAdjustmentSettlementCompletionAmount;
    return this;
  }

   /**
   * Issuer Adjustment Settlement Completion Amount
   * @return issuerAdjustmentSettlementCompletionAmount
  **/
  @javax.annotation.Nullable
  public String getIssuerAdjustmentSettlementCompletionAmount() {
    return issuerAdjustmentSettlementCompletionAmount;
  }


  public void setIssuerAdjustmentSettlementCompletionAmount(String issuerAdjustmentSettlementCompletionAmount) {
    this.issuerAdjustmentSettlementCompletionAmount = issuerAdjustmentSettlementCompletionAmount;
  }


  public SingleMessageDetail issuerAdjustmentSettlementCurrency(String issuerAdjustmentSettlementCurrency) {
    
    this.issuerAdjustmentSettlementCurrency = issuerAdjustmentSettlementCurrency;
    return this;
  }

   /**
   * Issuer Adjustment Settlement Currency
   * @return issuerAdjustmentSettlementCurrency
  **/
  @javax.annotation.Nullable
  public String getIssuerAdjustmentSettlementCurrency() {
    return issuerAdjustmentSettlementCurrency;
  }


  public void setIssuerAdjustmentSettlementCurrency(String issuerAdjustmentSettlementCurrency) {
    this.issuerAdjustmentSettlementCurrency = issuerAdjustmentSettlementCurrency;
  }


  public SingleMessageDetail issuerAdviceReason(String issuerAdviceReason) {
    
    this.issuerAdviceReason = issuerAdviceReason;
    return this;
  }

   /**
   * Issuer Advice Reason Code.
   * @return issuerAdviceReason
  **/
  @javax.annotation.Nullable
  public String getIssuerAdviceReason() {
    return issuerAdviceReason;
  }


  public void setIssuerAdviceReason(String issuerAdviceReason) {
    this.issuerAdviceReason = issuerAdviceReason;
  }


  public SingleMessageDetail issuerCurrencyConversionRate(String issuerCurrencyConversionRate) {
    
    this.issuerCurrencyConversionRate = issuerCurrencyConversionRate;
    return this;
  }

   /**
   * Conversion rate used to convert amounts from the local transaction currency to the settlement currency.
   * @return issuerCurrencyConversionRate
  **/
  @javax.annotation.Nullable
  public String getIssuerCurrencyConversionRate() {
    return issuerCurrencyConversionRate;
  }


  public void setIssuerCurrencyConversionRate(String issuerCurrencyConversionRate) {
    this.issuerCurrencyConversionRate = issuerCurrencyConversionRate;
  }


  public SingleMessageDetail issuerICA(String issuerICA) {
    
    this.issuerICA = issuerICA;
    return this;
  }

   /**
   * Issuer ICA
   * @return issuerICA
  **/
  @javax.annotation.Nullable
  public String getIssuerICA() {
    return issuerICA;
  }


  public void setIssuerICA(String issuerICA) {
    this.issuerICA = issuerICA;
  }


  public SingleMessageDetail issuerInstitutionNumber(String issuerInstitutionNumber) {
    
    this.issuerInstitutionNumber = issuerInstitutionNumber;
    return this;
  }

   /**
   * Issuer institution ID Displays the routing and transit number of the customer. If the customer has no routing and transit number, i.e., the institution is International, then the number displayed is the pseudo number assigned by Mastercard.
   * @return issuerInstitutionNumber
  **/
  @javax.annotation.Nullable
  public String getIssuerInstitutionNumber() {
    return issuerInstitutionNumber;
  }


  public void setIssuerInstitutionNumber(String issuerInstitutionNumber) {
    this.issuerInstitutionNumber = issuerInstitutionNumber;
  }


  public SingleMessageDetail issuerInterchangeAmount(String issuerInterchangeAmount) {
    
    this.issuerInterchangeAmount = issuerInterchangeAmount;
    return this;
  }

   /**
   * Issuer Interchange Amount
   * @return issuerInterchangeAmount
  **/
  @javax.annotation.Nullable
  public String getIssuerInterchangeAmount() {
    return issuerInterchangeAmount;
  }


  public void setIssuerInterchangeAmount(String issuerInterchangeAmount) {
    this.issuerInterchangeAmount = issuerInterchangeAmount;
  }


  public SingleMessageDetail issuerInterchangeCurrency(String issuerInterchangeCurrency) {
    
    this.issuerInterchangeCurrency = issuerInterchangeCurrency;
    return this;
  }

   /**
   * Issuer Interchange Currency
   * @return issuerInterchangeCurrency
  **/
  @javax.annotation.Nullable
  public String getIssuerInterchangeCurrency() {
    return issuerInterchangeCurrency;
  }


  public void setIssuerInterchangeCurrency(String issuerInterchangeCurrency) {
    this.issuerInterchangeCurrency = issuerInterchangeCurrency;
  }


  public SingleMessageDetail issuerProcessorID(String issuerProcessorID) {
    
    this.issuerProcessorID = issuerProcessorID;
    return this;
  }

   /**
   * Issuer processor number
   * @return issuerProcessorID
  **/
  @javax.annotation.Nullable
  public String getIssuerProcessorID() {
    return issuerProcessorID;
  }


  public void setIssuerProcessorID(String issuerProcessorID) {
    this.issuerProcessorID = issuerProcessorID;
  }


  public SingleMessageDetail issuerSettlementCompletionAmount(String issuerSettlementCompletionAmount) {
    
    this.issuerSettlementCompletionAmount = issuerSettlementCompletionAmount;
    return this;
  }

   /**
   * The settlement amount is displayed in the issuers chosen settlement currency, as processed in the Single Message System
   * @return issuerSettlementCompletionAmount
  **/
  @javax.annotation.Nullable
  public String getIssuerSettlementCompletionAmount() {
    return issuerSettlementCompletionAmount;
  }


  public void setIssuerSettlementCompletionAmount(String issuerSettlementCompletionAmount) {
    this.issuerSettlementCompletionAmount = issuerSettlementCompletionAmount;
  }


  public SingleMessageDetail issuerSettlementCompletionCurrency(String issuerSettlementCompletionCurrency) {
    
    this.issuerSettlementCompletionCurrency = issuerSettlementCompletionCurrency;
    return this;
  }

   /**
   * Current issuer settlement currency code.
   * @return issuerSettlementCompletionCurrency
  **/
  @javax.annotation.Nullable
  public String getIssuerSettlementCompletionCurrency() {
    return issuerSettlementCompletionCurrency;
  }


  public void setIssuerSettlementCompletionCurrency(String issuerSettlementCompletionCurrency) {
    this.issuerSettlementCompletionCurrency = issuerSettlementCompletionCurrency;
  }


  public SingleMessageDetail issuerSettlementConversionRate(String issuerSettlementConversionRate) {
    
    this.issuerSettlementConversionRate = issuerSettlementConversionRate;
    return this;
  }

   /**
   * Issuer Settlement Conversion Rate
   * @return issuerSettlementConversionRate
  **/
  @javax.annotation.Nullable
  public String getIssuerSettlementConversionRate() {
    return issuerSettlementConversionRate;
  }


  public void setIssuerSettlementConversionRate(String issuerSettlementConversionRate) {
    this.issuerSettlementConversionRate = issuerSettlementConversionRate;
  }


  public SingleMessageDetail localCompletionAmount(String localCompletionAmount) {
    
    this.localCompletionAmount = localCompletionAmount;
    return this;
  }

   /**
   * The monetary value appearing in this field represents the original completed amount of the transaction expressed in local currency.
   * @return localCompletionAmount
  **/
  @javax.annotation.Nullable
  public String getLocalCompletionAmount() {
    return localCompletionAmount;
  }


  public void setLocalCompletionAmount(String localCompletionAmount) {
    this.localCompletionAmount = localCompletionAmount;
  }


  public SingleMessageDetail localCurrencyCode(String localCurrencyCode) {
    
    this.localCurrencyCode = localCurrencyCode;
    return this;
  }

   /**
   * The code defining the currency of the transaction as it was submitted to the Single Message System. The Single Message System uses it to specify the currency used in localRequestedAmount
   * @return localCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getLocalCurrencyCode() {
    return localCurrencyCode;
  }


  public void setLocalCurrencyCode(String localCurrencyCode) {
    this.localCurrencyCode = localCurrencyCode;
  }


  public SingleMessageDetail localRequestedAmount(String localRequestedAmount) {
    
    this.localRequestedAmount = localRequestedAmount;
    return this;
  }

   /**
   * The amount of funds requested by the cardholder in the local currency of the acquirer or source location of the transaction.
   * @return localRequestedAmount
  **/
  @javax.annotation.Nullable
  public String getLocalRequestedAmount() {
    return localRequestedAmount;
  }


  public void setLocalRequestedAmount(String localRequestedAmount) {
    this.localRequestedAmount = localRequestedAmount;
  }


  public SingleMessageDetail mcElectronicIndicator(String mcElectronicIndicator) {
    
    this.mcElectronicIndicator = mcElectronicIndicator;
    return this;
  }

   /**
   * MC Electronic Indicator
   * @return mcElectronicIndicator
  **/
  @javax.annotation.Nullable
  public String getMcElectronicIndicator() {
    return mcElectronicIndicator;
  }


  public void setMcElectronicIndicator(String mcElectronicIndicator) {
    this.mcElectronicIndicator = mcElectronicIndicator;
  }


  public SingleMessageDetail mcResponseValue(String mcResponseValue) {
    
    this.mcResponseValue = mcResponseValue;
    return this;
  }

   /**
   * MC Response Value
   * @return mcResponseValue
  **/
  @javax.annotation.Nullable
  public String getMcResponseValue() {
    return mcResponseValue;
  }


  public void setMcResponseValue(String mcResponseValue) {
    this.mcResponseValue = mcResponseValue;
  }


  public SingleMessageDetail merchantCategoryCodeInfo(String merchantCategoryCodeInfo) {
    
    this.merchantCategoryCodeInfo = merchantCategoryCodeInfo;
    return this;
  }

   /**
   * Merchant Category Code Info
   * @return merchantCategoryCodeInfo
  **/
  @javax.annotation.Nullable
  public String getMerchantCategoryCodeInfo() {
    return merchantCategoryCodeInfo;
  }


  public void setMerchantCategoryCodeInfo(String merchantCategoryCodeInfo) {
    this.merchantCategoryCodeInfo = merchantCategoryCodeInfo;
  }


  public SingleMessageDetail merchantType(String merchantType) {
    
    this.merchantType = merchantType;
    return this;
  }

   /**
   * Card Acceptor Business Code. Identifies the card acceptor’s primary business.
   * @return merchantType
  **/
  @javax.annotation.Nullable
  public String getMerchantType() {
    return merchantType;
  }


  public void setMerchantType(String merchantType) {
    this.merchantType = merchantType;
  }


  public SingleMessageDetail originalCardHolderBillingAmount(String originalCardHolderBillingAmount) {
    
    this.originalCardHolderBillingAmount = originalCardHolderBillingAmount;
    return this;
  }

   /**
   * Amount the cardholder is billed by the issuing institution. The Cardholder Billing Amount is displayed with the local currency code and the decimal positioning of the local currency code.
   * @return originalCardHolderBillingAmount
  **/
  @javax.annotation.Nullable
  public String getOriginalCardHolderBillingAmount() {
    return originalCardHolderBillingAmount;
  }


  public void setOriginalCardHolderBillingAmount(String originalCardHolderBillingAmount) {
    this.originalCardHolderBillingAmount = originalCardHolderBillingAmount;
  }


  public SingleMessageDetail originalCardHolderBillingCurrency(String originalCardHolderBillingCurrency) {
    
    this.originalCardHolderBillingCurrency = originalCardHolderBillingCurrency;
    return this;
  }

   /**
   * Original CardHolder Billing Currency
   * @return originalCardHolderBillingCurrency
  **/
  @javax.annotation.Nullable
  public String getOriginalCardHolderBillingCurrency() {
    return originalCardHolderBillingCurrency;
  }


  public void setOriginalCardHolderBillingCurrency(String originalCardHolderBillingCurrency) {
    this.originalCardHolderBillingCurrency = originalCardHolderBillingCurrency;
  }


  public SingleMessageDetail originalCashbackAmount(String originalCashbackAmount) {
    
    this.originalCashbackAmount = originalCashbackAmount;
    return this;
  }

   /**
   * Original Cashback Amount
   * @return originalCashbackAmount
  **/
  @javax.annotation.Nullable
  public String getOriginalCashbackAmount() {
    return originalCashbackAmount;
  }


  public void setOriginalCashbackAmount(String originalCashbackAmount) {
    this.originalCashbackAmount = originalCashbackAmount;
  }


  public SingleMessageDetail originalCashbackCurrency(String originalCashbackCurrency) {
    
    this.originalCashbackCurrency = originalCashbackCurrency;
    return this;
  }

   /**
   * Original Cashback Currency
   * @return originalCashbackCurrency
  **/
  @javax.annotation.Nullable
  public String getOriginalCashbackCurrency() {
    return originalCashbackCurrency;
  }


  public void setOriginalCashbackCurrency(String originalCashbackCurrency) {
    this.originalCashbackCurrency = originalCashbackCurrency;
  }


  public SingleMessageDetail originalPurchaseAmount(String originalPurchaseAmount) {
    
    this.originalPurchaseAmount = originalPurchaseAmount;
    return this;
  }

   /**
   * This field is displayed only for partial approval transactions. The monetary value appearing in this field represents the original transaction amount expressed in local currency.
   * @return originalPurchaseAmount
  **/
  @javax.annotation.Nullable
  public String getOriginalPurchaseAmount() {
    return originalPurchaseAmount;
  }


  public void setOriginalPurchaseAmount(String originalPurchaseAmount) {
    this.originalPurchaseAmount = originalPurchaseAmount;
  }


  public SingleMessageDetail ownerID(String ownerID) {
    
    this.ownerID = ownerID;
    return this;
  }

   /**
   * Owner ID
   * @return ownerID
  **/
  @javax.annotation.Nullable
  public String getOwnerID() {
    return ownerID;
  }


  public void setOwnerID(String ownerID) {
    this.ownerID = ownerID;
  }


  public SingleMessageDetail pointOfServiceAmount(String pointOfServiceAmount) {
    
    this.pointOfServiceAmount = pointOfServiceAmount;
    return this;
  }

   /**
   * Point Of Service Amount
   * @return pointOfServiceAmount
  **/
  @javax.annotation.Nullable
  public String getPointOfServiceAmount() {
    return pointOfServiceAmount;
  }


  public void setPointOfServiceAmount(String pointOfServiceAmount) {
    this.pointOfServiceAmount = pointOfServiceAmount;
  }


  public SingleMessageDetail pointOfServiceCurrency(String pointOfServiceCurrency) {
    
    this.pointOfServiceCurrency = pointOfServiceCurrency;
    return this;
  }

   /**
   * Point Of Service Currency
   * @return pointOfServiceCurrency
  **/
  @javax.annotation.Nullable
  public String getPointOfServiceCurrency() {
    return pointOfServiceCurrency;
  }


  public void setPointOfServiceCurrency(String pointOfServiceCurrency) {
    this.pointOfServiceCurrency = pointOfServiceCurrency;
  }


  public SingleMessageDetail posData(String posData) {
    
    this.posData = posData;
    return this;
  }

   /**
   * Displays the contents of Point of Service [POS] Data, which contain terminal and other Point of Service information
   * @return posData
  **/
  @javax.annotation.Nullable
  public String getPosData() {
    return posData;
  }


  public void setPosData(String posData) {
    this.posData = posData;
  }


  public SingleMessageDetail posEntry(String posEntry) {
    
    this.posEntry = posEntry;
    return this;
  }

   /**
   *  Indicates the method used to enter the PAN into the terminal device and the PIN entry capability of that device.
   * @return posEntry
  **/
  @javax.annotation.Nullable
  public String getPosEntry() {
    return posEntry;
  }


  public void setPosEntry(String posEntry) {
    this.posEntry = posEntry;
  }


  public SingleMessageDetail primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Series of digits used to identify a customer account or relationship.
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public SingleMessageDetail primaryAccountNumberSequenceNumber(String primaryAccountNumberSequenceNumber) {
    
    this.primaryAccountNumberSequenceNumber = primaryAccountNumberSequenceNumber;
    return this;
  }

   /**
   * Primary Account Number Sequence Number
   * @return primaryAccountNumberSequenceNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumberSequenceNumber() {
    return primaryAccountNumberSequenceNumber;
  }


  public void setPrimaryAccountNumberSequenceNumber(String primaryAccountNumberSequenceNumber) {
    this.primaryAccountNumberSequenceNumber = primaryAccountNumberSequenceNumber;
  }


  public SingleMessageDetail processingCode(String processingCode) {
    
    this.processingCode = processingCode;
    return this;
  }

   /**
   * Series of digits used to describe the effect of a transaction on the customer account and the type of accounts affected.
   * @return processingCode
  **/
  @javax.annotation.Nullable
  public String getProcessingCode() {
    return processingCode;
  }


  public void setProcessingCode(String processingCode) {
    this.processingCode = processingCode;
  }


  public SingleMessageDetail productIdentifierCode(String productIdentifierCode) {
    
    this.productIdentifierCode = productIdentifierCode;
    return this;
  }

   /**
   * Provides issuers additional information about Product ID, also known as product code
   * @return productIdentifierCode
  **/
  @javax.annotation.Nullable
  public String getProductIdentifierCode() {
    return productIdentifierCode;
  }


  public void setProductIdentifierCode(String productIdentifierCode) {
    this.productIdentifierCode = productIdentifierCode;
  }


  public SingleMessageDetail programIndicator(String programIndicator) {
    
    this.programIndicator = programIndicator;
    return this;
  }

   /**
   * A special Debit Mastercard promotion program code displayed from GCMS.
   * @return programIndicator
  **/
  @javax.annotation.Nullable
  public String getProgramIndicator() {
    return programIndicator;
  }


  public void setProgramIndicator(String programIndicator) {
    this.programIndicator = programIndicator;
  }


  public SingleMessageDetail qpsPayPassChargebackElgibility(String qpsPayPassChargebackElgibility) {
    
    this.qpsPayPassChargebackElgibility = qpsPayPassChargebackElgibility;
    return this;
  }

   /**
   * Debit Mastercard field only. A value of I indicates that the transaction is not eligible for a chargeback with reason codes 0001, 0002 or 0037
   * @return qpsPayPassChargebackElgibility
  **/
  @javax.annotation.Nullable
  public String getQpsPayPassChargebackElgibility() {
    return qpsPayPassChargebackElgibility;
  }


  public void setQpsPayPassChargebackElgibility(String qpsPayPassChargebackElgibility) {
    this.qpsPayPassChargebackElgibility = qpsPayPassChargebackElgibility;
  }


  public SingleMessageDetail referenceNumber(String referenceNumber) {
    
    this.referenceNumber = referenceNumber;
    return this;
  }

   /**
   * The retrieval reference number from the original transaction is typically printed on the cardholders transaction receipt. This field is populated by the acquirer.
   * @return referenceNumber
  **/
  @javax.annotation.Nullable
  public String getReferenceNumber() {
    return referenceNumber;
  }


  public void setReferenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }


  public SingleMessageDetail responseCode(String responseCode) {
    
    this.responseCode = responseCode;
    return this;
  }

   /**
   * This field displays the disposition of a message.
   * @return responseCode
  **/
  @javax.annotation.Nullable
  public String getResponseCode() {
    return responseCode;
  }


  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }


  public SingleMessageDetail responseSource(String responseSource) {
    
    this.responseSource = responseSource;
    return this;
  }

   /**
   * M &#x3D; The decline was initiated by the member/issuer, S &#x3D; The decline was initiated by the Single Message System.
   * @return responseSource
  **/
  @javax.annotation.Nullable
  public String getResponseSource() {
    return responseSource;
  }


  public void setResponseSource(String responseSource) {
    this.responseSource = responseSource;
  }


  public SingleMessageDetail serviceCode(String serviceCode) {
    
    this.serviceCode = serviceCode;
    return this;
  }

   /**
   * This field displays the extended service code of Track 2 data indicating the transaction acceptance parameters of a magnetic stripe card. When paired with the POS Entry Mode, acquirers will be able to validate whether the issuer is properly utilizing the Chip Liability Shift chargeback
   * @return serviceCode
  **/
  @javax.annotation.Nullable
  public String getServiceCode() {
    return serviceCode;
  }


  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }


  public SingleMessageDetail serviceLevelIndicator(String serviceLevelIndicator) {
    
    this.serviceLevelIndicator = serviceLevelIndicator;
    return this;
  }

   /**
   * Service Level Indicator
   * @return serviceLevelIndicator
  **/
  @javax.annotation.Nullable
  public String getServiceLevelIndicator() {
    return serviceLevelIndicator;
  }


  public void setServiceLevelIndicator(String serviceLevelIndicator) {
    this.serviceLevelIndicator = serviceLevelIndicator;
  }


  public SingleMessageDetail settlementDate(String settlementDate) {
    
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Date (month and day) that Mastercard uses to group the transactions for reporting and for subsequent settlement: Format: MMDDYY
   * @return settlementDate
  **/
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }


  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public SingleMessageDetail settlementDatePosition(String settlementDatePosition) {
    
    this.settlementDatePosition = settlementDatePosition;
    return this;
  }

   /**
   * Settlement Date Position
   * @return settlementDatePosition
  **/
  @javax.annotation.Nullable
  public String getSettlementDatePosition() {
    return settlementDatePosition;
  }


  public void setSettlementDatePosition(String settlementDatePosition) {
    this.settlementDatePosition = settlementDatePosition;
  }


  public SingleMessageDetail settlementServiceConfiguration(String settlementServiceConfiguration) {
    
    this.settlementServiceConfiguration = settlementServiceConfiguration;
    return this;
  }

   /**
   * Settlement Service Configuration (SSC) records define the business day and time of settlement for a transaction. The Settlement Service Configuration Indicator (SSC ID) describes which Single Message System Settlemetn Service record was used for the transaction.�� The SSC ID is assigned to a transaction based on a combination of the following values: product, interchange type, ISIS agreement, and region.
   * @return settlementServiceConfiguration
  **/
  @javax.annotation.Nullable
  public String getSettlementServiceConfiguration() {
    return settlementServiceConfiguration;
  }


  public void setSettlementServiceConfiguration(String settlementServiceConfiguration) {
    this.settlementServiceConfiguration = settlementServiceConfiguration;
  }


  public SingleMessageDetail surchargeFreeIndicator(String surchargeFreeIndicator) {
    
    this.surchargeFreeIndicator = surchargeFreeIndicator;
    return this;
  }

   /**
   * This field will identify an eligible transaction with the a specific identifier of the related program.� Transactions that are not eligible will be identified with value N.
   * @return surchargeFreeIndicator
  **/
  @javax.annotation.Nullable
  public String getSurchargeFreeIndicator() {
    return surchargeFreeIndicator;
  }


  public void setSurchargeFreeIndicator(String surchargeFreeIndicator) {
    this.surchargeFreeIndicator = surchargeFreeIndicator;
  }


  public SingleMessageDetail switchDateTime(String switchDateTime) {
    
    this.switchDateTime = switchDateTime;
    return this;
  }

   /**
   * Date and time Mastercard routes the transaction to the issuer  (MMDDHHMMSS)
   * @return switchDateTime
  **/
  @javax.annotation.Nullable
  public String getSwitchDateTime() {
    return switchDateTime;
  }


  public void setSwitchDateTime(String switchDateTime) {
    this.switchDateTime = switchDateTime;
  }


  public SingleMessageDetail switchSerialNumber(String switchSerialNumber) {
    
    this.switchSerialNumber = switchSerialNumber;
    return this;
  }

   /**
   * Describes a unique transaction identification number generated (or assigned) by the Single Message System
   * @return switchSerialNumber
  **/
  @javax.annotation.Nullable
  public String getSwitchSerialNumber() {
    return switchSerialNumber;
  }


  public void setSwitchSerialNumber(String switchSerialNumber) {
    this.switchSerialNumber = switchSerialNumber;
  }


  public SingleMessageDetail switchSerialNumberPosition(String switchSerialNumberPosition) {
    
    this.switchSerialNumberPosition = switchSerialNumberPosition;
    return this;
  }

   /**
   * Switch Serial Number Position
   * @return switchSerialNumberPosition
  **/
  @javax.annotation.Nullable
  public String getSwitchSerialNumberPosition() {
    return switchSerialNumberPosition;
  }


  public void setSwitchSerialNumberPosition(String switchSerialNumberPosition) {
    this.switchSerialNumberPosition = switchSerialNumberPosition;
  }


  public SingleMessageDetail switchTime(String switchTime) {
    
    this.switchTime = switchTime;
    return this;
  }

   /**
   * Time that Mastercard routes the transaction to the issuer
   * @return switchTime
  **/
  @javax.annotation.Nullable
  public String getSwitchTime() {
    return switchTime;
  }


  public void setSwitchTime(String switchTime) {
    this.switchTime = switchTime;
  }


  public SingleMessageDetail terminalID(String terminalID) {
    
    this.terminalID = terminalID;
    return this;
  }

   /**
   * The Terminal ID is the unique identification number assigned by the acquirer to each terminal
   * @return terminalID
  **/
  @javax.annotation.Nullable
  public String getTerminalID() {
    return terminalID;
  }


  public void setTerminalID(String terminalID) {
    this.terminalID = terminalID;
  }


  public SingleMessageDetail trace(String trace) {
    
    this.trace = trace;
    return this;
  }

   /**
   * Unique identifier assigned to each transaction by the originator of the message
   * @return trace
  **/
  @javax.annotation.Nullable
  public String getTrace() {
    return trace;
  }


  public void setTrace(String trace) {
    this.trace = trace;
  }


  public SingleMessageDetail transactionCategoryCode(String transactionCategoryCode) {
    
    this.transactionCategoryCode = transactionCategoryCode;
    return this;
  }

   /**
   * Transaction Category Code
   * @return transactionCategoryCode
  **/
  @javax.annotation.Nullable
  public String getTransactionCategoryCode() {
    return transactionCategoryCode;
  }


  public void setTransactionCategoryCode(String transactionCategoryCode) {
    this.transactionCategoryCode = transactionCategoryCode;
  }


  public SingleMessageDetail transactionClass(String transactionClass) {
    
    this.transactionClass = transactionClass;
    return this;
  }

   /**
   * Displays the Transaction Class. For transactions submitted to the Single Message System, this field consists of the following: the source product type, the entry device, and fee classification
   * @return transactionClass
  **/
  @javax.annotation.Nullable
  public String getTransactionClass() {
    return transactionClass;
  }


  public void setTransactionClass(String transactionClass) {
    this.transactionClass = transactionClass;
  }


  public SingleMessageDetail transactionDateTime(String transactionDateTime) {
    
    this.transactionDateTime = transactionDateTime;
    return this;
  }

   /**
   * Date and time a message was transmitted by a processing entity, to be expressed in Coordinated Universal Time (UTC).
   * @return transactionDateTime
  **/
  @javax.annotation.Nullable
  public String getTransactionDateTime() {
    return transactionDateTime;
  }


  public void setTransactionDateTime(String transactionDateTime) {
    this.transactionDateTime = transactionDateTime;
  }


  public SingleMessageDetail transitData(String transitData) {
    
    this.transitData = transitData;
    return this;
  }

   /**
   * Transit Data
   * @return transitData
  **/
  @javax.annotation.Nullable
  public String getTransitData() {
    return transitData;
  }


  public void setTransitData(String transitData) {
    this.transitData = transitData;
  }


  public SingleMessageDetail tranType(String tranType) {
    
    this.tranType = tranType;
    return this;
  }

   /**
   * Tran Type
   * @return tranType
  **/
  @javax.annotation.Nullable
  public String getTranType() {
    return tranType;
  }


  public void setTranType(String tranType) {
    this.tranType = tranType;
  }


  public SingleMessageDetail universalCardAuthenticationFee(String universalCardAuthenticationFee) {
    
    this.universalCardAuthenticationFee = universalCardAuthenticationFee;
    return this;
  }

   /**
   * Universal Cardholder Authentication Field (UCAF) displays data systems used to communicate authentication information among cardholder, issuer, merchant, and acquirer communities
   * @return universalCardAuthenticationFee
  **/
  @javax.annotation.Nullable
  public String getUniversalCardAuthenticationFee() {
    return universalCardAuthenticationFee;
  }


  public void setUniversalCardAuthenticationFee(String universalCardAuthenticationFee) {
    this.universalCardAuthenticationFee = universalCardAuthenticationFee;
  }


  public SingleMessageDetail usageCode(String usageCode) {
    
    this.usageCode = usageCode;
    return this;
  }

   /**
   * Chargeback and retrieval request usage codes. The usage code indicates the type of chargeback record processed.
   * @return usageCode
  **/
  @javax.annotation.Nullable
  public String getUsageCode() {
    return usageCode;
  }


  public void setUsageCode(String usageCode) {
    this.usageCode = usageCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleMessageDetail singleMessageDetail = (SingleMessageDetail) o;
    return Objects.equals(this.acqLocCntry, singleMessageDetail.acqLocCntry) &&
        Objects.equals(this.acquirerAddress, singleMessageDetail.acquirerAddress) &&
        Objects.equals(this.acquirerAdjustmentSettlementAmount, singleMessageDetail.acquirerAdjustmentSettlementAmount) &&
        Objects.equals(this.acquirerAdjustmentSettlementAmountIndicator, singleMessageDetail.acquirerAdjustmentSettlementAmountIndicator) &&
        Objects.equals(this.acquirerAdjustmentSettlementCompletionAmount, singleMessageDetail.acquirerAdjustmentSettlementCompletionAmount) &&
        Objects.equals(this.acquirerAdjustmentSettlementCurrency, singleMessageDetail.acquirerAdjustmentSettlementCurrency) &&
        Objects.equals(this.acquirerAdviceReason, singleMessageDetail.acquirerAdviceReason) &&
        Objects.equals(this.acquirerBridgedICA, singleMessageDetail.acquirerBridgedICA) &&
        Objects.equals(this.acquirerCity, singleMessageDetail.acquirerCity) &&
        Objects.equals(this.acquirerCurrencyConversionRate, singleMessageDetail.acquirerCurrencyConversionRate) &&
        Objects.equals(this.acquirerInstitutionNumber, singleMessageDetail.acquirerInstitutionNumber) &&
        Objects.equals(this.acquirerInterchangeAmount, singleMessageDetail.acquirerInterchangeAmount) &&
        Objects.equals(this.acquirerInterchangeCurrency, singleMessageDetail.acquirerInterchangeCurrency) &&
        Objects.equals(this.acquirerName, singleMessageDetail.acquirerName) &&
        Objects.equals(this.acquirerProcessorID, singleMessageDetail.acquirerProcessorID) &&
        Objects.equals(this.acquirerReferenceNumber, singleMessageDetail.acquirerReferenceNumber) &&
        Objects.equals(this.acquirerSettlementCompletionAmount, singleMessageDetail.acquirerSettlementCompletionAmount) &&
        Objects.equals(this.acquirerSettlementCompletionCurrency, singleMessageDetail.acquirerSettlementCompletionCurrency) &&
        Objects.equals(this.acquirerSettlementConversionRate, singleMessageDetail.acquirerSettlementConversionRate) &&
        Objects.equals(this.additionalAdvice, singleMessageDetail.additionalAdvice) &&
        Objects.equals(this.additionalPOSData, singleMessageDetail.additionalPOSData) &&
        Objects.equals(this.additionalResponse, singleMessageDetail.additionalResponse) &&
        Objects.equals(this.adjustmentAdviceReason, singleMessageDetail.adjustmentAdviceReason) &&
        Objects.equals(this.adjustmentCashbackAmount, singleMessageDetail.adjustmentCashbackAmount) &&
        Objects.equals(this.adjustmentDate, singleMessageDetail.adjustmentDate) &&
        Objects.equals(this.adjustmentPurchaseAmount, singleMessageDetail.adjustmentPurchaseAmount) &&
        Objects.equals(this.afaMember, singleMessageDetail.afaMember) &&
        Objects.equals(this.alternatePrimaryAccountNumber, singleMessageDetail.alternatePrimaryAccountNumber) &&
        Objects.equals(this.amountICCR, singleMessageDetail.amountICCR) &&
        Objects.equals(this.atmPosFlag, singleMessageDetail.atmPosFlag) &&
        Objects.equals(this.banknetReferenceNumber, singleMessageDetail.banknetReferenceNumber) &&
        Objects.equals(this.bridgingICA, singleMessageDetail.bridgingICA) &&
        Objects.equals(this.businessActivity, singleMessageDetail.businessActivity) &&
        Objects.equals(this.cashBackAmount, singleMessageDetail.cashBackAmount) &&
        Objects.equals(this.cashBackCurrency, singleMessageDetail.cashBackCurrency) &&
        Objects.equals(this.catLevel, singleMessageDetail.catLevel) &&
        Objects.equals(this.cccaIssuerBankName, singleMessageDetail.cccaIssuerBankName) &&
        Objects.equals(this.chipFlag, singleMessageDetail.chipFlag) &&
        Objects.equals(this.conditionCode, singleMessageDetail.conditionCode) &&
        Objects.equals(this.corporateCardIndicator, singleMessageDetail.corporateCardIndicator) &&
        Objects.equals(this.creditLineUsageFee, singleMessageDetail.creditLineUsageFee) &&
        Objects.equals(this.crossBorderIndicator, singleMessageDetail.crossBorderIndicator) &&
        Objects.equals(this.currencyConversionAssesementAmount, singleMessageDetail.currencyConversionAssesementAmount) &&
        Objects.equals(this.currencyConversionAssesementCurrency, singleMessageDetail.currencyConversionAssesementCurrency) &&
        Objects.equals(this.currencyConversionIndicator, singleMessageDetail.currencyConversionIndicator) &&
        Objects.equals(this.cvc2ProgramValidationCode, singleMessageDetail.cvc2ProgramValidationCode) &&
        Objects.equals(this.documentIndicator, singleMessageDetail.documentIndicator) &&
        Objects.equals(this.feesInterChgAcqLoc, singleMessageDetail.feesInterChgAcqLoc) &&
        Objects.equals(this.financialInstitutionID, singleMessageDetail.financialInstitutionID) &&
        Objects.equals(this.fraudDate, singleMessageDetail.fraudDate) &&
        Objects.equals(this.fraudDeviceType, singleMessageDetail.fraudDeviceType) &&
        Objects.equals(this.fraudType, singleMessageDetail.fraudType) &&
        Objects.equals(this.gcmsAdviceCode, singleMessageDetail.gcmsAdviceCode) &&
        Objects.equals(this.gcmsSettlementDate, singleMessageDetail.gcmsSettlementDate) &&
        Objects.equals(this.issuerAdjustmentSettlementAmount, singleMessageDetail.issuerAdjustmentSettlementAmount) &&
        Objects.equals(this.issuerAdjustmentSettlementAmountIndicator, singleMessageDetail.issuerAdjustmentSettlementAmountIndicator) &&
        Objects.equals(this.issuerAdjustmentSettlementCompletionAmount, singleMessageDetail.issuerAdjustmentSettlementCompletionAmount) &&
        Objects.equals(this.issuerAdjustmentSettlementCurrency, singleMessageDetail.issuerAdjustmentSettlementCurrency) &&
        Objects.equals(this.issuerAdviceReason, singleMessageDetail.issuerAdviceReason) &&
        Objects.equals(this.issuerCurrencyConversionRate, singleMessageDetail.issuerCurrencyConversionRate) &&
        Objects.equals(this.issuerICA, singleMessageDetail.issuerICA) &&
        Objects.equals(this.issuerInstitutionNumber, singleMessageDetail.issuerInstitutionNumber) &&
        Objects.equals(this.issuerInterchangeAmount, singleMessageDetail.issuerInterchangeAmount) &&
        Objects.equals(this.issuerInterchangeCurrency, singleMessageDetail.issuerInterchangeCurrency) &&
        Objects.equals(this.issuerProcessorID, singleMessageDetail.issuerProcessorID) &&
        Objects.equals(this.issuerSettlementCompletionAmount, singleMessageDetail.issuerSettlementCompletionAmount) &&
        Objects.equals(this.issuerSettlementCompletionCurrency, singleMessageDetail.issuerSettlementCompletionCurrency) &&
        Objects.equals(this.issuerSettlementConversionRate, singleMessageDetail.issuerSettlementConversionRate) &&
        Objects.equals(this.localCompletionAmount, singleMessageDetail.localCompletionAmount) &&
        Objects.equals(this.localCurrencyCode, singleMessageDetail.localCurrencyCode) &&
        Objects.equals(this.localRequestedAmount, singleMessageDetail.localRequestedAmount) &&
        Objects.equals(this.mcElectronicIndicator, singleMessageDetail.mcElectronicIndicator) &&
        Objects.equals(this.mcResponseValue, singleMessageDetail.mcResponseValue) &&
        Objects.equals(this.merchantCategoryCodeInfo, singleMessageDetail.merchantCategoryCodeInfo) &&
        Objects.equals(this.merchantType, singleMessageDetail.merchantType) &&
        Objects.equals(this.originalCardHolderBillingAmount, singleMessageDetail.originalCardHolderBillingAmount) &&
        Objects.equals(this.originalCardHolderBillingCurrency, singleMessageDetail.originalCardHolderBillingCurrency) &&
        Objects.equals(this.originalCashbackAmount, singleMessageDetail.originalCashbackAmount) &&
        Objects.equals(this.originalCashbackCurrency, singleMessageDetail.originalCashbackCurrency) &&
        Objects.equals(this.originalPurchaseAmount, singleMessageDetail.originalPurchaseAmount) &&
        Objects.equals(this.ownerID, singleMessageDetail.ownerID) &&
        Objects.equals(this.pointOfServiceAmount, singleMessageDetail.pointOfServiceAmount) &&
        Objects.equals(this.pointOfServiceCurrency, singleMessageDetail.pointOfServiceCurrency) &&
        Objects.equals(this.posData, singleMessageDetail.posData) &&
        Objects.equals(this.posEntry, singleMessageDetail.posEntry) &&
        Objects.equals(this.primaryAccountNumber, singleMessageDetail.primaryAccountNumber) &&
        Objects.equals(this.primaryAccountNumberSequenceNumber, singleMessageDetail.primaryAccountNumberSequenceNumber) &&
        Objects.equals(this.processingCode, singleMessageDetail.processingCode) &&
        Objects.equals(this.productIdentifierCode, singleMessageDetail.productIdentifierCode) &&
        Objects.equals(this.programIndicator, singleMessageDetail.programIndicator) &&
        Objects.equals(this.qpsPayPassChargebackElgibility, singleMessageDetail.qpsPayPassChargebackElgibility) &&
        Objects.equals(this.referenceNumber, singleMessageDetail.referenceNumber) &&
        Objects.equals(this.responseCode, singleMessageDetail.responseCode) &&
        Objects.equals(this.responseSource, singleMessageDetail.responseSource) &&
        Objects.equals(this.serviceCode, singleMessageDetail.serviceCode) &&
        Objects.equals(this.serviceLevelIndicator, singleMessageDetail.serviceLevelIndicator) &&
        Objects.equals(this.settlementDate, singleMessageDetail.settlementDate) &&
        Objects.equals(this.settlementDatePosition, singleMessageDetail.settlementDatePosition) &&
        Objects.equals(this.settlementServiceConfiguration, singleMessageDetail.settlementServiceConfiguration) &&
        Objects.equals(this.surchargeFreeIndicator, singleMessageDetail.surchargeFreeIndicator) &&
        Objects.equals(this.switchDateTime, singleMessageDetail.switchDateTime) &&
        Objects.equals(this.switchSerialNumber, singleMessageDetail.switchSerialNumber) &&
        Objects.equals(this.switchSerialNumberPosition, singleMessageDetail.switchSerialNumberPosition) &&
        Objects.equals(this.switchTime, singleMessageDetail.switchTime) &&
        Objects.equals(this.terminalID, singleMessageDetail.terminalID) &&
        Objects.equals(this.trace, singleMessageDetail.trace) &&
        Objects.equals(this.transactionCategoryCode, singleMessageDetail.transactionCategoryCode) &&
        Objects.equals(this.transactionClass, singleMessageDetail.transactionClass) &&
        Objects.equals(this.transactionDateTime, singleMessageDetail.transactionDateTime) &&
        Objects.equals(this.transitData, singleMessageDetail.transitData) &&
        Objects.equals(this.tranType, singleMessageDetail.tranType) &&
        Objects.equals(this.universalCardAuthenticationFee, singleMessageDetail.universalCardAuthenticationFee) &&
        Objects.equals(this.usageCode, singleMessageDetail.usageCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acqLocCntry, acquirerAddress, acquirerAdjustmentSettlementAmount, acquirerAdjustmentSettlementAmountIndicator, acquirerAdjustmentSettlementCompletionAmount, acquirerAdjustmentSettlementCurrency, acquirerAdviceReason, acquirerBridgedICA, acquirerCity, acquirerCurrencyConversionRate, acquirerInstitutionNumber, acquirerInterchangeAmount, acquirerInterchangeCurrency, acquirerName, acquirerProcessorID, acquirerReferenceNumber, acquirerSettlementCompletionAmount, acquirerSettlementCompletionCurrency, acquirerSettlementConversionRate, additionalAdvice, additionalPOSData, additionalResponse, adjustmentAdviceReason, adjustmentCashbackAmount, adjustmentDate, adjustmentPurchaseAmount, afaMember, alternatePrimaryAccountNumber, amountICCR, atmPosFlag, banknetReferenceNumber, bridgingICA, businessActivity, cashBackAmount, cashBackCurrency, catLevel, cccaIssuerBankName, chipFlag, conditionCode, corporateCardIndicator, creditLineUsageFee, crossBorderIndicator, currencyConversionAssesementAmount, currencyConversionAssesementCurrency, currencyConversionIndicator, cvc2ProgramValidationCode, documentIndicator, feesInterChgAcqLoc, financialInstitutionID, fraudDate, fraudDeviceType, fraudType, gcmsAdviceCode, gcmsSettlementDate, issuerAdjustmentSettlementAmount, issuerAdjustmentSettlementAmountIndicator, issuerAdjustmentSettlementCompletionAmount, issuerAdjustmentSettlementCurrency, issuerAdviceReason, issuerCurrencyConversionRate, issuerICA, issuerInstitutionNumber, issuerInterchangeAmount, issuerInterchangeCurrency, issuerProcessorID, issuerSettlementCompletionAmount, issuerSettlementCompletionCurrency, issuerSettlementConversionRate, localCompletionAmount, localCurrencyCode, localRequestedAmount, mcElectronicIndicator, mcResponseValue, merchantCategoryCodeInfo, merchantType, originalCardHolderBillingAmount, originalCardHolderBillingCurrency, originalCashbackAmount, originalCashbackCurrency, originalPurchaseAmount, ownerID, pointOfServiceAmount, pointOfServiceCurrency, posData, posEntry, primaryAccountNumber, primaryAccountNumberSequenceNumber, processingCode, productIdentifierCode, programIndicator, qpsPayPassChargebackElgibility, referenceNumber, responseCode, responseSource, serviceCode, serviceLevelIndicator, settlementDate, settlementDatePosition, settlementServiceConfiguration, surchargeFreeIndicator, switchDateTime, switchSerialNumber, switchSerialNumberPosition, switchTime, terminalID, trace, transactionCategoryCode, transactionClass, transactionDateTime, transitData, tranType, universalCardAuthenticationFee, usageCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleMessageDetail {\n");
    sb.append("    acqLocCntry: ").append(toIndentedString(acqLocCntry)).append("\n");
    sb.append("    acquirerAddress: ").append(toIndentedString(acquirerAddress)).append("\n");
    sb.append("    acquirerAdjustmentSettlementAmount: ").append(toIndentedString(acquirerAdjustmentSettlementAmount)).append("\n");
    sb.append("    acquirerAdjustmentSettlementAmountIndicator: ").append(toIndentedString(acquirerAdjustmentSettlementAmountIndicator)).append("\n");
    sb.append("    acquirerAdjustmentSettlementCompletionAmount: ").append(toIndentedString(acquirerAdjustmentSettlementCompletionAmount)).append("\n");
    sb.append("    acquirerAdjustmentSettlementCurrency: ").append(toIndentedString(acquirerAdjustmentSettlementCurrency)).append("\n");
    sb.append("    acquirerAdviceReason: ").append(toIndentedString(acquirerAdviceReason)).append("\n");
    sb.append("    acquirerBridgedICA: ").append(toIndentedString(acquirerBridgedICA)).append("\n");
    sb.append("    acquirerCity: ").append(toIndentedString(acquirerCity)).append("\n");
    sb.append("    acquirerCurrencyConversionRate: ").append(toIndentedString(acquirerCurrencyConversionRate)).append("\n");
    sb.append("    acquirerInstitutionNumber: ").append(toIndentedString(acquirerInstitutionNumber)).append("\n");
    sb.append("    acquirerInterchangeAmount: ").append(toIndentedString(acquirerInterchangeAmount)).append("\n");
    sb.append("    acquirerInterchangeCurrency: ").append(toIndentedString(acquirerInterchangeCurrency)).append("\n");
    sb.append("    acquirerName: ").append(toIndentedString(acquirerName)).append("\n");
    sb.append("    acquirerProcessorID: ").append(toIndentedString(acquirerProcessorID)).append("\n");
    sb.append("    acquirerReferenceNumber: ").append(toIndentedString(acquirerReferenceNumber)).append("\n");
    sb.append("    acquirerSettlementCompletionAmount: ").append(toIndentedString(acquirerSettlementCompletionAmount)).append("\n");
    sb.append("    acquirerSettlementCompletionCurrency: ").append(toIndentedString(acquirerSettlementCompletionCurrency)).append("\n");
    sb.append("    acquirerSettlementConversionRate: ").append(toIndentedString(acquirerSettlementConversionRate)).append("\n");
    sb.append("    additionalAdvice: ").append(toIndentedString(additionalAdvice)).append("\n");
    sb.append("    additionalPOSData: ").append(toIndentedString(additionalPOSData)).append("\n");
    sb.append("    additionalResponse: ").append(toIndentedString(additionalResponse)).append("\n");
    sb.append("    adjustmentAdviceReason: ").append(toIndentedString(adjustmentAdviceReason)).append("\n");
    sb.append("    adjustmentCashbackAmount: ").append(toIndentedString(adjustmentCashbackAmount)).append("\n");
    sb.append("    adjustmentDate: ").append(toIndentedString(adjustmentDate)).append("\n");
    sb.append("    adjustmentPurchaseAmount: ").append(toIndentedString(adjustmentPurchaseAmount)).append("\n");
    sb.append("    afaMember: ").append(toIndentedString(afaMember)).append("\n");
    sb.append("    alternatePrimaryAccountNumber: ").append(toIndentedString(alternatePrimaryAccountNumber)).append("\n");
    sb.append("    amountICCR: ").append(toIndentedString(amountICCR)).append("\n");
    sb.append("    atmPosFlag: ").append(toIndentedString(atmPosFlag)).append("\n");
    sb.append("    banknetReferenceNumber: ").append(toIndentedString(banknetReferenceNumber)).append("\n");
    sb.append("    bridgingICA: ").append(toIndentedString(bridgingICA)).append("\n");
    sb.append("    businessActivity: ").append(toIndentedString(businessActivity)).append("\n");
    sb.append("    cashBackAmount: ").append(toIndentedString(cashBackAmount)).append("\n");
    sb.append("    cashBackCurrency: ").append(toIndentedString(cashBackCurrency)).append("\n");
    sb.append("    catLevel: ").append(toIndentedString(catLevel)).append("\n");
    sb.append("    cccaIssuerBankName: ").append(toIndentedString(cccaIssuerBankName)).append("\n");
    sb.append("    chipFlag: ").append(toIndentedString(chipFlag)).append("\n");
    sb.append("    conditionCode: ").append(toIndentedString(conditionCode)).append("\n");
    sb.append("    corporateCardIndicator: ").append(toIndentedString(corporateCardIndicator)).append("\n");
    sb.append("    creditLineUsageFee: ").append(toIndentedString(creditLineUsageFee)).append("\n");
    sb.append("    crossBorderIndicator: ").append(toIndentedString(crossBorderIndicator)).append("\n");
    sb.append("    currencyConversionAssesementAmount: ").append(toIndentedString(currencyConversionAssesementAmount)).append("\n");
    sb.append("    currencyConversionAssesementCurrency: ").append(toIndentedString(currencyConversionAssesementCurrency)).append("\n");
    sb.append("    currencyConversionIndicator: ").append(toIndentedString(currencyConversionIndicator)).append("\n");
    sb.append("    cvc2ProgramValidationCode: ").append(toIndentedString(cvc2ProgramValidationCode)).append("\n");
    sb.append("    documentIndicator: ").append(toIndentedString(documentIndicator)).append("\n");
    sb.append("    feesInterChgAcqLoc: ").append(toIndentedString(feesInterChgAcqLoc)).append("\n");
    sb.append("    financialInstitutionID: ").append(toIndentedString(financialInstitutionID)).append("\n");
    sb.append("    fraudDate: ").append(toIndentedString(fraudDate)).append("\n");
    sb.append("    fraudDeviceType: ").append(toIndentedString(fraudDeviceType)).append("\n");
    sb.append("    fraudType: ").append(toIndentedString(fraudType)).append("\n");
    sb.append("    gcmsAdviceCode: ").append(toIndentedString(gcmsAdviceCode)).append("\n");
    sb.append("    gcmsSettlementDate: ").append(toIndentedString(gcmsSettlementDate)).append("\n");
    sb.append("    issuerAdjustmentSettlementAmount: ").append(toIndentedString(issuerAdjustmentSettlementAmount)).append("\n");
    sb.append("    issuerAdjustmentSettlementAmountIndicator: ").append(toIndentedString(issuerAdjustmentSettlementAmountIndicator)).append("\n");
    sb.append("    issuerAdjustmentSettlementCompletionAmount: ").append(toIndentedString(issuerAdjustmentSettlementCompletionAmount)).append("\n");
    sb.append("    issuerAdjustmentSettlementCurrency: ").append(toIndentedString(issuerAdjustmentSettlementCurrency)).append("\n");
    sb.append("    issuerAdviceReason: ").append(toIndentedString(issuerAdviceReason)).append("\n");
    sb.append("    issuerCurrencyConversionRate: ").append(toIndentedString(issuerCurrencyConversionRate)).append("\n");
    sb.append("    issuerICA: ").append(toIndentedString(issuerICA)).append("\n");
    sb.append("    issuerInstitutionNumber: ").append(toIndentedString(issuerInstitutionNumber)).append("\n");
    sb.append("    issuerInterchangeAmount: ").append(toIndentedString(issuerInterchangeAmount)).append("\n");
    sb.append("    issuerInterchangeCurrency: ").append(toIndentedString(issuerInterchangeCurrency)).append("\n");
    sb.append("    issuerProcessorID: ").append(toIndentedString(issuerProcessorID)).append("\n");
    sb.append("    issuerSettlementCompletionAmount: ").append(toIndentedString(issuerSettlementCompletionAmount)).append("\n");
    sb.append("    issuerSettlementCompletionCurrency: ").append(toIndentedString(issuerSettlementCompletionCurrency)).append("\n");
    sb.append("    issuerSettlementConversionRate: ").append(toIndentedString(issuerSettlementConversionRate)).append("\n");
    sb.append("    localCompletionAmount: ").append(toIndentedString(localCompletionAmount)).append("\n");
    sb.append("    localCurrencyCode: ").append(toIndentedString(localCurrencyCode)).append("\n");
    sb.append("    localRequestedAmount: ").append(toIndentedString(localRequestedAmount)).append("\n");
    sb.append("    mcElectronicIndicator: ").append(toIndentedString(mcElectronicIndicator)).append("\n");
    sb.append("    mcResponseValue: ").append(toIndentedString(mcResponseValue)).append("\n");
    sb.append("    merchantCategoryCodeInfo: ").append(toIndentedString(merchantCategoryCodeInfo)).append("\n");
    sb.append("    merchantType: ").append(toIndentedString(merchantType)).append("\n");
    sb.append("    originalCardHolderBillingAmount: ").append(toIndentedString(originalCardHolderBillingAmount)).append("\n");
    sb.append("    originalCardHolderBillingCurrency: ").append(toIndentedString(originalCardHolderBillingCurrency)).append("\n");
    sb.append("    originalCashbackAmount: ").append(toIndentedString(originalCashbackAmount)).append("\n");
    sb.append("    originalCashbackCurrency: ").append(toIndentedString(originalCashbackCurrency)).append("\n");
    sb.append("    originalPurchaseAmount: ").append(toIndentedString(originalPurchaseAmount)).append("\n");
    sb.append("    ownerID: ").append(toIndentedString(ownerID)).append("\n");
    sb.append("    pointOfServiceAmount: ").append(toIndentedString(pointOfServiceAmount)).append("\n");
    sb.append("    pointOfServiceCurrency: ").append(toIndentedString(pointOfServiceCurrency)).append("\n");
    sb.append("    posData: ").append(toIndentedString(posData)).append("\n");
    sb.append("    posEntry: ").append(toIndentedString(posEntry)).append("\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    primaryAccountNumberSequenceNumber: ").append(toIndentedString(primaryAccountNumberSequenceNumber)).append("\n");
    sb.append("    processingCode: ").append(toIndentedString(processingCode)).append("\n");
    sb.append("    productIdentifierCode: ").append(toIndentedString(productIdentifierCode)).append("\n");
    sb.append("    programIndicator: ").append(toIndentedString(programIndicator)).append("\n");
    sb.append("    qpsPayPassChargebackElgibility: ").append(toIndentedString(qpsPayPassChargebackElgibility)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseSource: ").append(toIndentedString(responseSource)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    serviceLevelIndicator: ").append(toIndentedString(serviceLevelIndicator)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    settlementDatePosition: ").append(toIndentedString(settlementDatePosition)).append("\n");
    sb.append("    settlementServiceConfiguration: ").append(toIndentedString(settlementServiceConfiguration)).append("\n");
    sb.append("    surchargeFreeIndicator: ").append(toIndentedString(surchargeFreeIndicator)).append("\n");
    sb.append("    switchDateTime: ").append(toIndentedString(switchDateTime)).append("\n");
    sb.append("    switchSerialNumber: ").append(toIndentedString(switchSerialNumber)).append("\n");
    sb.append("    switchSerialNumberPosition: ").append(toIndentedString(switchSerialNumberPosition)).append("\n");
    sb.append("    switchTime: ").append(toIndentedString(switchTime)).append("\n");
    sb.append("    terminalID: ").append(toIndentedString(terminalID)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    transactionCategoryCode: ").append(toIndentedString(transactionCategoryCode)).append("\n");
    sb.append("    transactionClass: ").append(toIndentedString(transactionClass)).append("\n");
    sb.append("    transactionDateTime: ").append(toIndentedString(transactionDateTime)).append("\n");
    sb.append("    transitData: ").append(toIndentedString(transitData)).append("\n");
    sb.append("    tranType: ").append(toIndentedString(tranType)).append("\n");
    sb.append("    universalCardAuthenticationFee: ").append(toIndentedString(universalCardAuthenticationFee)).append("\n");
    sb.append("    usageCode: ").append(toIndentedString(usageCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acqLocCntry");
    openapiFields.add("acquirerAddress");
    openapiFields.add("acquirerAdjustmentSettlementAmount");
    openapiFields.add("acquirerAdjustmentSettlementAmountIndicator");
    openapiFields.add("acquirerAdjustmentSettlementCompletionAmount");
    openapiFields.add("acquirerAdjustmentSettlementCurrency");
    openapiFields.add("acquirerAdviceReason");
    openapiFields.add("acquirerBridgedICA");
    openapiFields.add("acquirerCity");
    openapiFields.add("acquirerCurrencyConversionRate");
    openapiFields.add("acquirerInstitutionNumber");
    openapiFields.add("acquirerInterchangeAmount");
    openapiFields.add("acquirerInterchangeCurrency");
    openapiFields.add("acquirerName");
    openapiFields.add("acquirerProcessorID");
    openapiFields.add("acquirerReferenceNumber");
    openapiFields.add("acquirerSettlementCompletionAmount");
    openapiFields.add("acquirerSettlementCompletionCurrency");
    openapiFields.add("acquirerSettlementConversionRate");
    openapiFields.add("additionalAdvice");
    openapiFields.add("additionalPOSData");
    openapiFields.add("additionalResponse");
    openapiFields.add("adjustmentAdviceReason");
    openapiFields.add("adjustmentCashbackAmount");
    openapiFields.add("adjustmentDate");
    openapiFields.add("adjustmentPurchaseAmount");
    openapiFields.add("afaMember");
    openapiFields.add("alternatePrimaryAccountNumber");
    openapiFields.add("amountICCR");
    openapiFields.add("atmPosFlag");
    openapiFields.add("banknetReferenceNumber");
    openapiFields.add("bridgingICA");
    openapiFields.add("businessActivity");
    openapiFields.add("cashBackAmount");
    openapiFields.add("cashBackCurrency");
    openapiFields.add("catLevel");
    openapiFields.add("cccaIssuerBankName");
    openapiFields.add("chipFlag");
    openapiFields.add("conditionCode");
    openapiFields.add("corporateCardIndicator");
    openapiFields.add("creditLineUsageFee");
    openapiFields.add("crossBorderIndicator");
    openapiFields.add("currencyConversionAssesementAmount");
    openapiFields.add("currencyConversionAssesementCurrency");
    openapiFields.add("currencyConversionIndicator");
    openapiFields.add("cvc2ProgramValidationCode");
    openapiFields.add("documentIndicator");
    openapiFields.add("feesInterChgAcqLoc");
    openapiFields.add("financialInstitutionID");
    openapiFields.add("fraudDate");
    openapiFields.add("fraudDeviceType");
    openapiFields.add("fraudType");
    openapiFields.add("gcmsAdviceCode");
    openapiFields.add("gcmsSettlementDate");
    openapiFields.add("issuerAdjustmentSettlementAmount");
    openapiFields.add("issuerAdjustmentSettlementAmountIndicator");
    openapiFields.add("issuerAdjustmentSettlementCompletionAmount");
    openapiFields.add("issuerAdjustmentSettlementCurrency");
    openapiFields.add("issuerAdviceReason");
    openapiFields.add("issuerCurrencyConversionRate");
    openapiFields.add("issuerICA");
    openapiFields.add("issuerInstitutionNumber");
    openapiFields.add("issuerInterchangeAmount");
    openapiFields.add("issuerInterchangeCurrency");
    openapiFields.add("issuerProcessorID");
    openapiFields.add("issuerSettlementCompletionAmount");
    openapiFields.add("issuerSettlementCompletionCurrency");
    openapiFields.add("issuerSettlementConversionRate");
    openapiFields.add("localCompletionAmount");
    openapiFields.add("localCurrencyCode");
    openapiFields.add("localRequestedAmount");
    openapiFields.add("mcElectronicIndicator");
    openapiFields.add("mcResponseValue");
    openapiFields.add("merchantCategoryCodeInfo");
    openapiFields.add("merchantType");
    openapiFields.add("originalCardHolderBillingAmount");
    openapiFields.add("originalCardHolderBillingCurrency");
    openapiFields.add("originalCashbackAmount");
    openapiFields.add("originalCashbackCurrency");
    openapiFields.add("originalPurchaseAmount");
    openapiFields.add("ownerID");
    openapiFields.add("pointOfServiceAmount");
    openapiFields.add("pointOfServiceCurrency");
    openapiFields.add("posData");
    openapiFields.add("posEntry");
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("primaryAccountNumberSequenceNumber");
    openapiFields.add("processingCode");
    openapiFields.add("productIdentifierCode");
    openapiFields.add("programIndicator");
    openapiFields.add("qpsPayPassChargebackElgibility");
    openapiFields.add("referenceNumber");
    openapiFields.add("responseCode");
    openapiFields.add("responseSource");
    openapiFields.add("serviceCode");
    openapiFields.add("serviceLevelIndicator");
    openapiFields.add("settlementDate");
    openapiFields.add("settlementDatePosition");
    openapiFields.add("settlementServiceConfiguration");
    openapiFields.add("surchargeFreeIndicator");
    openapiFields.add("switchDateTime");
    openapiFields.add("switchSerialNumber");
    openapiFields.add("switchSerialNumberPosition");
    openapiFields.add("switchTime");
    openapiFields.add("terminalID");
    openapiFields.add("trace");
    openapiFields.add("transactionCategoryCode");
    openapiFields.add("transactionClass");
    openapiFields.add("transactionDateTime");
    openapiFields.add("transitData");
    openapiFields.add("tranType");
    openapiFields.add("universalCardAuthenticationFee");
    openapiFields.add("usageCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SingleMessageDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleMessageDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleMessageDetail is not found in the empty JSON string", SingleMessageDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleMessageDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleMessageDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acqLocCntry") != null && !jsonObj.get("acqLocCntry").isJsonNull()) && !jsonObj.get("acqLocCntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acqLocCntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acqLocCntry").toString()));
      }
      if ((jsonObj.get("acquirerAddress") != null && !jsonObj.get("acquirerAddress").isJsonNull()) && !jsonObj.get("acquirerAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAddress").toString()));
      }
      if ((jsonObj.get("acquirerAdjustmentSettlementAmount") != null && !jsonObj.get("acquirerAdjustmentSettlementAmount").isJsonNull()) && !jsonObj.get("acquirerAdjustmentSettlementAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAdjustmentSettlementAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAdjustmentSettlementAmount").toString()));
      }
      if ((jsonObj.get("acquirerAdjustmentSettlementAmountIndicator") != null && !jsonObj.get("acquirerAdjustmentSettlementAmountIndicator").isJsonNull()) && !jsonObj.get("acquirerAdjustmentSettlementAmountIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAdjustmentSettlementAmountIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAdjustmentSettlementAmountIndicator").toString()));
      }
      if ((jsonObj.get("acquirerAdjustmentSettlementCompletionAmount") != null && !jsonObj.get("acquirerAdjustmentSettlementCompletionAmount").isJsonNull()) && !jsonObj.get("acquirerAdjustmentSettlementCompletionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAdjustmentSettlementCompletionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAdjustmentSettlementCompletionAmount").toString()));
      }
      if ((jsonObj.get("acquirerAdjustmentSettlementCurrency") != null && !jsonObj.get("acquirerAdjustmentSettlementCurrency").isJsonNull()) && !jsonObj.get("acquirerAdjustmentSettlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAdjustmentSettlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAdjustmentSettlementCurrency").toString()));
      }
      if ((jsonObj.get("acquirerAdviceReason") != null && !jsonObj.get("acquirerAdviceReason").isJsonNull()) && !jsonObj.get("acquirerAdviceReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerAdviceReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerAdviceReason").toString()));
      }
      if ((jsonObj.get("acquirerBridgedICA") != null && !jsonObj.get("acquirerBridgedICA").isJsonNull()) && !jsonObj.get("acquirerBridgedICA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerBridgedICA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerBridgedICA").toString()));
      }
      if ((jsonObj.get("acquirerCity") != null && !jsonObj.get("acquirerCity").isJsonNull()) && !jsonObj.get("acquirerCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerCity").toString()));
      }
      if ((jsonObj.get("acquirerCurrencyConversionRate") != null && !jsonObj.get("acquirerCurrencyConversionRate").isJsonNull()) && !jsonObj.get("acquirerCurrencyConversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerCurrencyConversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerCurrencyConversionRate").toString()));
      }
      if ((jsonObj.get("acquirerInstitutionNumber") != null && !jsonObj.get("acquirerInstitutionNumber").isJsonNull()) && !jsonObj.get("acquirerInstitutionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerInstitutionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerInstitutionNumber").toString()));
      }
      if ((jsonObj.get("acquirerInterchangeAmount") != null && !jsonObj.get("acquirerInterchangeAmount").isJsonNull()) && !jsonObj.get("acquirerInterchangeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerInterchangeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerInterchangeAmount").toString()));
      }
      if ((jsonObj.get("acquirerInterchangeCurrency") != null && !jsonObj.get("acquirerInterchangeCurrency").isJsonNull()) && !jsonObj.get("acquirerInterchangeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerInterchangeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerInterchangeCurrency").toString()));
      }
      if ((jsonObj.get("acquirerName") != null && !jsonObj.get("acquirerName").isJsonNull()) && !jsonObj.get("acquirerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerName").toString()));
      }
      if ((jsonObj.get("acquirerProcessorID") != null && !jsonObj.get("acquirerProcessorID").isJsonNull()) && !jsonObj.get("acquirerProcessorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerProcessorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerProcessorID").toString()));
      }
      if ((jsonObj.get("acquirerReferenceNumber") != null && !jsonObj.get("acquirerReferenceNumber").isJsonNull()) && !jsonObj.get("acquirerReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerReferenceNumber").toString()));
      }
      if ((jsonObj.get("acquirerSettlementCompletionAmount") != null && !jsonObj.get("acquirerSettlementCompletionAmount").isJsonNull()) && !jsonObj.get("acquirerSettlementCompletionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerSettlementCompletionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerSettlementCompletionAmount").toString()));
      }
      if ((jsonObj.get("acquirerSettlementCompletionCurrency") != null && !jsonObj.get("acquirerSettlementCompletionCurrency").isJsonNull()) && !jsonObj.get("acquirerSettlementCompletionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerSettlementCompletionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerSettlementCompletionCurrency").toString()));
      }
      if ((jsonObj.get("acquirerSettlementConversionRate") != null && !jsonObj.get("acquirerSettlementConversionRate").isJsonNull()) && !jsonObj.get("acquirerSettlementConversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerSettlementConversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerSettlementConversionRate").toString()));
      }
      if ((jsonObj.get("additionalAdvice") != null && !jsonObj.get("additionalAdvice").isJsonNull()) && !jsonObj.get("additionalAdvice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalAdvice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalAdvice").toString()));
      }
      if ((jsonObj.get("additionalPOSData") != null && !jsonObj.get("additionalPOSData").isJsonNull()) && !jsonObj.get("additionalPOSData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalPOSData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalPOSData").toString()));
      }
      if ((jsonObj.get("additionalResponse") != null && !jsonObj.get("additionalResponse").isJsonNull()) && !jsonObj.get("additionalResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalResponse").toString()));
      }
      if ((jsonObj.get("adjustmentAdviceReason") != null && !jsonObj.get("adjustmentAdviceReason").isJsonNull()) && !jsonObj.get("adjustmentAdviceReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentAdviceReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentAdviceReason").toString()));
      }
      if ((jsonObj.get("adjustmentCashbackAmount") != null && !jsonObj.get("adjustmentCashbackAmount").isJsonNull()) && !jsonObj.get("adjustmentCashbackAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentCashbackAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentCashbackAmount").toString()));
      }
      if ((jsonObj.get("adjustmentDate") != null && !jsonObj.get("adjustmentDate").isJsonNull()) && !jsonObj.get("adjustmentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentDate").toString()));
      }
      if ((jsonObj.get("adjustmentPurchaseAmount") != null && !jsonObj.get("adjustmentPurchaseAmount").isJsonNull()) && !jsonObj.get("adjustmentPurchaseAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentPurchaseAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentPurchaseAmount").toString()));
      }
      if ((jsonObj.get("afaMember") != null && !jsonObj.get("afaMember").isJsonNull()) && !jsonObj.get("afaMember").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `afaMember` to be a primitive type in the JSON string but got `%s`", jsonObj.get("afaMember").toString()));
      }
      if ((jsonObj.get("alternatePrimaryAccountNumber") != null && !jsonObj.get("alternatePrimaryAccountNumber").isJsonNull()) && !jsonObj.get("alternatePrimaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternatePrimaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternatePrimaryAccountNumber").toString()));
      }
      if ((jsonObj.get("amountICCR") != null && !jsonObj.get("amountICCR").isJsonNull()) && !jsonObj.get("amountICCR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountICCR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountICCR").toString()));
      }
      if ((jsonObj.get("atmPosFlag") != null && !jsonObj.get("atmPosFlag").isJsonNull()) && !jsonObj.get("atmPosFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atmPosFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atmPosFlag").toString()));
      }
      if ((jsonObj.get("banknetReferenceNumber") != null && !jsonObj.get("banknetReferenceNumber").isJsonNull()) && !jsonObj.get("banknetReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `banknetReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("banknetReferenceNumber").toString()));
      }
      if ((jsonObj.get("bridgingICA") != null && !jsonObj.get("bridgingICA").isJsonNull()) && !jsonObj.get("bridgingICA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bridgingICA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bridgingICA").toString()));
      }
      if ((jsonObj.get("businessActivity") != null && !jsonObj.get("businessActivity").isJsonNull()) && !jsonObj.get("businessActivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessActivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessActivity").toString()));
      }
      if ((jsonObj.get("cashBackAmount") != null && !jsonObj.get("cashBackAmount").isJsonNull()) && !jsonObj.get("cashBackAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashBackAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashBackAmount").toString()));
      }
      if ((jsonObj.get("cashBackCurrency") != null && !jsonObj.get("cashBackCurrency").isJsonNull()) && !jsonObj.get("cashBackCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashBackCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashBackCurrency").toString()));
      }
      if ((jsonObj.get("catLevel") != null && !jsonObj.get("catLevel").isJsonNull()) && !jsonObj.get("catLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catLevel").toString()));
      }
      if ((jsonObj.get("cccaIssuerBankName") != null && !jsonObj.get("cccaIssuerBankName").isJsonNull()) && !jsonObj.get("cccaIssuerBankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cccaIssuerBankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cccaIssuerBankName").toString()));
      }
      if ((jsonObj.get("chipFlag") != null && !jsonObj.get("chipFlag").isJsonNull()) && !jsonObj.get("chipFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chipFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chipFlag").toString()));
      }
      if ((jsonObj.get("conditionCode") != null && !jsonObj.get("conditionCode").isJsonNull()) && !jsonObj.get("conditionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conditionCode").toString()));
      }
      if ((jsonObj.get("corporateCardIndicator") != null && !jsonObj.get("corporateCardIndicator").isJsonNull()) && !jsonObj.get("corporateCardIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporateCardIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporateCardIndicator").toString()));
      }
      if ((jsonObj.get("creditLineUsageFee") != null && !jsonObj.get("creditLineUsageFee").isJsonNull()) && !jsonObj.get("creditLineUsageFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditLineUsageFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditLineUsageFee").toString()));
      }
      if ((jsonObj.get("crossBorderIndicator") != null && !jsonObj.get("crossBorderIndicator").isJsonNull()) && !jsonObj.get("crossBorderIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossBorderIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossBorderIndicator").toString()));
      }
      if ((jsonObj.get("currencyConversionAssesementAmount") != null && !jsonObj.get("currencyConversionAssesementAmount").isJsonNull()) && !jsonObj.get("currencyConversionAssesementAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyConversionAssesementAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyConversionAssesementAmount").toString()));
      }
      if ((jsonObj.get("currencyConversionAssesementCurrency") != null && !jsonObj.get("currencyConversionAssesementCurrency").isJsonNull()) && !jsonObj.get("currencyConversionAssesementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyConversionAssesementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyConversionAssesementCurrency").toString()));
      }
      if ((jsonObj.get("currencyConversionIndicator") != null && !jsonObj.get("currencyConversionIndicator").isJsonNull()) && !jsonObj.get("currencyConversionIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyConversionIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyConversionIndicator").toString()));
      }
      if ((jsonObj.get("cvc2ProgramValidationCode") != null && !jsonObj.get("cvc2ProgramValidationCode").isJsonNull()) && !jsonObj.get("cvc2ProgramValidationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvc2ProgramValidationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvc2ProgramValidationCode").toString()));
      }
      if ((jsonObj.get("documentIndicator") != null && !jsonObj.get("documentIndicator").isJsonNull()) && !jsonObj.get("documentIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentIndicator").toString()));
      }
      if ((jsonObj.get("feesInterChgAcqLoc") != null && !jsonObj.get("feesInterChgAcqLoc").isJsonNull()) && !jsonObj.get("feesInterChgAcqLoc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feesInterChgAcqLoc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feesInterChgAcqLoc").toString()));
      }
      if ((jsonObj.get("financialInstitutionID") != null && !jsonObj.get("financialInstitutionID").isJsonNull()) && !jsonObj.get("financialInstitutionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialInstitutionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financialInstitutionID").toString()));
      }
      if ((jsonObj.get("fraudDate") != null && !jsonObj.get("fraudDate").isJsonNull()) && !jsonObj.get("fraudDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraudDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraudDate").toString()));
      }
      if ((jsonObj.get("fraudDeviceType") != null && !jsonObj.get("fraudDeviceType").isJsonNull()) && !jsonObj.get("fraudDeviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraudDeviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraudDeviceType").toString()));
      }
      if ((jsonObj.get("fraudType") != null && !jsonObj.get("fraudType").isJsonNull()) && !jsonObj.get("fraudType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraudType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraudType").toString()));
      }
      if ((jsonObj.get("gcmsAdviceCode") != null && !jsonObj.get("gcmsAdviceCode").isJsonNull()) && !jsonObj.get("gcmsAdviceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcmsAdviceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcmsAdviceCode").toString()));
      }
      if ((jsonObj.get("gcmsSettlementDate") != null && !jsonObj.get("gcmsSettlementDate").isJsonNull()) && !jsonObj.get("gcmsSettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcmsSettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcmsSettlementDate").toString()));
      }
      if ((jsonObj.get("issuerAdjustmentSettlementAmount") != null && !jsonObj.get("issuerAdjustmentSettlementAmount").isJsonNull()) && !jsonObj.get("issuerAdjustmentSettlementAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerAdjustmentSettlementAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerAdjustmentSettlementAmount").toString()));
      }
      if ((jsonObj.get("issuerAdjustmentSettlementAmountIndicator") != null && !jsonObj.get("issuerAdjustmentSettlementAmountIndicator").isJsonNull()) && !jsonObj.get("issuerAdjustmentSettlementAmountIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerAdjustmentSettlementAmountIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerAdjustmentSettlementAmountIndicator").toString()));
      }
      if ((jsonObj.get("issuerAdjustmentSettlementCompletionAmount") != null && !jsonObj.get("issuerAdjustmentSettlementCompletionAmount").isJsonNull()) && !jsonObj.get("issuerAdjustmentSettlementCompletionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerAdjustmentSettlementCompletionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerAdjustmentSettlementCompletionAmount").toString()));
      }
      if ((jsonObj.get("issuerAdjustmentSettlementCurrency") != null && !jsonObj.get("issuerAdjustmentSettlementCurrency").isJsonNull()) && !jsonObj.get("issuerAdjustmentSettlementCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerAdjustmentSettlementCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerAdjustmentSettlementCurrency").toString()));
      }
      if ((jsonObj.get("issuerAdviceReason") != null && !jsonObj.get("issuerAdviceReason").isJsonNull()) && !jsonObj.get("issuerAdviceReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerAdviceReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerAdviceReason").toString()));
      }
      if ((jsonObj.get("issuerCurrencyConversionRate") != null && !jsonObj.get("issuerCurrencyConversionRate").isJsonNull()) && !jsonObj.get("issuerCurrencyConversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerCurrencyConversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerCurrencyConversionRate").toString()));
      }
      if ((jsonObj.get("issuerICA") != null && !jsonObj.get("issuerICA").isJsonNull()) && !jsonObj.get("issuerICA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerICA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerICA").toString()));
      }
      if ((jsonObj.get("issuerInstitutionNumber") != null && !jsonObj.get("issuerInstitutionNumber").isJsonNull()) && !jsonObj.get("issuerInstitutionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerInstitutionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerInstitutionNumber").toString()));
      }
      if ((jsonObj.get("issuerInterchangeAmount") != null && !jsonObj.get("issuerInterchangeAmount").isJsonNull()) && !jsonObj.get("issuerInterchangeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerInterchangeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerInterchangeAmount").toString()));
      }
      if ((jsonObj.get("issuerInterchangeCurrency") != null && !jsonObj.get("issuerInterchangeCurrency").isJsonNull()) && !jsonObj.get("issuerInterchangeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerInterchangeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerInterchangeCurrency").toString()));
      }
      if ((jsonObj.get("issuerProcessorID") != null && !jsonObj.get("issuerProcessorID").isJsonNull()) && !jsonObj.get("issuerProcessorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerProcessorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerProcessorID").toString()));
      }
      if ((jsonObj.get("issuerSettlementCompletionAmount") != null && !jsonObj.get("issuerSettlementCompletionAmount").isJsonNull()) && !jsonObj.get("issuerSettlementCompletionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerSettlementCompletionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerSettlementCompletionAmount").toString()));
      }
      if ((jsonObj.get("issuerSettlementCompletionCurrency") != null && !jsonObj.get("issuerSettlementCompletionCurrency").isJsonNull()) && !jsonObj.get("issuerSettlementCompletionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerSettlementCompletionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerSettlementCompletionCurrency").toString()));
      }
      if ((jsonObj.get("issuerSettlementConversionRate") != null && !jsonObj.get("issuerSettlementConversionRate").isJsonNull()) && !jsonObj.get("issuerSettlementConversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerSettlementConversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerSettlementConversionRate").toString()));
      }
      if ((jsonObj.get("localCompletionAmount") != null && !jsonObj.get("localCompletionAmount").isJsonNull()) && !jsonObj.get("localCompletionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localCompletionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localCompletionAmount").toString()));
      }
      if ((jsonObj.get("localCurrencyCode") != null && !jsonObj.get("localCurrencyCode").isJsonNull()) && !jsonObj.get("localCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localCurrencyCode").toString()));
      }
      if ((jsonObj.get("localRequestedAmount") != null && !jsonObj.get("localRequestedAmount").isJsonNull()) && !jsonObj.get("localRequestedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localRequestedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localRequestedAmount").toString()));
      }
      if ((jsonObj.get("mcElectronicIndicator") != null && !jsonObj.get("mcElectronicIndicator").isJsonNull()) && !jsonObj.get("mcElectronicIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcElectronicIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcElectronicIndicator").toString()));
      }
      if ((jsonObj.get("mcResponseValue") != null && !jsonObj.get("mcResponseValue").isJsonNull()) && !jsonObj.get("mcResponseValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcResponseValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcResponseValue").toString()));
      }
      if ((jsonObj.get("merchantCategoryCodeInfo") != null && !jsonObj.get("merchantCategoryCodeInfo").isJsonNull()) && !jsonObj.get("merchantCategoryCodeInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCodeInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCodeInfo").toString()));
      }
      if ((jsonObj.get("merchantType") != null && !jsonObj.get("merchantType").isJsonNull()) && !jsonObj.get("merchantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantType").toString()));
      }
      if ((jsonObj.get("originalCardHolderBillingAmount") != null && !jsonObj.get("originalCardHolderBillingAmount").isJsonNull()) && !jsonObj.get("originalCardHolderBillingAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCardHolderBillingAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCardHolderBillingAmount").toString()));
      }
      if ((jsonObj.get("originalCardHolderBillingCurrency") != null && !jsonObj.get("originalCardHolderBillingCurrency").isJsonNull()) && !jsonObj.get("originalCardHolderBillingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCardHolderBillingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCardHolderBillingCurrency").toString()));
      }
      if ((jsonObj.get("originalCashbackAmount") != null && !jsonObj.get("originalCashbackAmount").isJsonNull()) && !jsonObj.get("originalCashbackAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCashbackAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCashbackAmount").toString()));
      }
      if ((jsonObj.get("originalCashbackCurrency") != null && !jsonObj.get("originalCashbackCurrency").isJsonNull()) && !jsonObj.get("originalCashbackCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCashbackCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCashbackCurrency").toString()));
      }
      if ((jsonObj.get("originalPurchaseAmount") != null && !jsonObj.get("originalPurchaseAmount").isJsonNull()) && !jsonObj.get("originalPurchaseAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalPurchaseAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalPurchaseAmount").toString()));
      }
      if ((jsonObj.get("ownerID") != null && !jsonObj.get("ownerID").isJsonNull()) && !jsonObj.get("ownerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerID").toString()));
      }
      if ((jsonObj.get("pointOfServiceAmount") != null && !jsonObj.get("pointOfServiceAmount").isJsonNull()) && !jsonObj.get("pointOfServiceAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointOfServiceAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointOfServiceAmount").toString()));
      }
      if ((jsonObj.get("pointOfServiceCurrency") != null && !jsonObj.get("pointOfServiceCurrency").isJsonNull()) && !jsonObj.get("pointOfServiceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointOfServiceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointOfServiceCurrency").toString()));
      }
      if ((jsonObj.get("posData") != null && !jsonObj.get("posData").isJsonNull()) && !jsonObj.get("posData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posData").toString()));
      }
      if ((jsonObj.get("posEntry") != null && !jsonObj.get("posEntry").isJsonNull()) && !jsonObj.get("posEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posEntry").toString()));
      }
      if ((jsonObj.get("primaryAccountNumber") != null && !jsonObj.get("primaryAccountNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if ((jsonObj.get("primaryAccountNumberSequenceNumber") != null && !jsonObj.get("primaryAccountNumberSequenceNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumberSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumberSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumberSequenceNumber").toString()));
      }
      if ((jsonObj.get("processingCode") != null && !jsonObj.get("processingCode").isJsonNull()) && !jsonObj.get("processingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingCode").toString()));
      }
      if ((jsonObj.get("productIdentifierCode") != null && !jsonObj.get("productIdentifierCode").isJsonNull()) && !jsonObj.get("productIdentifierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productIdentifierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productIdentifierCode").toString()));
      }
      if ((jsonObj.get("programIndicator") != null && !jsonObj.get("programIndicator").isJsonNull()) && !jsonObj.get("programIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programIndicator").toString()));
      }
      if ((jsonObj.get("qpsPayPassChargebackElgibility") != null && !jsonObj.get("qpsPayPassChargebackElgibility").isJsonNull()) && !jsonObj.get("qpsPayPassChargebackElgibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qpsPayPassChargebackElgibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qpsPayPassChargebackElgibility").toString()));
      }
      if ((jsonObj.get("referenceNumber") != null && !jsonObj.get("referenceNumber").isJsonNull()) && !jsonObj.get("referenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceNumber").toString()));
      }
      if ((jsonObj.get("responseCode") != null && !jsonObj.get("responseCode").isJsonNull()) && !jsonObj.get("responseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCode").toString()));
      }
      if ((jsonObj.get("responseSource") != null && !jsonObj.get("responseSource").isJsonNull()) && !jsonObj.get("responseSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseSource").toString()));
      }
      if ((jsonObj.get("serviceCode") != null && !jsonObj.get("serviceCode").isJsonNull()) && !jsonObj.get("serviceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceCode").toString()));
      }
      if ((jsonObj.get("serviceLevelIndicator") != null && !jsonObj.get("serviceLevelIndicator").isJsonNull()) && !jsonObj.get("serviceLevelIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceLevelIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceLevelIndicator").toString()));
      }
      if ((jsonObj.get("settlementDate") != null && !jsonObj.get("settlementDate").isJsonNull()) && !jsonObj.get("settlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDate").toString()));
      }
      if ((jsonObj.get("settlementDatePosition") != null && !jsonObj.get("settlementDatePosition").isJsonNull()) && !jsonObj.get("settlementDatePosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementDatePosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementDatePosition").toString()));
      }
      if ((jsonObj.get("settlementServiceConfiguration") != null && !jsonObj.get("settlementServiceConfiguration").isJsonNull()) && !jsonObj.get("settlementServiceConfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementServiceConfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementServiceConfiguration").toString()));
      }
      if ((jsonObj.get("surchargeFreeIndicator") != null && !jsonObj.get("surchargeFreeIndicator").isJsonNull()) && !jsonObj.get("surchargeFreeIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surchargeFreeIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surchargeFreeIndicator").toString()));
      }
      if ((jsonObj.get("switchDateTime") != null && !jsonObj.get("switchDateTime").isJsonNull()) && !jsonObj.get("switchDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchDateTime").toString()));
      }
      if ((jsonObj.get("switchSerialNumber") != null && !jsonObj.get("switchSerialNumber").isJsonNull()) && !jsonObj.get("switchSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchSerialNumber").toString()));
      }
      if ((jsonObj.get("switchSerialNumberPosition") != null && !jsonObj.get("switchSerialNumberPosition").isJsonNull()) && !jsonObj.get("switchSerialNumberPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchSerialNumberPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchSerialNumberPosition").toString()));
      }
      if ((jsonObj.get("switchTime") != null && !jsonObj.get("switchTime").isJsonNull()) && !jsonObj.get("switchTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switchTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switchTime").toString()));
      }
      if ((jsonObj.get("terminalID") != null && !jsonObj.get("terminalID").isJsonNull()) && !jsonObj.get("terminalID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalID").toString()));
      }
      if ((jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull()) && !jsonObj.get("trace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace").toString()));
      }
      if ((jsonObj.get("transactionCategoryCode") != null && !jsonObj.get("transactionCategoryCode").isJsonNull()) && !jsonObj.get("transactionCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCategoryCode").toString()));
      }
      if ((jsonObj.get("transactionClass") != null && !jsonObj.get("transactionClass").isJsonNull()) && !jsonObj.get("transactionClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionClass").toString()));
      }
      if ((jsonObj.get("transactionDateTime") != null && !jsonObj.get("transactionDateTime").isJsonNull()) && !jsonObj.get("transactionDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDateTime").toString()));
      }
      if ((jsonObj.get("transitData") != null && !jsonObj.get("transitData").isJsonNull()) && !jsonObj.get("transitData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitData").toString()));
      }
      if ((jsonObj.get("tranType") != null && !jsonObj.get("tranType").isJsonNull()) && !jsonObj.get("tranType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tranType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tranType").toString()));
      }
      if ((jsonObj.get("universalCardAuthenticationFee") != null && !jsonObj.get("universalCardAuthenticationFee").isJsonNull()) && !jsonObj.get("universalCardAuthenticationFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `universalCardAuthenticationFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("universalCardAuthenticationFee").toString()));
      }
      if ((jsonObj.get("usageCode") != null && !jsonObj.get("usageCode").isJsonNull()) && !jsonObj.get("usageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleMessageDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleMessageDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleMessageDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleMessageDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleMessageDetail>() {
           @Override
           public void write(JsonWriter out, SingleMessageDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleMessageDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SingleMessageDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SingleMessageDetail
  * @throws IOException if the JSON string is invalid with respect to SingleMessageDetail
  */
  public static SingleMessageDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleMessageDetail.class);
  }

 /**
  * Convert an instance of SingleMessageDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

