/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * IssuerFulfillmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class IssuerFulfillmentRequest {
  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * Issuer Response Code.   Length: 7-36   Valid Values/Format: APPROVE, REJECT_DOCUMENTATION_NOT_AS_REQUIRED, REJECT_ILLEGIBLE_OR_MISSING
   */
  @JsonAdapter(IssuerResponseCdEnum.Adapter.class)
  public enum IssuerResponseCdEnum {
    APPROVE("APPROVE"),
    
    REJECT_DOCUMENTATION_NOT_AS_REQUIRED("REJECT_DOCUMENTATION_NOT_AS_REQUIRED"),
    
    REJECT_ILLEGIBLE_OR_MISSING("REJECT_ILLEGIBLE_OR_MISSING");

    private String value;

    IssuerResponseCdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuerResponseCdEnum fromValue(String value) {
      for (IssuerResponseCdEnum b : IssuerResponseCdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IssuerResponseCdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuerResponseCdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuerResponseCdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssuerResponseCdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ISSUER_RESPONSE_CD = "issuerResponseCd";
  @SerializedName(SERIALIZED_NAME_ISSUER_RESPONSE_CD)
  private IssuerResponseCdEnum issuerResponseCd;

  /**
   * Reject Reason Code.   Length: 1   Valid Values/Format: A - TRANSACTION AMOUNT MISSING/ILLEGIBLE, M - MERCHANT NAME MISSING/ILLEGIBLE, P - PRIMARY ACCOUNT NUMBER MISSING/ILLEGIBLE, D - TRANSACTION DATE MISSING/ILLEGIBLE, O - OTHER (it can also be used for NOT A SUBSTITUTE DRAFT
   */
  @JsonAdapter(RejectReasonCdEnum.Adapter.class)
  public enum RejectReasonCdEnum {
    A("A"),
    
    M("M"),
    
    P("P"),
    
    D("D"),
    
    O("O");

    private String value;

    RejectReasonCdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectReasonCdEnum fromValue(String value) {
      for (RejectReasonCdEnum b : RejectReasonCdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RejectReasonCdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectReasonCdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectReasonCdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RejectReasonCdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REJECT_REASON_CD = "rejectReasonCd";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON_CD)
  private RejectReasonCdEnum rejectReasonCd;

  public IssuerFulfillmentRequest() {
  }

  public IssuerFulfillmentRequest memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * This is a test memo.   Length: 1-100   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public IssuerFulfillmentRequest issuerResponseCd(IssuerResponseCdEnum issuerResponseCd) {
    
    this.issuerResponseCd = issuerResponseCd;
    return this;
  }

   /**
   * Issuer Response Code.   Length: 7-36   Valid Values/Format: APPROVE, REJECT_DOCUMENTATION_NOT_AS_REQUIRED, REJECT_ILLEGIBLE_OR_MISSING
   * @return issuerResponseCd
  **/
  @javax.annotation.Nonnull
  public IssuerResponseCdEnum getIssuerResponseCd() {
    return issuerResponseCd;
  }


  public void setIssuerResponseCd(IssuerResponseCdEnum issuerResponseCd) {
    this.issuerResponseCd = issuerResponseCd;
  }


  public IssuerFulfillmentRequest rejectReasonCd(RejectReasonCdEnum rejectReasonCd) {
    
    this.rejectReasonCd = rejectReasonCd;
    return this;
  }

   /**
   * Reject Reason Code.   Length: 1   Valid Values/Format: A - TRANSACTION AMOUNT MISSING/ILLEGIBLE, M - MERCHANT NAME MISSING/ILLEGIBLE, P - PRIMARY ACCOUNT NUMBER MISSING/ILLEGIBLE, D - TRANSACTION DATE MISSING/ILLEGIBLE, O - OTHER (it can also be used for NOT A SUBSTITUTE DRAFT
   * @return rejectReasonCd
  **/
  @javax.annotation.Nullable
  public RejectReasonCdEnum getRejectReasonCd() {
    return rejectReasonCd;
  }


  public void setRejectReasonCd(RejectReasonCdEnum rejectReasonCd) {
    this.rejectReasonCd = rejectReasonCd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuerFulfillmentRequest issuerFulfillmentRequest = (IssuerFulfillmentRequest) o;
    return Objects.equals(this.memo, issuerFulfillmentRequest.memo) &&
        Objects.equals(this.issuerResponseCd, issuerFulfillmentRequest.issuerResponseCd) &&
        Objects.equals(this.rejectReasonCd, issuerFulfillmentRequest.rejectReasonCd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memo, issuerResponseCd, rejectReasonCd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuerFulfillmentRequest {\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    issuerResponseCd: ").append(toIndentedString(issuerResponseCd)).append("\n");
    sb.append("    rejectReasonCd: ").append(toIndentedString(rejectReasonCd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memo");
    openapiFields.add("issuerResponseCd");
    openapiFields.add("rejectReasonCd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("issuerResponseCd");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IssuerFulfillmentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssuerFulfillmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuerFulfillmentRequest is not found in the empty JSON string", IssuerFulfillmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssuerFulfillmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuerFulfillmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssuerFulfillmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if (!jsonObj.get("issuerResponseCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerResponseCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerResponseCd").toString()));
      }
      if ((jsonObj.get("rejectReasonCd") != null && !jsonObj.get("rejectReasonCd").isJsonNull()) && !jsonObj.get("rejectReasonCd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectReasonCd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectReasonCd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuerFulfillmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuerFulfillmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuerFulfillmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuerFulfillmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuerFulfillmentRequest>() {
           @Override
           public void write(JsonWriter out, IssuerFulfillmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuerFulfillmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IssuerFulfillmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IssuerFulfillmentRequest
  * @throws IOException if the JSON string is invalid with respect to IssuerFulfillmentRequest
  */
  public static IssuerFulfillmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuerFulfillmentRequest.class);
  }

 /**
  * Convert an instance of IssuerFulfillmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

