/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CreateFraudMasterCardRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class CreateFraudMasterCardRequest {
  /**
   * Account status.   Length: 12-20   Valid Values/Format: ACCT_IS_OPEN, ACCT_HAS_BEEN_CLOSED
   */
  @JsonAdapter(AcctStatusEnum.Adapter.class)
  public enum AcctStatusEnum {
    IS_OPEN("ACCT_IS_OPEN"),
    
    HAS_BEEN_CLOSED("ACCT_HAS_BEEN_CLOSED");

    private String value;

    AcctStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcctStatusEnum fromValue(String value) {
      for (AcctStatusEnum b : AcctStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcctStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcctStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcctStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcctStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCT_STATUS = "acctStatus";
  @SerializedName(SERIALIZED_NAME_ACCT_STATUS)
  private AcctStatusEnum acctStatus;

  /**
   * Chargeback Indicator.   Length:    Valid Values/Format: (VALUES)/(Numeric, Alphanumeric, Special Char)
   */
  @JsonAdapter(ChgbkIndicatorEnum.Adapter.class)
  public enum ChgbkIndicatorEnum {
    _0("0"),
    
    _1("1");

    private String value;

    ChgbkIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChgbkIndicatorEnum fromValue(String value) {
      for (ChgbkIndicatorEnum b : ChgbkIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChgbkIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChgbkIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChgbkIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChgbkIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHGBK_INDICATOR = "chgbkIndicator";
  @SerializedName(SERIALIZED_NAME_CHGBK_INDICATOR)
  private ChgbkIndicatorEnum chgbkIndicator;

  /**
   * CVC Invalid Indicator.   Length: 1   Valid Values/Format: Y, *, M, N, P, U, ?, E
   */
  @JsonAdapter(CvcInvalidIndicatorEnum.Adapter.class)
  public enum CvcInvalidIndicatorEnum {
    Y("Y"),
    
    STAR("*"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    U("U"),
    
    QUESTION_MARK("?"),
    
    E("E");

    private String value;

    CvcInvalidIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CvcInvalidIndicatorEnum fromValue(String value) {
      for (CvcInvalidIndicatorEnum b : CvcInvalidIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CvcInvalidIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CvcInvalidIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CvcInvalidIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CvcInvalidIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CVC_INVALID_INDICATOR = "cvcInvalidIndicator";
  @SerializedName(SERIALIZED_NAME_CVC_INVALID_INDICATOR)
  private CvcInvalidIndicatorEnum cvcInvalidIndicator;

  /**
   * Account Device Type.   Length: 1   Valid Values/Format: 1, 2, 3, 4, A, B, C, D, E, F, G, H, I, J
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    E("E"),
    
    F("F"),
    
    G("G"),
    
    H("H"),
    
    I("I"),
    
    J("J");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeEnum fromValue(String value) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceTypeEnum deviceType;

  /**
   * Fraud Type.   Length: 2   Valid Values/Format: 00, 01, 02, 03 ,04 ,05, 06, 07, 51
   */
  @JsonAdapter(FraudTypeEnum.Adapter.class)
  public enum FraudTypeEnum {
    _00("00"),
    
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04"),
    
    _05("05"),
    
    _06("06"),
    
    _07("07"),
    
    _51("51");

    private String value;

    FraudTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FraudTypeEnum fromValue(String value) {
      for (FraudTypeEnum b : FraudTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FraudTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FraudTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FraudTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FraudTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FRAUD_TYPE = "fraudType";
  @SerializedName(SERIALIZED_NAME_FRAUD_TYPE)
  private FraudTypeEnum fraudType;

  public static final String SERIALIZED_NAME_REPORT_DATE = "reportDate";
  @SerializedName(SERIALIZED_NAME_REPORT_DATE)
  private String reportDate;

  /**
   * Fraud Sub Type.   Length: 1   Valid Values/Format: K, N, P, U
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    K("K"),
    
    N("N"),
    
    P("P"),
    
    U("U");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private SubTypeEnum subType;

  public CreateFraudMasterCardRequest() {
  }

  public CreateFraudMasterCardRequest acctStatus(AcctStatusEnum acctStatus) {
    
    this.acctStatus = acctStatus;
    return this;
  }

   /**
   * Account status.   Length: 12-20   Valid Values/Format: ACCT_IS_OPEN, ACCT_HAS_BEEN_CLOSED
   * @return acctStatus
  **/
  @javax.annotation.Nullable
  public AcctStatusEnum getAcctStatus() {
    return acctStatus;
  }


  public void setAcctStatus(AcctStatusEnum acctStatus) {
    this.acctStatus = acctStatus;
  }


  public CreateFraudMasterCardRequest chgbkIndicator(ChgbkIndicatorEnum chgbkIndicator) {
    
    this.chgbkIndicator = chgbkIndicator;
    return this;
  }

   /**
   * Chargeback Indicator.   Length:    Valid Values/Format: (VALUES)/(Numeric, Alphanumeric, Special Char)
   * @return chgbkIndicator
  **/
  @javax.annotation.Nonnull
  public ChgbkIndicatorEnum getChgbkIndicator() {
    return chgbkIndicator;
  }


  public void setChgbkIndicator(ChgbkIndicatorEnum chgbkIndicator) {
    this.chgbkIndicator = chgbkIndicator;
  }


  public CreateFraudMasterCardRequest cvcInvalidIndicator(CvcInvalidIndicatorEnum cvcInvalidIndicator) {
    
    this.cvcInvalidIndicator = cvcInvalidIndicator;
    return this;
  }

   /**
   * CVC Invalid Indicator.   Length: 1   Valid Values/Format: Y, *, M, N, P, U, ?, E
   * @return cvcInvalidIndicator
  **/
  @javax.annotation.Nonnull
  public CvcInvalidIndicatorEnum getCvcInvalidIndicator() {
    return cvcInvalidIndicator;
  }


  public void setCvcInvalidIndicator(CvcInvalidIndicatorEnum cvcInvalidIndicator) {
    this.cvcInvalidIndicator = cvcInvalidIndicator;
  }


  public CreateFraudMasterCardRequest deviceType(DeviceTypeEnum deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Account Device Type.   Length: 1   Valid Values/Format: 1, 2, 3, 4, A, B, C, D, E, F, G, H, I, J
   * @return deviceType
  **/
  @javax.annotation.Nullable
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }


  public void setDeviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
  }


  public CreateFraudMasterCardRequest fraudType(FraudTypeEnum fraudType) {
    
    this.fraudType = fraudType;
    return this;
  }

   /**
   * Fraud Type.   Length: 2   Valid Values/Format: 00, 01, 02, 03 ,04 ,05, 06, 07, 51
   * @return fraudType
  **/
  @javax.annotation.Nonnull
  public FraudTypeEnum getFraudType() {
    return fraudType;
  }


  public void setFraudType(FraudTypeEnum fraudType) {
    this.fraudType = fraudType;
  }


  public CreateFraudMasterCardRequest reportDate(String reportDate) {
    
    this.reportDate = reportDate;
    return this;
  }

   /**
   * Fraud Report Date.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return reportDate
  **/
  @javax.annotation.Nonnull
  public String getReportDate() {
    return reportDate;
  }


  public void setReportDate(String reportDate) {
    this.reportDate = reportDate;
  }


  public CreateFraudMasterCardRequest subType(SubTypeEnum subType) {
    
    this.subType = subType;
    return this;
  }

   /**
   * Fraud Sub Type.   Length: 1   Valid Values/Format: K, N, P, U
   * @return subType
  **/
  @javax.annotation.Nonnull
  public SubTypeEnum getSubType() {
    return subType;
  }


  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFraudMasterCardRequest createFraudMasterCardRequest = (CreateFraudMasterCardRequest) o;
    return Objects.equals(this.acctStatus, createFraudMasterCardRequest.acctStatus) &&
        Objects.equals(this.chgbkIndicator, createFraudMasterCardRequest.chgbkIndicator) &&
        Objects.equals(this.cvcInvalidIndicator, createFraudMasterCardRequest.cvcInvalidIndicator) &&
        Objects.equals(this.deviceType, createFraudMasterCardRequest.deviceType) &&
        Objects.equals(this.fraudType, createFraudMasterCardRequest.fraudType) &&
        Objects.equals(this.reportDate, createFraudMasterCardRequest.reportDate) &&
        Objects.equals(this.subType, createFraudMasterCardRequest.subType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acctStatus, chgbkIndicator, cvcInvalidIndicator, deviceType, fraudType, reportDate, subType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFraudMasterCardRequest {\n");
    sb.append("    acctStatus: ").append(toIndentedString(acctStatus)).append("\n");
    sb.append("    chgbkIndicator: ").append(toIndentedString(chgbkIndicator)).append("\n");
    sb.append("    cvcInvalidIndicator: ").append(toIndentedString(cvcInvalidIndicator)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    fraudType: ").append(toIndentedString(fraudType)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acctStatus");
    openapiFields.add("chgbkIndicator");
    openapiFields.add("cvcInvalidIndicator");
    openapiFields.add("deviceType");
    openapiFields.add("fraudType");
    openapiFields.add("reportDate");
    openapiFields.add("subType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chgbkIndicator");
    openapiRequiredFields.add("cvcInvalidIndicator");
    openapiRequiredFields.add("fraudType");
    openapiRequiredFields.add("reportDate");
    openapiRequiredFields.add("subType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateFraudMasterCardRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFraudMasterCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFraudMasterCardRequest is not found in the empty JSON string", CreateFraudMasterCardRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFraudMasterCardRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFraudMasterCardRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFraudMasterCardRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acctStatus") != null && !jsonObj.get("acctStatus").isJsonNull()) && !jsonObj.get("acctStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctStatus").toString()));
      }
      if (!jsonObj.get("chgbkIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chgbkIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chgbkIndicator").toString()));
      }
      if (!jsonObj.get("cvcInvalidIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvcInvalidIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvcInvalidIndicator").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      if (!jsonObj.get("fraudType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fraudType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fraudType").toString()));
      }
      if (!jsonObj.get("reportDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportDate").toString()));
      }
      if (!jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFraudMasterCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFraudMasterCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFraudMasterCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFraudMasterCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFraudMasterCardRequest>() {
           @Override
           public void write(JsonWriter out, CreateFraudMasterCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFraudMasterCardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateFraudMasterCardRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateFraudMasterCardRequest
  * @throws IOException if the JSON string is invalid with respect to CreateFraudMasterCardRequest
  */
  public static CreateFraudMasterCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFraudMasterCardRequest.class);
  }

 /**
  * Convert an instance of CreateFraudMasterCardRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

