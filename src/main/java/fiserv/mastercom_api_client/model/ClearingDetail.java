/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fiserv.mastercom_api_client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ClearingDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-07T19:57:39.604201-03:00[America/Buenos_Aires]")
public class ClearingDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_LEVEL_MANAGEMENT_ACCOUNT_CATEGORY_CODE = "accountLevelManagementAccountCategoryCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LEVEL_MANAGEMENT_ACCOUNT_CATEGORY_CODE)
  private String accountLevelManagementAccountCategoryCode;

  public static final String SERIALIZED_NAME_ACQUIRER_REFERENCE_DATA = "acquirerReferenceData";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_REFERENCE_DATA)
  private String acquirerReferenceData;

  public static final String SERIALIZED_NAME_ACQUIRING_INSTITUTION_ID_CODE = "acquiringInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_INSTITUTION_ID_CODE)
  private String acquiringInstitutionIdCode;

  public static final String SERIALIZED_NAME_APPROVAL_CODE = "approvalCode";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CODE)
  private String approvalCode;

  public static final String SERIALIZED_NAME_BUSINESS_CYCLE = "businessCycle";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CYCLE)
  private String businessCycle;

  public static final String SERIALIZED_NAME_BUSINESS_SERVICE_ARRANGEMENT_TYPE_CODE = "businessServiceArrangementTypeCode";
  @SerializedName(SERIALIZED_NAME_BUSINESS_SERVICE_ARRANGEMENT_TYPE_CODE)
  private String businessServiceArrangementTypeCode;

  public static final String SERIALIZED_NAME_BUSINESS_SERVICE_ID_CODE = "businessServiceIdCode";
  @SerializedName(SERIALIZED_NAME_BUSINESS_SERVICE_ID_CODE)
  private String businessServiceIdCode;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_BUSINESS_CODE = "cardAcceptorBusinessCode";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_BUSINESS_CODE)
  private String cardAcceptorBusinessCode;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_CITY = "cardAcceptorCity";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_CITY)
  private String cardAcceptorCity;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_CLASSIFICATION_OVERRIDE_INDICATOR = "cardAcceptorClassificationOverrideIndicator";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_CLASSIFICATION_OVERRIDE_INDICATOR)
  private String cardAcceptorClassificationOverrideIndicator;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_COUNTRY = "cardAcceptorCountry";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_COUNTRY)
  private String cardAcceptorCountry;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE = "cardAcceptorIdCode";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_ID_CODE)
  private String cardAcceptorIdCode;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_NAME = "cardAcceptorName";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_NAME)
  private String cardAcceptorName;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_POSTAL_CODE = "cardAcceptorPostalCode";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_POSTAL_CODE)
  private String cardAcceptorPostalCode;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_STATE = "cardAcceptorState";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_STATE)
  private String cardAcceptorState;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_STREET_ADDRESS = "cardAcceptorStreetAddress";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_STREET_ADDRESS)
  private String cardAcceptorStreetAddress;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_TERMINAL_ID = "cardAcceptorTerminalId";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_TERMINAL_ID)
  private String cardAcceptorTerminalId;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR_URL = "cardAcceptorUrl";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR_URL)
  private String cardAcceptorUrl;

  public static final String SERIALIZED_NAME_CARD_CAPTURE_CAPABILITY = "cardCaptureCapability";
  @SerializedName(SERIALIZED_NAME_CARD_CAPTURE_CAPABILITY)
  private String cardCaptureCapability;

  public static final String SERIALIZED_NAME_CARD_DATA_INPUT_CAPABILITY = "cardDataInputCapability";
  @SerializedName(SERIALIZED_NAME_CARD_DATA_INPUT_CAPABILITY)
  private String cardDataInputCapability;

  public static final String SERIALIZED_NAME_CARD_DATA_INPUT_MODE = "cardDataInputMode";
  @SerializedName(SERIALIZED_NAME_CARD_DATA_INPUT_MODE)
  private String cardDataInputMode;

  public static final String SERIALIZED_NAME_CARD_DATA_OUTPUT_CAPABILITY = "cardDataOutputCapability";
  @SerializedName(SERIALIZED_NAME_CARD_DATA_OUTPUT_CAPABILITY)
  private String cardDataOutputCapability;

  public static final String SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_CAPABILITY = "cardholderAuthenticationCapability";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_CAPABILITY)
  private String cardholderAuthenticationCapability;

  public static final String SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_ENTITY = "cardholderAuthenticationEntity";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_ENTITY)
  private String cardholderAuthenticationEntity;

  public static final String SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_METHOD = "cardholderAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_AUTHENTICATION_METHOD)
  private String cardholderAuthenticationMethod;

  public static final String SERIALIZED_NAME_CARDHOLDER_BILLING_AMOUNT = "cardholderBillingAmount";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_BILLING_AMOUNT)
  private String cardholderBillingAmount;

  public static final String SERIALIZED_NAME_CARDHOLDER_BILLING_CURRENCY_CODE = "cardholderBillingCurrencyCode";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_BILLING_CURRENCY_CODE)
  private String cardholderBillingCurrencyCode;

  public static final String SERIALIZED_NAME_CARDHOLDER_FROM_ACCOUNT_CODE = "cardholderFromAccountCode";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_FROM_ACCOUNT_CODE)
  private String cardholderFromAccountCode;

  public static final String SERIALIZED_NAME_CARDHOLDER_PRESENT_DATA = "cardholderPresentData";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_PRESENT_DATA)
  private String cardholderPresentData;

  public static final String SERIALIZED_NAME_CARDHOLDER_TO_ACCOUNT_CODE = "cardholderToAccountCode";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_TO_ACCOUNT_CODE)
  private String cardholderToAccountCode;

  public static final String SERIALIZED_NAME_CARD_ISSUER_REFERENCE_DATA = "cardIssuerReferenceData";
  @SerializedName(SERIALIZED_NAME_CARD_ISSUER_REFERENCE_DATA)
  private String cardIssuerReferenceData;

  public static final String SERIALIZED_NAME_CARD_PRESENT_DATA = "cardPresentData";
  @SerializedName(SERIALIZED_NAME_CARD_PRESENT_DATA)
  private String cardPresentData;

  public static final String SERIALIZED_NAME_CARD_PROGRAM_IDENTIFIER = "cardProgramIdentifier";
  @SerializedName(SERIALIZED_NAME_CARD_PROGRAM_IDENTIFIER)
  private String cardProgramIdentifier;

  public static final String SERIALIZED_NAME_CENTRAL_SITE_BUSINESS_DATE = "centralSiteBusinessDate";
  @SerializedName(SERIALIZED_NAME_CENTRAL_SITE_BUSINESS_DATE)
  private String centralSiteBusinessDate;

  public static final String SERIALIZED_NAME_CENTRAL_SITE_PROCESSING_DATE_ORIGINAL_MESSAGE = "centralSiteProcessingDateOriginalMessage";
  @SerializedName(SERIALIZED_NAME_CENTRAL_SITE_PROCESSING_DATE_ORIGINAL_MESSAGE)
  private String centralSiteProcessingDateOriginalMessage;

  public static final String SERIALIZED_NAME_CURRENCY_CODE_CARDHOLDER_BILLING = "currencyCodeCardholderBilling";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE_CARDHOLDER_BILLING)
  private String currencyCodeCardholderBilling;

  public static final String SERIALIZED_NAME_CURRENCY_CODE_RECONCILIATION = "currencyCodeReconciliation";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE_RECONCILIATION)
  private String currencyCodeReconciliation;

  public static final String SERIALIZED_NAME_CURRENCY_CODE_TRANSACTION = "currencyCodeTransaction";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE_TRANSACTION)
  private String currencyCodeTransaction;

  public static final String SERIALIZED_NAME_CURRENCY_EXPONENT_CARDHOLDER_BILLING = "currencyExponentCardholderBilling";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXPONENT_CARDHOLDER_BILLING)
  private String currencyExponentCardholderBilling;

  public static final String SERIALIZED_NAME_CURRENCY_EXPONENT_RECONCILIATION = "currencyExponentReconciliation";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXPONENT_RECONCILIATION)
  private String currencyExponentReconciliation;

  public static final String SERIALIZED_NAME_CURRENCY_EXPONENT_TRANSACTION = "currencyExponentTransaction";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXPONENT_TRANSACTION)
  private String currencyExponentTransaction;

  public static final String SERIALIZED_NAME_DATA_RECORD = "dataRecord";
  @SerializedName(SERIALIZED_NAME_DATA_RECORD)
  private String dataRecord;

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_CARD_AUTH = "electronicCommerceCardAuth";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_CARD_AUTH)
  private String electronicCommerceCardAuth;

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR = "electronicCommerceSecurityLevelIndicator";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_SECURITY_LEVEL_INDICATOR)
  private String electronicCommerceSecurityLevelIndicator;

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_UCAF_COLLECTION_INDICATOR = "electronicCommerceUcafCollectionIndicator";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_UCAF_COLLECTION_INDICATOR)
  private String electronicCommerceUcafCollectionIndicator;

  public static final String SERIALIZED_NAME_FORWARDING_INSTITUTION_ID_CODE = "forwardingInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_FORWARDING_INSTITUTION_ID_CODE)
  private String forwardingInstitutionIdCode;

  public static final String SERIALIZED_NAME_INSTALLMENT_AMOUNT = "installmentAmount";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_AMOUNT)
  private String installmentAmount;

  public static final String SERIALIZED_NAME_INSTALLMENT_FEE = "installmentFee";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_FEE)
  private String installmentFee;

  public static final String SERIALIZED_NAME_INSTALLMENT_NUMBER = "installmentNumber";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_NUMBER)
  private String installmentNumber;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_BRAZIL = "installmentPaymentDataBrazil";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_BRAZIL)
  private String installmentPaymentDataBrazil;

  public static final String SERIALIZED_NAME_ADDITIONAL_AMOUNT_DATA_CODE = "additionalAmountDataCode";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AMOUNT_DATA_CODE)
  private String additionalAmountDataCode;

  public static final String SERIALIZED_NAME_INSTALLMENT_PARAMETERS = "installmentParameters";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PARAMETERS)
  private InstallmentParameters installmentParameters;

  public static final String SERIALIZED_NAME_ORIGINAL_INFORMATION_INSTALLMENTS = "originalInformationInstallments";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_INFORMATION_INSTALLMENTS)
  private OriginalInformationInstallments originalInformationInstallments;

  public static final String SERIALIZED_NAME_INSTALLMENT_PLAN_TYPE = "installmentPlanType";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PLAN_TYPE)
  private String installmentPlanType;

  public static final String SERIALIZED_NAME_FUNCTION_CODE = "functionCode";
  @SerializedName(SERIALIZED_NAME_FUNCTION_CODE)
  private String functionCode;

  public static final String SERIALIZED_NAME_GCMS_PRODUCT_INDENTIFIER = "gcmsProductIndentifier";
  @SerializedName(SERIALIZED_NAME_GCMS_PRODUCT_INDENTIFIER)
  private String gcmsProductIndentifier;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA = "installmentPaymentData";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA)
  private String installmentPaymentData;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_ANNUAL_PERCENTAGE_RATE = "installmentPaymentDataAnnualPercentageRate";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_ANNUAL_PERCENTAGE_RATE)
  private String installmentPaymentDataAnnualPercentageRate;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_FIRST_INSTALLMENT_AMOUNT = "installmentPaymentDataFirstInstallmentAmount";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_FIRST_INSTALLMENT_AMOUNT)
  private String installmentPaymentDataFirstInstallmentAmount;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_INSTALLMENT_FEE = "installmentPaymentDataInstallmentFee";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_INSTALLMENT_FEE)
  private String installmentPaymentDataInstallmentFee;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_INTEREST_RATE = "installmentPaymentDataInterestRate";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_INTEREST_RATE)
  private String installmentPaymentDataInterestRate;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_NUMBER_INSTALLMENTS = "installmentPaymentDataNumberInstallments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_NUMBER_INSTALLMENTS)
  private String installmentPaymentDataNumberInstallments;

  public static final String SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_SUBSEQUENT_INSTALLMENT_AMOUNT = "installmentPaymentDataSubsequentInstallmentAmount";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_PAYMENT_DATA_SUBSEQUENT_INSTALLMENT_AMOUNT)
  private String installmentPaymentDataSubsequentInstallmentAmount;

  public static final String SERIALIZED_NAME_INTEGRATED_CIRCUIT_CARD_RELATED_DATA = "integratedCircuitCardRelatedData";
  @SerializedName(SERIALIZED_NAME_INTEGRATED_CIRCUIT_CARD_RELATED_DATA)
  private String integratedCircuitCardRelatedData;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchangeRateDesignator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_LICENSED_PRODUCT_INDENTIFIER = "licensedProductIndentifier";
  @SerializedName(SERIALIZED_NAME_LICENSED_PRODUCT_INDENTIFIER)
  private String licensedProductIndentifier;

  public static final String SERIALIZED_NAME_LEGAL_CORPORATE_NAME = "legalCorporateName";
  @SerializedName(SERIALIZED_NAME_LEGAL_CORPORATE_NAME)
  private String legalCorporateName;

  public static final String SERIALIZED_NAME_LOCAL_MESSAGE_REASON_CODE = "localMessageReasonCode";
  @SerializedName(SERIALIZED_NAME_LOCAL_MESSAGE_REASON_CODE)
  private String localMessageReasonCode;

  public static final String SERIALIZED_NAME_LOCAL_TAX1_I_V_A = "localTax1IVA";
  @SerializedName(SERIALIZED_NAME_LOCAL_TAX1_I_V_A)
  private String localTax1IVA;

  public static final String SERIALIZED_NAME_LOCAL_TRANSACTION_DATE_TIME = "localTransactionDateTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TRANSACTION_DATE_TIME)
  private String localTransactionDateTime;

  public static final String SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID = "mastercardAssignedId";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID)
  private String mastercardAssignedId;

  public static final String SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID_OVERRIDE_INDICATOR = "mastercardAssignedIdOverrideIndicator";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID_OVERRIDE_INDICATOR)
  private String mastercardAssignedIdOverrideIndicator;

  public static final String SERIALIZED_NAME_MASTERCARD_MAPPING_SERVICE_ACCOUNT_NUMBER = "mastercardMappingServiceAccountNumber";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_MAPPING_SERVICE_ACCOUNT_NUMBER)
  private String mastercardMappingServiceAccountNumber;

  public static final String SERIALIZED_NAME_MASTER_PASS_INCENTIVE_INDICATOR = "masterPassIncentiveIndicator";
  @SerializedName(SERIALIZED_NAME_MASTER_PASS_INCENTIVE_INDICATOR)
  private String masterPassIncentiveIndicator;

  public static final String SERIALIZED_NAME_MESSAGE_REASON_CODE = "messageReasonCode";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REASON_CODE)
  private String messageReasonCode;

  public static final String SERIALIZED_NAME_MESSAGE_REVERSAL_INDICATOR = "messageReversalIndicator";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REVERSAL_INDICATOR)
  private String messageReversalIndicator;

  public static final String SERIALIZED_NAME_NUMBER_OF_INSTALLMENTS = "numberOfInstallments";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_INSTALLMENTS)
  private String numberOfInstallments;

  public static final String SERIALIZED_NAME_ORIGINATING_MESSAGE_FORMAT = "originatingMessageFormat";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_MESSAGE_FORMAT)
  private String originatingMessageFormat;

  public static final String SERIALIZED_NAME_PARTNER_ID_CODE = "partnerIdCode";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID_CODE)
  private String partnerIdCode;

  public static final String SERIALIZED_NAME_PIN_CAPTURE_CAPABILITY = "pinCaptureCapability";
  @SerializedName(SERIALIZED_NAME_PIN_CAPTURE_CAPABILITY)
  private String pinCaptureCapability;

  public static final String SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER = "primaryAccountNumber";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACCOUNT_NUMBER)
  private String primaryAccountNumber;

  public static final String SERIALIZED_NAME_PROCESSING_CODE = "processingCode";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CODE)
  private String processingCode;

  public static final String SERIALIZED_NAME_PRODUCT_OVERRIDE_INDICATOR = "productOverrideIndicator";
  @SerializedName(SERIALIZED_NAME_PRODUCT_OVERRIDE_INDICATOR)
  private String productOverrideIndicator;

  public static final String SERIALIZED_NAME_PROGRAM_REGISTRATION_ID = "programRegistrationId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_REGISTRATION_ID)
  private String programRegistrationId;

  public static final String SERIALIZED_NAME_QPS_PAYPASS_ELIGIBILITY_INDICATOR = "qpsPaypassEligibilityIndicator";
  @SerializedName(SERIALIZED_NAME_QPS_PAYPASS_ELIGIBILITY_INDICATOR)
  private String qpsPaypassEligibilityIndicator;

  public static final String SERIALIZED_NAME_RATE_INDICATOR = "rateIndicator";
  @SerializedName(SERIALIZED_NAME_RATE_INDICATOR)
  private String rateIndicator;

  public static final String SERIALIZED_NAME_RECEIVING_INSTITUTION_ID_CODE = "receivingInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_RECEIVING_INSTITUTION_ID_CODE)
  private String receivingInstitutionIdCode;

  public static final String SERIALIZED_NAME_RECONCILIATION_AMOUNT = "reconciliationAmount";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_AMOUNT)
  private String reconciliationAmount;

  public static final String SERIALIZED_NAME_RECONCILIATION_CURRENCY_CODE = "reconciliationCurrencyCode";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_CURRENCY_CODE)
  private String reconciliationCurrencyCode;

  public static final String SERIALIZED_NAME_REMOTE_PAYMENTS_PROGRAM_DATA = "remotePaymentsProgramData";
  @SerializedName(SERIALIZED_NAME_REMOTE_PAYMENTS_PROGRAM_DATA)
  private String remotePaymentsProgramData;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "serviceCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATA = "settlementData";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATA)
  private String settlementData;

  public static final String SERIALIZED_NAME_SETTLEMENT_INDICATOR = "settlementIndicator";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_INDICATOR)
  private String settlementIndicator;

  public static final String SERIALIZED_NAME_SPECIAL_CONDITIONS_INDICATOR = "specialConditionsIndicator";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CONDITIONS_INDICATOR)
  private String specialConditionsIndicator;

  public static final String SERIALIZED_NAME_TERMINAL_DATA_OUTPUT_CAPABILITY = "terminalDataOutputCapability";
  @SerializedName(SERIALIZED_NAME_TERMINAL_DATA_OUTPUT_CAPABILITY)
  private String terminalDataOutputCapability;

  public static final String SERIALIZED_NAME_TERMINAL_OPERATING_ENVIRONMENT = "terminalOperatingEnvironment";
  @SerializedName(SERIALIZED_NAME_TERMINAL_OPERATING_ENVIRONMENT)
  private String terminalOperatingEnvironment;

  public static final String SERIALIZED_NAME_TERMINAL_TYPE = "terminalType";
  @SerializedName(SERIALIZED_NAME_TERMINAL_TYPE)
  private String terminalType;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR_ID = "tokenRequestorId";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR_ID)
  private String tokenRequestorId;

  public static final String SERIALIZED_NAME_TOTAL_TRANSACTION_AMOUNT = "totalTransactionAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSACTION_AMOUNT)
  private String totalTransactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL = "transactionAmountLocal";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT_LOCAL)
  private String transactionAmountLocal;

  public static final String SERIALIZED_NAME_TRANSACTION_CATEGORY_INDICATOR = "transactionCategoryIndicator";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CATEGORY_INDICATOR)
  private String transactionCategoryIndicator;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY_CODE = "transactionCurrencyCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY_CODE)
  private String transactionCurrencyCode;

  public static final String SERIALIZED_NAME_TRANSACTION_DESTINATION_INSTITUTION_ID_CODE = "transactionDestinationInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DESTINATION_INSTITUTION_ID_CODE)
  private String transactionDestinationInstitutionIdCode;

  public static final String SERIALIZED_NAME_TRANSACTION_LIFE_CYCLE_ID = "transactionLifeCycleId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LIFE_CYCLE_ID)
  private String transactionLifeCycleId;

  public static final String SERIALIZED_NAME_TRANSACTION_ORIGINATOR_INSTITUTION_ID_CODE = "transactionOriginatorInstitutionIdCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ORIGINATOR_INSTITUTION_ID_CODE)
  private String transactionOriginatorInstitutionIdCode;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public static final String SERIALIZED_NAME_TRANSIT_PROGRAM_CODE = "transitProgramCode";
  @SerializedName(SERIALIZED_NAME_TRANSIT_PROGRAM_CODE)
  private String transitProgramCode;

  public static final String SERIALIZED_NAME_WALLET_IDENTIFIER_MDES = "walletIdentifierMdes";
  @SerializedName(SERIALIZED_NAME_WALLET_IDENTIFIER_MDES)
  private String walletIdentifierMdes;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESSMENT_AMOUNT = "currencyConversionAssessmentAmount";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_ASSESSMENT_AMOUNT)
  private String currencyConversionAssessmentAmount;

  public static final String SERIALIZED_NAME_JAPAN_COMMON_MERCHANT_CODE = "japanCommonMerchantCode";
  @SerializedName(SERIALIZED_NAME_JAPAN_COMMON_MERCHANT_CODE)
  private String japanCommonMerchantCode;

  public static final String SERIALIZED_NAME_INSTALLMENT_DATA = "installmentData";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_DATA)
  private String installmentData;

  public static final String SERIALIZED_NAME_FLEX_CODE = "flexCode";
  @SerializedName(SERIALIZED_NAME_FLEX_CODE)
  private String flexCode;

  public ClearingDetail() {
  }

  public ClearingDetail accountLevelManagementAccountCategoryCode(String accountLevelManagementAccountCategoryCode) {
    
    this.accountLevelManagementAccountCategoryCode = accountLevelManagementAccountCategoryCode;
    return this;
  }

   /**
   * Describes the category code of Account Level Management assigned
   * @return accountLevelManagementAccountCategoryCode
  **/
  @javax.annotation.Nullable
  public String getAccountLevelManagementAccountCategoryCode() {
    return accountLevelManagementAccountCategoryCode;
  }


  public void setAccountLevelManagementAccountCategoryCode(String accountLevelManagementAccountCategoryCode) {
    this.accountLevelManagementAccountCategoryCode = accountLevelManagementAccountCategoryCode;
  }


  public ClearingDetail acquirerReferenceData(String acquirerReferenceData) {
    
    this.acquirerReferenceData = acquirerReferenceData;
    return this;
  }

   /**
   * Data an acquirer supplies in an acquirer-originated message that may be required for an issuer to return to the acquirer in a subsequent message
   * @return acquirerReferenceData
  **/
  @javax.annotation.Nullable
  public String getAcquirerReferenceData() {
    return acquirerReferenceData;
  }


  public void setAcquirerReferenceData(String acquirerReferenceData) {
    this.acquirerReferenceData = acquirerReferenceData;
  }


  public ClearingDetail acquiringInstitutionIdCode(String acquiringInstitutionIdCode) {
    
    this.acquiringInstitutionIdCode = acquiringInstitutionIdCode;
    return this;
  }

   /**
   * Identifies the acquiring institution (for example, merchant bank) or its agent.
   * @return acquiringInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getAcquiringInstitutionIdCode() {
    return acquiringInstitutionIdCode;
  }


  public void setAcquiringInstitutionIdCode(String acquiringInstitutionIdCode) {
    this.acquiringInstitutionIdCode = acquiringInstitutionIdCode;
  }


  public ClearingDetail approvalCode(String approvalCode) {
    
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * A code the authorizing institution assigns indicating approval
   * @return approvalCode
  **/
  @javax.annotation.Nullable
  public String getApprovalCode() {
    return approvalCode;
  }


  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }


  public ClearingDetail businessCycle(String businessCycle) {
    
    this.businessCycle = businessCycle;
    return this;
  }

   /**
   * A two-digit numeric subfield (such as 01, 02, or 03) that identifies a reconciliation period in a Business Date
   * @return businessCycle
  **/
  @javax.annotation.Nullable
  public String getBusinessCycle() {
    return businessCycle;
  }


  public void setBusinessCycle(String businessCycle) {
    this.businessCycle = businessCycle;
  }


  public ClearingDetail businessServiceArrangementTypeCode(String businessServiceArrangementTypeCode) {
    
    this.businessServiceArrangementTypeCode = businessServiceArrangementTypeCode;
    return this;
  }

   /**
   * A one position numeric value that identifies the business relationship between the transaction&#39;s participants
   * @return businessServiceArrangementTypeCode
  **/
  @javax.annotation.Nullable
  public String getBusinessServiceArrangementTypeCode() {
    return businessServiceArrangementTypeCode;
  }


  public void setBusinessServiceArrangementTypeCode(String businessServiceArrangementTypeCode) {
    this.businessServiceArrangementTypeCode = businessServiceArrangementTypeCode;
  }


  public ClearingDetail businessServiceIdCode(String businessServiceIdCode) {
    
    this.businessServiceIdCode = businessServiceIdCode;
    return this;
  }

   /**
   * A six-position value that identifies the business service to which the transaction is assigned for reconciliation and rules basis
   * @return businessServiceIdCode
  **/
  @javax.annotation.Nullable
  public String getBusinessServiceIdCode() {
    return businessServiceIdCode;
  }


  public void setBusinessServiceIdCode(String businessServiceIdCode) {
    this.businessServiceIdCode = businessServiceIdCode;
  }


  public ClearingDetail cardAcceptorBusinessCode(String cardAcceptorBusinessCode) {
    
    this.cardAcceptorBusinessCode = cardAcceptorBusinessCode;
    return this;
  }

   /**
   * Classifies the type of business applicable to the card acceptor
   * @return cardAcceptorBusinessCode
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorBusinessCode() {
    return cardAcceptorBusinessCode;
  }


  public void setCardAcceptorBusinessCode(String cardAcceptorBusinessCode) {
    this.cardAcceptorBusinessCode = cardAcceptorBusinessCode;
  }


  public ClearingDetail cardAcceptorCity(String cardAcceptorCity) {
    
    this.cardAcceptorCity = cardAcceptorCity;
    return this;
  }

   /**
   * Contains the card acceptor city of the merchant or, if a payment facilitator is involved in the transaction, the sub-merchant
   * @return cardAcceptorCity
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorCity() {
    return cardAcceptorCity;
  }


  public void setCardAcceptorCity(String cardAcceptorCity) {
    this.cardAcceptorCity = cardAcceptorCity;
  }


  public ClearingDetail cardAcceptorClassificationOverrideIndicator(String cardAcceptorClassificationOverrideIndicator) {
    
    this.cardAcceptorClassificationOverrideIndicator = cardAcceptorClassificationOverrideIndicator;
    return this;
  }

   /**
   * Indicate whether Card Acceptor Business Code (MCC) override rates, Card Acceptor Business (CAB) Type override rates, or neither, were used in the interchange fee amount
   * @return cardAcceptorClassificationOverrideIndicator
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorClassificationOverrideIndicator() {
    return cardAcceptorClassificationOverrideIndicator;
  }


  public void setCardAcceptorClassificationOverrideIndicator(String cardAcceptorClassificationOverrideIndicator) {
    this.cardAcceptorClassificationOverrideIndicator = cardAcceptorClassificationOverrideIndicator;
  }


  public ClearingDetail cardAcceptorCountry(String cardAcceptorCountry) {
    
    this.cardAcceptorCountry = cardAcceptorCountry;
    return this;
  }

   /**
   * Contains the card acceptor county of the merchant or, if a payment facilitator is involved in the transaction, the sub-merchant
   * @return cardAcceptorCountry
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorCountry() {
    return cardAcceptorCountry;
  }


  public void setCardAcceptorCountry(String cardAcceptorCountry) {
    this.cardAcceptorCountry = cardAcceptorCountry;
  }


  public ClearingDetail cardAcceptorIdCode(String cardAcceptorIdCode) {
    
    this.cardAcceptorIdCode = cardAcceptorIdCode;
    return this;
  }

   /**
   * Identifies the card acceptor ID assigned by the acquirer
   * @return cardAcceptorIdCode
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorIdCode() {
    return cardAcceptorIdCode;
  }


  public void setCardAcceptorIdCode(String cardAcceptorIdCode) {
    this.cardAcceptorIdCode = cardAcceptorIdCode;
  }


  public ClearingDetail cardAcceptorName(String cardAcceptorName) {
    
    this.cardAcceptorName = cardAcceptorName;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s name
   * @return cardAcceptorName
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorName() {
    return cardAcceptorName;
  }


  public void setCardAcceptorName(String cardAcceptorName) {
    this.cardAcceptorName = cardAcceptorName;
  }


  public ClearingDetail cardAcceptorPostalCode(String cardAcceptorPostalCode) {
    
    this.cardAcceptorPostalCode = cardAcceptorPostalCode;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s postal code
   * @return cardAcceptorPostalCode
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorPostalCode() {
    return cardAcceptorPostalCode;
  }


  public void setCardAcceptorPostalCode(String cardAcceptorPostalCode) {
    this.cardAcceptorPostalCode = cardAcceptorPostalCode;
  }


  public ClearingDetail cardAcceptorState(String cardAcceptorState) {
    
    this.cardAcceptorState = cardAcceptorState;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s state
   * @return cardAcceptorState
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorState() {
    return cardAcceptorState;
  }


  public void setCardAcceptorState(String cardAcceptorState) {
    this.cardAcceptorState = cardAcceptorState;
  }


  public ClearingDetail cardAcceptorStreetAddress(String cardAcceptorStreetAddress) {
    
    this.cardAcceptorStreetAddress = cardAcceptorStreetAddress;
    return this;
  }

   /**
   * Contains the card acceptor&#39;s street address
   * @return cardAcceptorStreetAddress
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorStreetAddress() {
    return cardAcceptorStreetAddress;
  }


  public void setCardAcceptorStreetAddress(String cardAcceptorStreetAddress) {
    this.cardAcceptorStreetAddress = cardAcceptorStreetAddress;
  }


  public ClearingDetail cardAcceptorTerminalId(String cardAcceptorTerminalId) {
    
    this.cardAcceptorTerminalId = cardAcceptorTerminalId;
    return this;
  }

   /**
   * A unique code identifying a terminal at the card acceptor location
   * @return cardAcceptorTerminalId
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorTerminalId() {
    return cardAcceptorTerminalId;
  }


  public void setCardAcceptorTerminalId(String cardAcceptorTerminalId) {
    this.cardAcceptorTerminalId = cardAcceptorTerminalId;
  }


  public ClearingDetail cardAcceptorUrl(String cardAcceptorUrl) {
    
    this.cardAcceptorUrl = cardAcceptorUrl;
    return this;
  }

   /**
   * Contains the card website URL address
   * @return cardAcceptorUrl
  **/
  @javax.annotation.Nullable
  public String getCardAcceptorUrl() {
    return cardAcceptorUrl;
  }


  public void setCardAcceptorUrl(String cardAcceptorUrl) {
    this.cardAcceptorUrl = cardAcceptorUrl;
  }


  public ClearingDetail cardCaptureCapability(String cardCaptureCapability) {
    
    this.cardCaptureCapability = cardCaptureCapability;
    return this;
  }

   /**
   * Indicates whether the terminal has card capture capabilities
   * @return cardCaptureCapability
  **/
  @javax.annotation.Nullable
  public String getCardCaptureCapability() {
    return cardCaptureCapability;
  }


  public void setCardCaptureCapability(String cardCaptureCapability) {
    this.cardCaptureCapability = cardCaptureCapability;
  }


  public ClearingDetail cardDataInputCapability(String cardDataInputCapability) {
    
    this.cardDataInputCapability = cardDataInputCapability;
    return this;
  }

   /**
   * Indicates the terminal capabilities for transferring the data on the card into the terminal
   * @return cardDataInputCapability
  **/
  @javax.annotation.Nullable
  public String getCardDataInputCapability() {
    return cardDataInputCapability;
  }


  public void setCardDataInputCapability(String cardDataInputCapability) {
    this.cardDataInputCapability = cardDataInputCapability;
  }


  public ClearingDetail cardDataInputMode(String cardDataInputMode) {
    
    this.cardDataInputMode = cardDataInputMode;
    return this;
  }

   /**
   * Indicates how the card data was entered at the terminal
   * @return cardDataInputMode
  **/
  @javax.annotation.Nullable
  public String getCardDataInputMode() {
    return cardDataInputMode;
  }


  public void setCardDataInputMode(String cardDataInputMode) {
    this.cardDataInputMode = cardDataInputMode;
  }


  public ClearingDetail cardDataOutputCapability(String cardDataOutputCapability) {
    
    this.cardDataOutputCapability = cardDataOutputCapability;
    return this;
  }

   /**
   * Indicates the ability of the terminal to write or output data to a card
   * @return cardDataOutputCapability
  **/
  @javax.annotation.Nullable
  public String getCardDataOutputCapability() {
    return cardDataOutputCapability;
  }


  public void setCardDataOutputCapability(String cardDataOutputCapability) {
    this.cardDataOutputCapability = cardDataOutputCapability;
  }


  public ClearingDetail cardholderAuthenticationCapability(String cardholderAuthenticationCapability) {
    
    this.cardholderAuthenticationCapability = cardholderAuthenticationCapability;
    return this;
  }

   /**
   * Describes the capability of the terminal device to support/accept authentication data
   * @return cardholderAuthenticationCapability
  **/
  @javax.annotation.Nullable
  public String getCardholderAuthenticationCapability() {
    return cardholderAuthenticationCapability;
  }


  public void setCardholderAuthenticationCapability(String cardholderAuthenticationCapability) {
    this.cardholderAuthenticationCapability = cardholderAuthenticationCapability;
  }


  public ClearingDetail cardholderAuthenticationEntity(String cardholderAuthenticationEntity) {
    
    this.cardholderAuthenticationEntity = cardholderAuthenticationEntity;
    return this;
  }

   /**
   * Indicates the entity through which the cardholder&#39;s identity was verified at the point of service
   * @return cardholderAuthenticationEntity
  **/
  @javax.annotation.Nullable
  public String getCardholderAuthenticationEntity() {
    return cardholderAuthenticationEntity;
  }


  public void setCardholderAuthenticationEntity(String cardholderAuthenticationEntity) {
    this.cardholderAuthenticationEntity = cardholderAuthenticationEntity;
  }


  public ClearingDetail cardholderAuthenticationMethod(String cardholderAuthenticationMethod) {
    
    this.cardholderAuthenticationMethod = cardholderAuthenticationMethod;
    return this;
  }

   /**
   * Indicates the method by which the cardholder&#39;s identity was verified at the point of service
   * @return cardholderAuthenticationMethod
  **/
  @javax.annotation.Nullable
  public String getCardholderAuthenticationMethod() {
    return cardholderAuthenticationMethod;
  }


  public void setCardholderAuthenticationMethod(String cardholderAuthenticationMethod) {
    this.cardholderAuthenticationMethod = cardholderAuthenticationMethod;
  }


  public ClearingDetail cardholderBillingAmount(String cardholderBillingAmount) {
    
    this.cardholderBillingAmount = cardholderBillingAmount;
    return this;
  }

   /**
   * The transaction amount in the issuers currency
   * @return cardholderBillingAmount
  **/
  @javax.annotation.Nullable
  public String getCardholderBillingAmount() {
    return cardholderBillingAmount;
  }


  public void setCardholderBillingAmount(String cardholderBillingAmount) {
    this.cardholderBillingAmount = cardholderBillingAmount;
  }


  public ClearingDetail cardholderBillingCurrencyCode(String cardholderBillingCurrencyCode) {
    
    this.cardholderBillingCurrencyCode = cardholderBillingCurrencyCode;
    return this;
  }

   /**
   * Identifies the currency code of the cardholder billing amount
   * @return cardholderBillingCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getCardholderBillingCurrencyCode() {
    return cardholderBillingCurrencyCode;
  }


  public void setCardholderBillingCurrencyCode(String cardholderBillingCurrencyCode) {
    this.cardholderBillingCurrencyCode = cardholderBillingCurrencyCode;
  }


  public ClearingDetail cardholderFromAccountCode(String cardholderFromAccountCode) {
    
    this.cardholderFromAccountCode = cardholderFromAccountCode;
    return this;
  }

   /**
   * Describes the cardholder from account type
   * @return cardholderFromAccountCode
  **/
  @javax.annotation.Nullable
  public String getCardholderFromAccountCode() {
    return cardholderFromAccountCode;
  }


  public void setCardholderFromAccountCode(String cardholderFromAccountCode) {
    this.cardholderFromAccountCode = cardholderFromAccountCode;
  }


  public ClearingDetail cardholderPresentData(String cardholderPresentData) {
    
    this.cardholderPresentData = cardholderPresentData;
    return this;
  }

   /**
   * Indicates whether the cardholder is present at the point of service and explains the condition if the cardholder is not present
   * @return cardholderPresentData
  **/
  @javax.annotation.Nullable
  public String getCardholderPresentData() {
    return cardholderPresentData;
  }


  public void setCardholderPresentData(String cardholderPresentData) {
    this.cardholderPresentData = cardholderPresentData;
  }


  public ClearingDetail cardholderToAccountCode(String cardholderToAccountCode) {
    
    this.cardholderToAccountCode = cardholderToAccountCode;
    return this;
  }

   /**
   * Describes the cardholder to account type
   * @return cardholderToAccountCode
  **/
  @javax.annotation.Nullable
  public String getCardholderToAccountCode() {
    return cardholderToAccountCode;
  }


  public void setCardholderToAccountCode(String cardholderToAccountCode) {
    this.cardholderToAccountCode = cardholderToAccountCode;
  }


  public ClearingDetail cardIssuerReferenceData(String cardIssuerReferenceData) {
    
    this.cardIssuerReferenceData = cardIssuerReferenceData;
    return this;
  }

   /**
   * Issuer provided when processing retrieval or chargeback messages
   * @return cardIssuerReferenceData
  **/
  @javax.annotation.Nullable
  public String getCardIssuerReferenceData() {
    return cardIssuerReferenceData;
  }


  public void setCardIssuerReferenceData(String cardIssuerReferenceData) {
    this.cardIssuerReferenceData = cardIssuerReferenceData;
  }


  public ClearingDetail cardPresentData(String cardPresentData) {
    
    this.cardPresentData = cardPresentData;
    return this;
  }

   /**
   * Indicates if the card is present at the point of service
   * @return cardPresentData
  **/
  @javax.annotation.Nullable
  public String getCardPresentData() {
    return cardPresentData;
  }


  public void setCardPresentData(String cardPresentData) {
    this.cardPresentData = cardPresentData;
  }


  public ClearingDetail cardProgramIdentifier(String cardProgramIdentifier) {
    
    this.cardProgramIdentifier = cardProgramIdentifier;
    return this;
  }

   /**
   * A three-character code that identifies the card program or financial network to which a transaction belongs
   * @return cardProgramIdentifier
  **/
  @javax.annotation.Nullable
  public String getCardProgramIdentifier() {
    return cardProgramIdentifier;
  }


  public void setCardProgramIdentifier(String cardProgramIdentifier) {
    this.cardProgramIdentifier = cardProgramIdentifier;
  }


  public ClearingDetail centralSiteBusinessDate(String centralSiteBusinessDate) {
    
    this.centralSiteBusinessDate = centralSiteBusinessDate;
    return this;
  }

   /**
   * Identifies the official business processing date when the business service reconciles a transaction
   * @return centralSiteBusinessDate
  **/
  @javax.annotation.Nullable
  public String getCentralSiteBusinessDate() {
    return centralSiteBusinessDate;
  }


  public void setCentralSiteBusinessDate(String centralSiteBusinessDate) {
    this.centralSiteBusinessDate = centralSiteBusinessDate;
  }


  public ClearingDetail centralSiteProcessingDateOriginalMessage(String centralSiteProcessingDateOriginalMessage) {
    
    this.centralSiteProcessingDateOriginalMessage = centralSiteProcessingDateOriginalMessage;
    return this;
  }

   /**
   * Central site processing date of original message
   * @return centralSiteProcessingDateOriginalMessage
  **/
  @javax.annotation.Nullable
  public String getCentralSiteProcessingDateOriginalMessage() {
    return centralSiteProcessingDateOriginalMessage;
  }


  public void setCentralSiteProcessingDateOriginalMessage(String centralSiteProcessingDateOriginalMessage) {
    this.centralSiteProcessingDateOriginalMessage = centralSiteProcessingDateOriginalMessage;
  }


  public ClearingDetail currencyCodeCardholderBilling(String currencyCodeCardholderBilling) {
    
    this.currencyCodeCardholderBilling = currencyCodeCardholderBilling;
    return this;
  }

   /**
   * Defines the cardholder billing amount currency
   * @return currencyCodeCardholderBilling
  **/
  @javax.annotation.Nullable
  public String getCurrencyCodeCardholderBilling() {
    return currencyCodeCardholderBilling;
  }


  public void setCurrencyCodeCardholderBilling(String currencyCodeCardholderBilling) {
    this.currencyCodeCardholderBilling = currencyCodeCardholderBilling;
  }


  public ClearingDetail currencyCodeReconciliation(String currencyCodeReconciliation) {
    
    this.currencyCodeReconciliation = currencyCodeReconciliation;
    return this;
  }

   /**
   * Defines the reconciliation amount currency
   * @return currencyCodeReconciliation
  **/
  @javax.annotation.Nullable
  public String getCurrencyCodeReconciliation() {
    return currencyCodeReconciliation;
  }


  public void setCurrencyCodeReconciliation(String currencyCodeReconciliation) {
    this.currencyCodeReconciliation = currencyCodeReconciliation;
  }


  public ClearingDetail currencyCodeTransaction(String currencyCodeTransaction) {
    
    this.currencyCodeTransaction = currencyCodeTransaction;
    return this;
  }

   /**
   * Defines the local transaction amount currency
   * @return currencyCodeTransaction
  **/
  @javax.annotation.Nullable
  public String getCurrencyCodeTransaction() {
    return currencyCodeTransaction;
  }


  public void setCurrencyCodeTransaction(String currencyCodeTransaction) {
    this.currencyCodeTransaction = currencyCodeTransaction;
  }


  public ClearingDetail currencyExponentCardholderBilling(String currencyExponentCardholderBilling) {
    
    this.currencyExponentCardholderBilling = currencyExponentCardholderBilling;
    return this;
  }

   /**
   * Explicitly identifies the implicit decimal point locations associated with cardholder billing amount
   * @return currencyExponentCardholderBilling
  **/
  @javax.annotation.Nullable
  public String getCurrencyExponentCardholderBilling() {
    return currencyExponentCardholderBilling;
  }


  public void setCurrencyExponentCardholderBilling(String currencyExponentCardholderBilling) {
    this.currencyExponentCardholderBilling = currencyExponentCardholderBilling;
  }


  public ClearingDetail currencyExponentReconciliation(String currencyExponentReconciliation) {
    
    this.currencyExponentReconciliation = currencyExponentReconciliation;
    return this;
  }

   /**
   * Explicitly identifies the implicit decimal point locations associated with reconciliation amount
   * @return currencyExponentReconciliation
  **/
  @javax.annotation.Nullable
  public String getCurrencyExponentReconciliation() {
    return currencyExponentReconciliation;
  }


  public void setCurrencyExponentReconciliation(String currencyExponentReconciliation) {
    this.currencyExponentReconciliation = currencyExponentReconciliation;
  }


  public ClearingDetail currencyExponentTransaction(String currencyExponentTransaction) {
    
    this.currencyExponentTransaction = currencyExponentTransaction;
    return this;
  }

   /**
   * Explicitly identifies the implicit decimal point locations associated with transaction amount
   * @return currencyExponentTransaction
  **/
  @javax.annotation.Nullable
  public String getCurrencyExponentTransaction() {
    return currencyExponentTransaction;
  }


  public void setCurrencyExponentTransaction(String currencyExponentTransaction) {
    this.currencyExponentTransaction = currencyExponentTransaction;
  }


  public ClearingDetail dataRecord(String dataRecord) {
    
    this.dataRecord = dataRecord;
    return this;
  }

   /**
   * Contains message text data, file update data, or other information as specified in individual IPM messages
   * @return dataRecord
  **/
  @javax.annotation.Nullable
  public String getDataRecord() {
    return dataRecord;
  }


  public void setDataRecord(String dataRecord) {
    this.dataRecord = dataRecord;
  }


  public ClearingDetail electronicCommerceCardAuth(String electronicCommerceCardAuth) {
    
    this.electronicCommerceCardAuth = electronicCommerceCardAuth;
    return this;
  }

   /**
   * Indicates the type of Cardholder Authentication used in the authorization process
   * @return electronicCommerceCardAuth
  **/
  @javax.annotation.Nullable
  public String getElectronicCommerceCardAuth() {
    return electronicCommerceCardAuth;
  }


  public void setElectronicCommerceCardAuth(String electronicCommerceCardAuth) {
    this.electronicCommerceCardAuth = electronicCommerceCardAuth;
  }


  public ClearingDetail electronicCommerceSecurityLevelIndicator(String electronicCommerceSecurityLevelIndicator) {
    
    this.electronicCommerceSecurityLevelIndicator = electronicCommerceSecurityLevelIndicator;
    return this;
  }

   /**
   * Indicates the presence and type of security protocol present in the authorization process
   * @return electronicCommerceSecurityLevelIndicator
  **/
  @javax.annotation.Nullable
  public String getElectronicCommerceSecurityLevelIndicator() {
    return electronicCommerceSecurityLevelIndicator;
  }


  public void setElectronicCommerceSecurityLevelIndicator(String electronicCommerceSecurityLevelIndicator) {
    this.electronicCommerceSecurityLevelIndicator = electronicCommerceSecurityLevelIndicator;
  }


  public ClearingDetail electronicCommerceUcafCollectionIndicator(String electronicCommerceUcafCollectionIndicator) {
    
    this.electronicCommerceUcafCollectionIndicator = electronicCommerceUcafCollectionIndicator;
    return this;
  }

   /**
   * Identifies the level of UCAF™ supported in the authorization process
   * @return electronicCommerceUcafCollectionIndicator
  **/
  @javax.annotation.Nullable
  public String getElectronicCommerceUcafCollectionIndicator() {
    return electronicCommerceUcafCollectionIndicator;
  }


  public void setElectronicCommerceUcafCollectionIndicator(String electronicCommerceUcafCollectionIndicator) {
    this.electronicCommerceUcafCollectionIndicator = electronicCommerceUcafCollectionIndicator;
  }


  public ClearingDetail forwardingInstitutionIdCode(String forwardingInstitutionIdCode) {
    
    this.forwardingInstitutionIdCode = forwardingInstitutionIdCode;
    return this;
  }

   /**
   * Identifies a message&#39;s forwarding institution
   * @return forwardingInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getForwardingInstitutionIdCode() {
    return forwardingInstitutionIdCode;
  }


  public void setForwardingInstitutionIdCode(String forwardingInstitutionIdCode) {
    this.forwardingInstitutionIdCode = forwardingInstitutionIdCode;
  }


  public ClearingDetail installmentAmount(String installmentAmount) {
    
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Contains total installment amount
   * @return installmentAmount
  **/
  @javax.annotation.Nullable
  public String getInstallmentAmount() {
    return installmentAmount;
  }


  public void setInstallmentAmount(String installmentAmount) {
    this.installmentAmount = installmentAmount;
  }


  public ClearingDetail installmentFee(String installmentFee) {
    
    this.installmentFee = installmentFee;
    return this;
  }

   /**
   * Installment fee contains any fee paid to or by the issuer in an installment transaction. Numeric value where the last 2 are decimal
   * @return installmentFee
  **/
  @javax.annotation.Nullable
  public String getInstallmentFee() {
    return installmentFee;
  }


  public void setInstallmentFee(String installmentFee) {
    this.installmentFee = installmentFee;
  }


  public ClearingDetail installmentNumber(String installmentNumber) {
    
    this.installmentNumber = installmentNumber;
    return this;
  }

   /**
   * Indicates which installment number is being submitted
   * @return installmentNumber
  **/
  @javax.annotation.Nullable
  public String getInstallmentNumber() {
    return installmentNumber;
  }


  public void setInstallmentNumber(String installmentNumber) {
    this.installmentNumber = installmentNumber;
  }


  public ClearingDetail installmentPaymentDataBrazil(String installmentPaymentDataBrazil) {
    
    this.installmentPaymentDataBrazil = installmentPaymentDataBrazil;
    return this;
  }

   /**
   * The field will contain installment payment data for Brazilian intracountry transactions
   * @return installmentPaymentDataBrazil
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataBrazil() {
    return installmentPaymentDataBrazil;
  }


  public void setInstallmentPaymentDataBrazil(String installmentPaymentDataBrazil) {
    this.installmentPaymentDataBrazil = installmentPaymentDataBrazil;
  }


  public ClearingDetail additionalAmountDataCode(String additionalAmountDataCode) {
    
    this.additionalAmountDataCode = additionalAmountDataCode;
    return this;
  }

   /**
   * The field will contain the Additional Amount Data
   * @return additionalAmountDataCode
  **/
  @javax.annotation.Nullable
  public String getAdditionalAmountDataCode() {
    return additionalAmountDataCode;
  }


  public void setAdditionalAmountDataCode(String additionalAmountDataCode) {
    this.additionalAmountDataCode = additionalAmountDataCode;
  }


  public ClearingDetail installmentParameters(InstallmentParameters installmentParameters) {
    
    this.installmentParameters = installmentParameters;
    return this;
  }

   /**
   * Get installmentParameters
   * @return installmentParameters
  **/
  @javax.annotation.Nullable
  public InstallmentParameters getInstallmentParameters() {
    return installmentParameters;
  }


  public void setInstallmentParameters(InstallmentParameters installmentParameters) {
    this.installmentParameters = installmentParameters;
  }


  public ClearingDetail originalInformationInstallments(OriginalInformationInstallments originalInformationInstallments) {
    
    this.originalInformationInstallments = originalInformationInstallments;
    return this;
  }

   /**
   * Get originalInformationInstallments
   * @return originalInformationInstallments
  **/
  @javax.annotation.Nullable
  public OriginalInformationInstallments getOriginalInformationInstallments() {
    return originalInformationInstallments;
  }


  public void setOriginalInformationInstallments(OriginalInformationInstallments originalInformationInstallments) {
    this.originalInformationInstallments = originalInformationInstallments;
  }


  public ClearingDetail installmentPlanType(String installmentPlanType) {
    
    this.installmentPlanType = installmentPlanType;
    return this;
  }

   /**
   * Indicates the specific installment plan types ... 21,22,23
   * @return installmentPlanType
  **/
  @javax.annotation.Nullable
  public String getInstallmentPlanType() {
    return installmentPlanType;
  }


  public void setInstallmentPlanType(String installmentPlanType) {
    this.installmentPlanType = installmentPlanType;
  }


  public ClearingDetail functionCode(String functionCode) {
    
    this.functionCode = functionCode;
    return this;
  }

   /**
   * Indicates a message&#39;s specific purpose
   * @return functionCode
  **/
  @javax.annotation.Nullable
  public String getFunctionCode() {
    return functionCode;
  }


  public void setFunctionCode(String functionCode) {
    this.functionCode = functionCode;
  }


  public ClearingDetail gcmsProductIndentifier(String gcmsProductIndentifier) {
    
    this.gcmsProductIndentifier = gcmsProductIndentifier;
    return this;
  }

   /**
   * Identifies the product recognized by GCMS for the combination of issuer account range and Card Program Identifier
   * @return gcmsProductIndentifier
  **/
  @javax.annotation.Nullable
  public String getGcmsProductIndentifier() {
    return gcmsProductIndentifier;
  }


  public void setGcmsProductIndentifier(String gcmsProductIndentifier) {
    this.gcmsProductIndentifier = gcmsProductIndentifier;
  }


  public ClearingDetail installmentPaymentData(String installmentPaymentData) {
    
    this.installmentPaymentData = installmentPaymentData;
    return this;
  }

   /**
   * Contains the type of financing applicable for the installment
   * @return installmentPaymentData
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentData() {
    return installmentPaymentData;
  }


  public void setInstallmentPaymentData(String installmentPaymentData) {
    this.installmentPaymentData = installmentPaymentData;
  }


  public ClearingDetail installmentPaymentDataAnnualPercentageRate(String installmentPaymentDataAnnualPercentageRate) {
    
    this.installmentPaymentDataAnnualPercentageRate = installmentPaymentDataAnnualPercentageRate;
    return this;
  }

   /**
   * Contains the annual percentage rate (XXX.XX%) an issuer will charge the cardholder for the installment payments. For installmentpayments, the default is all spaces
   * @return installmentPaymentDataAnnualPercentageRate
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataAnnualPercentageRate() {
    return installmentPaymentDataAnnualPercentageRate;
  }


  public void setInstallmentPaymentDataAnnualPercentageRate(String installmentPaymentDataAnnualPercentageRate) {
    this.installmentPaymentDataAnnualPercentageRate = installmentPaymentDataAnnualPercentageRate;
  }


  public ClearingDetail installmentPaymentDataFirstInstallmentAmount(String installmentPaymentDataFirstInstallmentAmount) {
    
    this.installmentPaymentDataFirstInstallmentAmount = installmentPaymentDataFirstInstallmentAmount;
    return this;
  }

   /**
   * Identifies the amount of the first installment payment
   * @return installmentPaymentDataFirstInstallmentAmount
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataFirstInstallmentAmount() {
    return installmentPaymentDataFirstInstallmentAmount;
  }


  public void setInstallmentPaymentDataFirstInstallmentAmount(String installmentPaymentDataFirstInstallmentAmount) {
    this.installmentPaymentDataFirstInstallmentAmount = installmentPaymentDataFirstInstallmentAmount;
  }


  public ClearingDetail installmentPaymentDataInstallmentFee(String installmentPaymentDataInstallmentFee) {
    
    this.installmentPaymentDataInstallmentFee = installmentPaymentDataInstallmentFee;
    return this;
  }

   /**
   * Contains the fee amount an issuer will charge the cardholder for the installment payments in cardholder billing currency. The default is all spaces.
   * @return installmentPaymentDataInstallmentFee
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataInstallmentFee() {
    return installmentPaymentDataInstallmentFee;
  }


  public void setInstallmentPaymentDataInstallmentFee(String installmentPaymentDataInstallmentFee) {
    this.installmentPaymentDataInstallmentFee = installmentPaymentDataInstallmentFee;
  }


  public ClearingDetail installmentPaymentDataInterestRate(String installmentPaymentDataInterestRate) {
    
    this.installmentPaymentDataInterestRate = installmentPaymentDataInterestRate;
    return this;
  }

   /**
   * Identifies the interest rate of intallment payments
   * @return installmentPaymentDataInterestRate
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataInterestRate() {
    return installmentPaymentDataInterestRate;
  }


  public void setInstallmentPaymentDataInterestRate(String installmentPaymentDataInterestRate) {
    this.installmentPaymentDataInterestRate = installmentPaymentDataInterestRate;
  }


  public ClearingDetail installmentPaymentDataNumberInstallments(String installmentPaymentDataNumberInstallments) {
    
    this.installmentPaymentDataNumberInstallments = installmentPaymentDataNumberInstallments;
    return this;
  }

   /**
   * Identifies the number of installment payments
   * @return installmentPaymentDataNumberInstallments
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataNumberInstallments() {
    return installmentPaymentDataNumberInstallments;
  }


  public void setInstallmentPaymentDataNumberInstallments(String installmentPaymentDataNumberInstallments) {
    this.installmentPaymentDataNumberInstallments = installmentPaymentDataNumberInstallments;
  }


  public ClearingDetail installmentPaymentDataSubsequentInstallmentAmount(String installmentPaymentDataSubsequentInstallmentAmount) {
    
    this.installmentPaymentDataSubsequentInstallmentAmount = installmentPaymentDataSubsequentInstallmentAmount;
    return this;
  }

   /**
   * Contains the fee amount an issuer will charge the cardholder for the installment payments in cardholder billing currency. The default is all spaces.
   * @return installmentPaymentDataSubsequentInstallmentAmount
  **/
  @javax.annotation.Nullable
  public String getInstallmentPaymentDataSubsequentInstallmentAmount() {
    return installmentPaymentDataSubsequentInstallmentAmount;
  }


  public void setInstallmentPaymentDataSubsequentInstallmentAmount(String installmentPaymentDataSubsequentInstallmentAmount) {
    this.installmentPaymentDataSubsequentInstallmentAmount = installmentPaymentDataSubsequentInstallmentAmount;
  }


  public ClearingDetail integratedCircuitCardRelatedData(String integratedCircuitCardRelatedData) {
    
    this.integratedCircuitCardRelatedData = integratedCircuitCardRelatedData;
    return this;
  }

   /**
   * Contains data related to ICC systems
   * @return integratedCircuitCardRelatedData
  **/
  @javax.annotation.Nullable
  public String getIntegratedCircuitCardRelatedData() {
    return integratedCircuitCardRelatedData;
  }


  public void setIntegratedCircuitCardRelatedData(String integratedCircuitCardRelatedData) {
    this.integratedCircuitCardRelatedData = integratedCircuitCardRelatedData;
  }


  public ClearingDetail interchangeRateDesignator(String interchangeRateDesignator) {
    
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

   /**
   * Indicates the interchange rate and editing rules applied to the transaction
   * @return interchangeRateDesignator
  **/
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }


  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public ClearingDetail licensedProductIndentifier(String licensedProductIndentifier) {
    
    this.licensedProductIndentifier = licensedProductIndentifier;
    return this;
  }

   /**
   * Identifies the actual product code assigned by Mastercard when licensing the combination of issuer account range and Card Program Identifier
   * @return licensedProductIndentifier
  **/
  @javax.annotation.Nullable
  public String getLicensedProductIndentifier() {
    return licensedProductIndentifier;
  }


  public void setLicensedProductIndentifier(String licensedProductIndentifier) {
    this.licensedProductIndentifier = licensedProductIndentifier;
  }


  public ClearingDetail legalCorporateName(String legalCorporateName) {
    
    this.legalCorporateName = legalCorporateName;
    return this;
  }

   /**
   * Provides the card acceptor&#39;s legal corporation name
   * @return legalCorporateName
  **/
  @javax.annotation.Nullable
  public String getLegalCorporateName() {
    return legalCorporateName;
  }


  public void setLegalCorporateName(String legalCorporateName) {
    this.legalCorporateName = legalCorporateName;
  }


  public ClearingDetail localMessageReasonCode(String localMessageReasonCode) {
    
    this.localMessageReasonCode = localMessageReasonCode;
    return this;
  }

   /**
   * Indicate a particular chargeback domestic reason code(only for Chargebacks)
   * @return localMessageReasonCode
  **/
  @javax.annotation.Nullable
  public String getLocalMessageReasonCode() {
    return localMessageReasonCode;
  }


  public void setLocalMessageReasonCode(String localMessageReasonCode) {
    this.localMessageReasonCode = localMessageReasonCode;
  }


  public ClearingDetail localTax1IVA(String localTax1IVA) {
    
    this.localTax1IVA = localTax1IVA;
    return this;
  }

   /**
   * Contains the VAT amount for the installment fee. Numeric value where the last 2 are decimal.
   * @return localTax1IVA
  **/
  @javax.annotation.Nullable
  public String getLocalTax1IVA() {
    return localTax1IVA;
  }


  public void setLocalTax1IVA(String localTax1IVA) {
    this.localTax1IVA = localTax1IVA;
  }


  public ClearingDetail localTransactionDateTime(String localTransactionDateTime) {
    
    this.localTransactionDateTime = localTransactionDateTime;
    return this;
  }

   /**
   * The local year, month, day, and time at which the transaction takes place at the card acceptor location.The seconds in time will always be set to 00
   * @return localTransactionDateTime
  **/
  @javax.annotation.Nullable
  public String getLocalTransactionDateTime() {
    return localTransactionDateTime;
  }


  public void setLocalTransactionDateTime(String localTransactionDateTime) {
    this.localTransactionDateTime = localTransactionDateTime;
  }


  public ClearingDetail mastercardAssignedId(String mastercardAssignedId) {
    
    this.mastercardAssignedId = mastercardAssignedId;
    return this;
  }

   /**
   * Identifier assigned by Mastercard
   * @return mastercardAssignedId
  **/
  @javax.annotation.Nullable
  public String getMastercardAssignedId() {
    return mastercardAssignedId;
  }


  public void setMastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
  }


  public ClearingDetail mastercardAssignedIdOverrideIndicator(String mastercardAssignedIdOverrideIndicator) {
    
    this.mastercardAssignedIdOverrideIndicator = mastercardAssignedIdOverrideIndicator;
    return this;
  }

   /**
   * Indicates whether override rates were used in the interchange fee amount
   * @return mastercardAssignedIdOverrideIndicator
  **/
  @javax.annotation.Nullable
  public String getMastercardAssignedIdOverrideIndicator() {
    return mastercardAssignedIdOverrideIndicator;
  }


  public void setMastercardAssignedIdOverrideIndicator(String mastercardAssignedIdOverrideIndicator) {
    this.mastercardAssignedIdOverrideIndicator = mastercardAssignedIdOverrideIndicator;
  }


  public ClearingDetail mastercardMappingServiceAccountNumber(String mastercardMappingServiceAccountNumber) {
    
    this.mastercardMappingServiceAccountNumber = mastercardMappingServiceAccountNumber;
    return this;
  }

   /**
   * Provides either the virtual account number/token or the primary account number in a transaction for which Mastercard performed the mapping service
   * @return mastercardMappingServiceAccountNumber
  **/
  @javax.annotation.Nullable
  public String getMastercardMappingServiceAccountNumber() {
    return mastercardMappingServiceAccountNumber;
  }


  public void setMastercardMappingServiceAccountNumber(String mastercardMappingServiceAccountNumber) {
    this.mastercardMappingServiceAccountNumber = mastercardMappingServiceAccountNumber;
  }


  public ClearingDetail masterPassIncentiveIndicator(String masterPassIncentiveIndicator) {
    
    this.masterPassIncentiveIndicator = masterPassIncentiveIndicator;
    return this;
  }

   /**
   * Populated by GCMS and identifies the transaction as having received the Masterpass-Enabled Merchant Incentive
   * @return masterPassIncentiveIndicator
  **/
  @javax.annotation.Nullable
  public String getMasterPassIncentiveIndicator() {
    return masterPassIncentiveIndicator;
  }


  public void setMasterPassIncentiveIndicator(String masterPassIncentiveIndicator) {
    this.masterPassIncentiveIndicator = masterPassIncentiveIndicator;
  }


  public ClearingDetail messageReasonCode(String messageReasonCode) {
    
    this.messageReasonCode = messageReasonCode;
    return this;
  }

   /**
   * Contains the initial transaction&#39;s Message Reason Code
   * @return messageReasonCode
  **/
  @javax.annotation.Nullable
  public String getMessageReasonCode() {
    return messageReasonCode;
  }


  public void setMessageReasonCode(String messageReasonCode) {
    this.messageReasonCode = messageReasonCode;
  }


  public ClearingDetail messageReversalIndicator(String messageReversalIndicator) {
    
    this.messageReversalIndicator = messageReversalIndicator;
    return this;
  }

   /**
   * Identifies a message as a reversal of a previous message
   * @return messageReversalIndicator
  **/
  @javax.annotation.Nullable
  public String getMessageReversalIndicator() {
    return messageReversalIndicator;
  }


  public void setMessageReversalIndicator(String messageReversalIndicator) {
    this.messageReversalIndicator = messageReversalIndicator;
  }


  public ClearingDetail numberOfInstallments(String numberOfInstallments) {
    
    this.numberOfInstallments = numberOfInstallments;
    return this;
  }

   /**
   * Total number of installments to be submitted
   * @return numberOfInstallments
  **/
  @javax.annotation.Nullable
  public String getNumberOfInstallments() {
    return numberOfInstallments;
  }


  public void setNumberOfInstallments(String numberOfInstallments) {
    this.numberOfInstallments = numberOfInstallments;
  }


  public ClearingDetail originatingMessageFormat(String originatingMessageFormat) {
    
    this.originatingMessageFormat = originatingMessageFormat;
    return this;
  }

   /**
   * Provides the message format in which the clearing system received a message
   * @return originatingMessageFormat
  **/
  @javax.annotation.Nullable
  public String getOriginatingMessageFormat() {
    return originatingMessageFormat;
  }


  public void setOriginatingMessageFormat(String originatingMessageFormat) {
    this.originatingMessageFormat = originatingMessageFormat;
  }


  public ClearingDetail partnerIdCode(String partnerIdCode) {
    
    this.partnerIdCode = partnerIdCode;
    return this;
  }

   /**
   * Identifies a specific partnership agreement, generally between specific card acceptors and issuers.
   * @return partnerIdCode
  **/
  @javax.annotation.Nullable
  public String getPartnerIdCode() {
    return partnerIdCode;
  }


  public void setPartnerIdCode(String partnerIdCode) {
    this.partnerIdCode = partnerIdCode;
  }


  public ClearingDetail pinCaptureCapability(String pinCaptureCapability) {
    
    this.pinCaptureCapability = pinCaptureCapability;
    return this;
  }

   /**
   * Indicates the maximum number of PIN characters that the POS terminal can capture
   * @return pinCaptureCapability
  **/
  @javax.annotation.Nullable
  public String getPinCaptureCapability() {
    return pinCaptureCapability;
  }


  public void setPinCaptureCapability(String pinCaptureCapability) {
    this.pinCaptureCapability = pinCaptureCapability;
  }


  public ClearingDetail primaryAccountNumber(String primaryAccountNumber) {
    
    this.primaryAccountNumber = primaryAccountNumber;
    return this;
  }

   /**
   * Account number associated with transaction in question 
   * @return primaryAccountNumber
  **/
  @javax.annotation.Nullable
  public String getPrimaryAccountNumber() {
    return primaryAccountNumber;
  }


  public void setPrimaryAccountNumber(String primaryAccountNumber) {
    this.primaryAccountNumber = primaryAccountNumber;
  }


  public ClearingDetail processingCode(String processingCode) {
    
    this.processingCode = processingCode;
    return this;
  }

   /**
   * Identifies the entity to be debited and the entity to be credited for the fee amount
   * @return processingCode
  **/
  @javax.annotation.Nullable
  public String getProcessingCode() {
    return processingCode;
  }


  public void setProcessingCode(String processingCode) {
    this.processingCode = processingCode;
  }


  public ClearingDetail productOverrideIndicator(String productOverrideIndicator) {
    
    this.productOverrideIndicator = productOverrideIndicator;
    return this;
  }

   /**
   * Product Class value to indicate whether product class override interchange rates were used in the interchange fee amount
   * @return productOverrideIndicator
  **/
  @javax.annotation.Nullable
  public String getProductOverrideIndicator() {
    return productOverrideIndicator;
  }


  public void setProductOverrideIndicator(String productOverrideIndicator) {
    this.productOverrideIndicator = productOverrideIndicator;
  }


  public ClearingDetail programRegistrationId(String programRegistrationId) {
    
    this.programRegistrationId = programRegistrationId;
    return this;
  }

   /**
   * Monitors and tracks a participant&#39;s activity in special promotion programs (primarily U.S.-defined).
   * @return programRegistrationId
  **/
  @javax.annotation.Nullable
  public String getProgramRegistrationId() {
    return programRegistrationId;
  }


  public void setProgramRegistrationId(String programRegistrationId) {
    this.programRegistrationId = programRegistrationId;
  }


  public ClearingDetail qpsPaypassEligibilityIndicator(String qpsPaypassEligibilityIndicator) {
    
    this.qpsPaypassEligibilityIndicator = qpsPaypassEligibilityIndicator;
    return this;
  }

   /**
   * Indicates whether or not the Quick Payment Service (QPS) or PayPass transaction qualifies for chargeback protection
   * @return qpsPaypassEligibilityIndicator
  **/
  @javax.annotation.Nullable
  public String getQpsPaypassEligibilityIndicator() {
    return qpsPaypassEligibilityIndicator;
  }


  public void setQpsPaypassEligibilityIndicator(String qpsPaypassEligibilityIndicator) {
    this.qpsPaypassEligibilityIndicator = qpsPaypassEligibilityIndicator;
  }


  public ClearingDetail rateIndicator(String rateIndicator) {
    
    this.rateIndicator = rateIndicator;
    return this;
  }

   /**
   * Indicates the rate applied by GCMS to the transaction
   * @return rateIndicator
  **/
  @javax.annotation.Nullable
  public String getRateIndicator() {
    return rateIndicator;
  }


  public void setRateIndicator(String rateIndicator) {
    this.rateIndicator = rateIndicator;
  }


  public ClearingDetail receivingInstitutionIdCode(String receivingInstitutionIdCode) {
    
    this.receivingInstitutionIdCode = receivingInstitutionIdCode;
    return this;
  }

   /**
   * Identifies the receiving institution
   * @return receivingInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getReceivingInstitutionIdCode() {
    return receivingInstitutionIdCode;
  }


  public void setReceivingInstitutionIdCode(String receivingInstitutionIdCode) {
    this.receivingInstitutionIdCode = receivingInstitutionIdCode;
  }


  public ClearingDetail reconciliationAmount(String reconciliationAmount) {
    
    this.reconciliationAmount = reconciliationAmount;
    return this;
  }

   /**
   * The transaction amount value converted to the customer&#39;s reconciliation (that is, the customer&#39;s payment or settlement) currency
   * @return reconciliationAmount
  **/
  @javax.annotation.Nullable
  public String getReconciliationAmount() {
    return reconciliationAmount;
  }


  public void setReconciliationAmount(String reconciliationAmount) {
    this.reconciliationAmount = reconciliationAmount;
  }


  public ClearingDetail reconciliationCurrencyCode(String reconciliationCurrencyCode) {
    
    this.reconciliationCurrencyCode = reconciliationCurrencyCode;
    return this;
  }

   /**
   * Identifies the currency code of the reconciliation amount
   * @return reconciliationCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getReconciliationCurrencyCode() {
    return reconciliationCurrencyCode;
  }


  public void setReconciliationCurrencyCode(String reconciliationCurrencyCode) {
    this.reconciliationCurrencyCode = reconciliationCurrencyCode;
  }


  public ClearingDetail remotePaymentsProgramData(String remotePaymentsProgramData) {
    
    this.remotePaymentsProgramData = remotePaymentsProgramData;
    return this;
  }

   /**
   * Identifies the domain in which the Service Manager (program originator) of the Mobile Remote Payments Program is operating
   * @return remotePaymentsProgramData
  **/
  @javax.annotation.Nullable
  public String getRemotePaymentsProgramData() {
    return remotePaymentsProgramData;
  }


  public void setRemotePaymentsProgramData(String remotePaymentsProgramData) {
    this.remotePaymentsProgramData = remotePaymentsProgramData;
  }


  public ClearingDetail serviceCode(String serviceCode) {
    
    this.serviceCode = serviceCode;
    return this;
  }

   /**
   * Provides codes that increase issuers&#39; flexibility in defining card acceptance parameters.
   * @return serviceCode
  **/
  @javax.annotation.Nullable
  public String getServiceCode() {
    return serviceCode;
  }


  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }


  public ClearingDetail settlementData(String settlementData) {
    
    this.settlementData = settlementData;
    return this;
  }

   /**
   * Provides reconciliation and settlement information for each clearing system transaction that has settlement impact
   * @return settlementData
  **/
  @javax.annotation.Nullable
  public String getSettlementData() {
    return settlementData;
  }


  public void setSettlementData(String settlementData) {
    this.settlementData = settlementData;
  }


  public ClearingDetail settlementIndicator(String settlementIndicator) {
    
    this.settlementIndicator = settlementIndicator;
    return this;
  }

   /**
   * Indicates the settlement impact of amounts in an IPM message
   * @return settlementIndicator
  **/
  @javax.annotation.Nullable
  public String getSettlementIndicator() {
    return settlementIndicator;
  }


  public void setSettlementIndicator(String settlementIndicator) {
    this.settlementIndicator = settlementIndicator;
  }


  public ClearingDetail specialConditionsIndicator(String specialConditionsIndicator) {
    
    this.specialConditionsIndicator = specialConditionsIndicator;
    return this;
  }

   /**
   * Indicates whether an adjustment was included in the Fee amount
   * @return specialConditionsIndicator
  **/
  @javax.annotation.Nullable
  public String getSpecialConditionsIndicator() {
    return specialConditionsIndicator;
  }


  public void setSpecialConditionsIndicator(String specialConditionsIndicator) {
    this.specialConditionsIndicator = specialConditionsIndicator;
  }


  public ClearingDetail terminalDataOutputCapability(String terminalDataOutputCapability) {
    
    this.terminalDataOutputCapability = terminalDataOutputCapability;
    return this;
  }

   /**
   * Indicates the print and display capabilities of the terminal
   * @return terminalDataOutputCapability
  **/
  @javax.annotation.Nullable
  public String getTerminalDataOutputCapability() {
    return terminalDataOutputCapability;
  }


  public void setTerminalDataOutputCapability(String terminalDataOutputCapability) {
    this.terminalDataOutputCapability = terminalDataOutputCapability;
  }


  public ClearingDetail terminalOperatingEnvironment(String terminalOperatingEnvironment) {
    
    this.terminalOperatingEnvironment = terminalOperatingEnvironment;
    return this;
  }

   /**
   * Indicates whether the card acceptor is attending the terminal and the location of the terminal
   * @return terminalOperatingEnvironment
  **/
  @javax.annotation.Nullable
  public String getTerminalOperatingEnvironment() {
    return terminalOperatingEnvironment;
  }


  public void setTerminalOperatingEnvironment(String terminalOperatingEnvironment) {
    this.terminalOperatingEnvironment = terminalOperatingEnvironment;
  }


  public ClearingDetail terminalType(String terminalType) {
    
    this.terminalType = terminalType;
    return this;
  }

   /**
   * Identifies the type of terminal used at the point of interaction
   * @return terminalType
  **/
  @javax.annotation.Nullable
  public String getTerminalType() {
    return terminalType;
  }


  public void setTerminalType(String terminalType) {
    this.terminalType = terminalType;
  }


  public ClearingDetail tokenRequestorId(String tokenRequestorId) {
    
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * Contains the ID assigned by the token service provider to the token requestor
   * @return tokenRequestorId
  **/
  @javax.annotation.Nullable
  public String getTokenRequestorId() {
    return tokenRequestorId;
  }


  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }


  public ClearingDetail totalTransactionAmount(String totalTransactionAmount) {
    
    this.totalTransactionAmount = totalTransactionAmount;
    return this;
  }

   /**
   * Contains total transaction amount
   * @return totalTransactionAmount
  **/
  @javax.annotation.Nullable
  public String getTotalTransactionAmount() {
    return totalTransactionAmount;
  }


  public void setTotalTransactionAmount(String totalTransactionAmount) {
    this.totalTransactionAmount = totalTransactionAmount;
  }


  public ClearingDetail transactionAmountLocal(String transactionAmountLocal) {
    
    this.transactionAmountLocal = transactionAmountLocal;
    return this;
  }

   /**
   * Transaction amount in local currency
   * @return transactionAmountLocal
  **/
  @javax.annotation.Nullable
  public String getTransactionAmountLocal() {
    return transactionAmountLocal;
  }


  public void setTransactionAmountLocal(String transactionAmountLocal) {
    this.transactionAmountLocal = transactionAmountLocal;
  }


  public ClearingDetail transactionCategoryIndicator(String transactionCategoryIndicator) {
    
    this.transactionCategoryIndicator = transactionCategoryIndicator;
    return this;
  }

   /**
   * Provides information about the transaction that cannot be determined from other transaction information, such as Primary Account Number or Point of Service Data Code
   * @return transactionCategoryIndicator
  **/
  @javax.annotation.Nullable
  public String getTransactionCategoryIndicator() {
    return transactionCategoryIndicator;
  }


  public void setTransactionCategoryIndicator(String transactionCategoryIndicator) {
    this.transactionCategoryIndicator = transactionCategoryIndicator;
  }


  public ClearingDetail transactionCurrencyCode(String transactionCurrencyCode) {
    
    this.transactionCurrencyCode = transactionCurrencyCode;
    return this;
  }

   /**
   * Defines the currency code of the transaction
   * @return transactionCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getTransactionCurrencyCode() {
    return transactionCurrencyCode;
  }


  public void setTransactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
  }


  public ClearingDetail transactionDestinationInstitutionIdCode(String transactionDestinationInstitutionIdCode) {
    
    this.transactionDestinationInstitutionIdCode = transactionDestinationInstitutionIdCode;
    return this;
  }

   /**
   * Identifies the transaction destination institution
   * @return transactionDestinationInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getTransactionDestinationInstitutionIdCode() {
    return transactionDestinationInstitutionIdCode;
  }


  public void setTransactionDestinationInstitutionIdCode(String transactionDestinationInstitutionIdCode) {
    this.transactionDestinationInstitutionIdCode = transactionDestinationInstitutionIdCode;
  }


  public ClearingDetail transactionLifeCycleId(String transactionLifeCycleId) {
    
    this.transactionLifeCycleId = transactionLifeCycleId;
    return this;
  }

   /**
   * Contains all life cycle messages such as Authorizations, Financials, Reversals, Retrievals, Fulfillments and Chargebacks
   * @return transactionLifeCycleId
  **/
  @javax.annotation.Nullable
  public String getTransactionLifeCycleId() {
    return transactionLifeCycleId;
  }


  public void setTransactionLifeCycleId(String transactionLifeCycleId) {
    this.transactionLifeCycleId = transactionLifeCycleId;
  }


  public ClearingDetail transactionOriginatorInstitutionIdCode(String transactionOriginatorInstitutionIdCode) {
    
    this.transactionOriginatorInstitutionIdCode = transactionOriginatorInstitutionIdCode;
    return this;
  }

   /**
   * Identifies the transaction originator institution
   * @return transactionOriginatorInstitutionIdCode
  **/
  @javax.annotation.Nullable
  public String getTransactionOriginatorInstitutionIdCode() {
    return transactionOriginatorInstitutionIdCode;
  }


  public void setTransactionOriginatorInstitutionIdCode(String transactionOriginatorInstitutionIdCode) {
    this.transactionOriginatorInstitutionIdCode = transactionOriginatorInstitutionIdCode;
  }


  public ClearingDetail transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Describes the specific cardholder transaction type
   * @return transactionType
  **/
  @javax.annotation.Nullable
  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  public ClearingDetail transitProgramCode(String transitProgramCode) {
    
    this.transitProgramCode = transitProgramCode;
    return this;
  }

   /**
   * Provides data related to the transit transaction type and the transaction mode
   * @return transitProgramCode
  **/
  @javax.annotation.Nullable
  public String getTransitProgramCode() {
    return transitProgramCode;
  }


  public void setTransitProgramCode(String transitProgramCode) {
    this.transitProgramCode = transitProgramCode;
  }


  public ClearingDetail walletIdentifierMdes(String walletIdentifierMdes) {
    
    this.walletIdentifierMdes = walletIdentifierMdes;
    return this;
  }

   /**
   * Provides information about transactions initiated through the use of a digital wallet
   * @return walletIdentifierMdes
  **/
  @javax.annotation.Nullable
  public String getWalletIdentifierMdes() {
    return walletIdentifierMdes;
  }


  public void setWalletIdentifierMdes(String walletIdentifierMdes) {
    this.walletIdentifierMdes = walletIdentifierMdes;
  }


  public ClearingDetail currencyConversionAssessmentAmount(String currencyConversionAssessmentAmount) {
    
    this.currencyConversionAssessmentAmount = currencyConversionAssessmentAmount;
    return this;
  }

   /**
   * DE 111 (Amount, Currency Conversion Assessment) is the amount based on the result of applying the multi-currency conversion rate (Currency Conversion Assessment) adjustment to the currency conversion rate used to convert DE 4 (Amount, Transaction) to DE 6 (Amount, Cardholder Billing) for qualified transactions
   * @return currencyConversionAssessmentAmount
  **/
  @javax.annotation.Nullable
  public String getCurrencyConversionAssessmentAmount() {
    return currencyConversionAssessmentAmount;
  }


  public void setCurrencyConversionAssessmentAmount(String currencyConversionAssessmentAmount) {
    this.currencyConversionAssessmentAmount = currencyConversionAssessmentAmount;
  }


  public ClearingDetail japanCommonMerchantCode(String japanCommonMerchantCode) {
    
    this.japanCommonMerchantCode = japanCommonMerchantCode;
    return this;
  }

   /**
   * Identifies the merchant&#39;s category in Japan referred to as the Common Merchant Category Code (CMC). Mastercard uses this value to identify a link to a corresponding Mastercard Assigned ID.
   * @return japanCommonMerchantCode
  **/
  @javax.annotation.Nullable
  public String getJapanCommonMerchantCode() {
    return japanCommonMerchantCode;
  }


  public void setJapanCommonMerchantCode(String japanCommonMerchantCode) {
    this.japanCommonMerchantCode = japanCommonMerchantCode;
  }


  public ClearingDetail installmentData(String installmentData) {
    
    this.installmentData = installmentData;
    return this;
  }

   /**
   * Provides information about the installment payment option selected by the cardholder at the point of interaction.
   * @return installmentData
  **/
  @javax.annotation.Nullable
  public String getInstallmentData() {
    return installmentData;
  }


  public void setInstallmentData(String installmentData) {
    this.installmentData = installmentData;
  }


  public ClearingDetail flexCode(String flexCode) {
    
    this.flexCode = flexCode;
    return this;
  }

   /**
   * Specific to Brazil Flex Card transactions to communicate the product code used for clearing.
   * @return flexCode
  **/
  @javax.annotation.Nullable
  public String getFlexCode() {
    return flexCode;
  }


  public void setFlexCode(String flexCode) {
    this.flexCode = flexCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClearingDetail clearingDetail = (ClearingDetail) o;
    return Objects.equals(this.accountLevelManagementAccountCategoryCode, clearingDetail.accountLevelManagementAccountCategoryCode) &&
        Objects.equals(this.acquirerReferenceData, clearingDetail.acquirerReferenceData) &&
        Objects.equals(this.acquiringInstitutionIdCode, clearingDetail.acquiringInstitutionIdCode) &&
        Objects.equals(this.approvalCode, clearingDetail.approvalCode) &&
        Objects.equals(this.businessCycle, clearingDetail.businessCycle) &&
        Objects.equals(this.businessServiceArrangementTypeCode, clearingDetail.businessServiceArrangementTypeCode) &&
        Objects.equals(this.businessServiceIdCode, clearingDetail.businessServiceIdCode) &&
        Objects.equals(this.cardAcceptorBusinessCode, clearingDetail.cardAcceptorBusinessCode) &&
        Objects.equals(this.cardAcceptorCity, clearingDetail.cardAcceptorCity) &&
        Objects.equals(this.cardAcceptorClassificationOverrideIndicator, clearingDetail.cardAcceptorClassificationOverrideIndicator) &&
        Objects.equals(this.cardAcceptorCountry, clearingDetail.cardAcceptorCountry) &&
        Objects.equals(this.cardAcceptorIdCode, clearingDetail.cardAcceptorIdCode) &&
        Objects.equals(this.cardAcceptorName, clearingDetail.cardAcceptorName) &&
        Objects.equals(this.cardAcceptorPostalCode, clearingDetail.cardAcceptorPostalCode) &&
        Objects.equals(this.cardAcceptorState, clearingDetail.cardAcceptorState) &&
        Objects.equals(this.cardAcceptorStreetAddress, clearingDetail.cardAcceptorStreetAddress) &&
        Objects.equals(this.cardAcceptorTerminalId, clearingDetail.cardAcceptorTerminalId) &&
        Objects.equals(this.cardAcceptorUrl, clearingDetail.cardAcceptorUrl) &&
        Objects.equals(this.cardCaptureCapability, clearingDetail.cardCaptureCapability) &&
        Objects.equals(this.cardDataInputCapability, clearingDetail.cardDataInputCapability) &&
        Objects.equals(this.cardDataInputMode, clearingDetail.cardDataInputMode) &&
        Objects.equals(this.cardDataOutputCapability, clearingDetail.cardDataOutputCapability) &&
        Objects.equals(this.cardholderAuthenticationCapability, clearingDetail.cardholderAuthenticationCapability) &&
        Objects.equals(this.cardholderAuthenticationEntity, clearingDetail.cardholderAuthenticationEntity) &&
        Objects.equals(this.cardholderAuthenticationMethod, clearingDetail.cardholderAuthenticationMethod) &&
        Objects.equals(this.cardholderBillingAmount, clearingDetail.cardholderBillingAmount) &&
        Objects.equals(this.cardholderBillingCurrencyCode, clearingDetail.cardholderBillingCurrencyCode) &&
        Objects.equals(this.cardholderFromAccountCode, clearingDetail.cardholderFromAccountCode) &&
        Objects.equals(this.cardholderPresentData, clearingDetail.cardholderPresentData) &&
        Objects.equals(this.cardholderToAccountCode, clearingDetail.cardholderToAccountCode) &&
        Objects.equals(this.cardIssuerReferenceData, clearingDetail.cardIssuerReferenceData) &&
        Objects.equals(this.cardPresentData, clearingDetail.cardPresentData) &&
        Objects.equals(this.cardProgramIdentifier, clearingDetail.cardProgramIdentifier) &&
        Objects.equals(this.centralSiteBusinessDate, clearingDetail.centralSiteBusinessDate) &&
        Objects.equals(this.centralSiteProcessingDateOriginalMessage, clearingDetail.centralSiteProcessingDateOriginalMessage) &&
        Objects.equals(this.currencyCodeCardholderBilling, clearingDetail.currencyCodeCardholderBilling) &&
        Objects.equals(this.currencyCodeReconciliation, clearingDetail.currencyCodeReconciliation) &&
        Objects.equals(this.currencyCodeTransaction, clearingDetail.currencyCodeTransaction) &&
        Objects.equals(this.currencyExponentCardholderBilling, clearingDetail.currencyExponentCardholderBilling) &&
        Objects.equals(this.currencyExponentReconciliation, clearingDetail.currencyExponentReconciliation) &&
        Objects.equals(this.currencyExponentTransaction, clearingDetail.currencyExponentTransaction) &&
        Objects.equals(this.dataRecord, clearingDetail.dataRecord) &&
        Objects.equals(this.electronicCommerceCardAuth, clearingDetail.electronicCommerceCardAuth) &&
        Objects.equals(this.electronicCommerceSecurityLevelIndicator, clearingDetail.electronicCommerceSecurityLevelIndicator) &&
        Objects.equals(this.electronicCommerceUcafCollectionIndicator, clearingDetail.electronicCommerceUcafCollectionIndicator) &&
        Objects.equals(this.forwardingInstitutionIdCode, clearingDetail.forwardingInstitutionIdCode) &&
        Objects.equals(this.installmentAmount, clearingDetail.installmentAmount) &&
        Objects.equals(this.installmentFee, clearingDetail.installmentFee) &&
        Objects.equals(this.installmentNumber, clearingDetail.installmentNumber) &&
        Objects.equals(this.installmentPaymentDataBrazil, clearingDetail.installmentPaymentDataBrazil) &&
        Objects.equals(this.additionalAmountDataCode, clearingDetail.additionalAmountDataCode) &&
        Objects.equals(this.installmentParameters, clearingDetail.installmentParameters) &&
        Objects.equals(this.originalInformationInstallments, clearingDetail.originalInformationInstallments) &&
        Objects.equals(this.installmentPlanType, clearingDetail.installmentPlanType) &&
        Objects.equals(this.functionCode, clearingDetail.functionCode) &&
        Objects.equals(this.gcmsProductIndentifier, clearingDetail.gcmsProductIndentifier) &&
        Objects.equals(this.installmentPaymentData, clearingDetail.installmentPaymentData) &&
        Objects.equals(this.installmentPaymentDataAnnualPercentageRate, clearingDetail.installmentPaymentDataAnnualPercentageRate) &&
        Objects.equals(this.installmentPaymentDataFirstInstallmentAmount, clearingDetail.installmentPaymentDataFirstInstallmentAmount) &&
        Objects.equals(this.installmentPaymentDataInstallmentFee, clearingDetail.installmentPaymentDataInstallmentFee) &&
        Objects.equals(this.installmentPaymentDataInterestRate, clearingDetail.installmentPaymentDataInterestRate) &&
        Objects.equals(this.installmentPaymentDataNumberInstallments, clearingDetail.installmentPaymentDataNumberInstallments) &&
        Objects.equals(this.installmentPaymentDataSubsequentInstallmentAmount, clearingDetail.installmentPaymentDataSubsequentInstallmentAmount) &&
        Objects.equals(this.integratedCircuitCardRelatedData, clearingDetail.integratedCircuitCardRelatedData) &&
        Objects.equals(this.interchangeRateDesignator, clearingDetail.interchangeRateDesignator) &&
        Objects.equals(this.licensedProductIndentifier, clearingDetail.licensedProductIndentifier) &&
        Objects.equals(this.legalCorporateName, clearingDetail.legalCorporateName) &&
        Objects.equals(this.localMessageReasonCode, clearingDetail.localMessageReasonCode) &&
        Objects.equals(this.localTax1IVA, clearingDetail.localTax1IVA) &&
        Objects.equals(this.localTransactionDateTime, clearingDetail.localTransactionDateTime) &&
        Objects.equals(this.mastercardAssignedId, clearingDetail.mastercardAssignedId) &&
        Objects.equals(this.mastercardAssignedIdOverrideIndicator, clearingDetail.mastercardAssignedIdOverrideIndicator) &&
        Objects.equals(this.mastercardMappingServiceAccountNumber, clearingDetail.mastercardMappingServiceAccountNumber) &&
        Objects.equals(this.masterPassIncentiveIndicator, clearingDetail.masterPassIncentiveIndicator) &&
        Objects.equals(this.messageReasonCode, clearingDetail.messageReasonCode) &&
        Objects.equals(this.messageReversalIndicator, clearingDetail.messageReversalIndicator) &&
        Objects.equals(this.numberOfInstallments, clearingDetail.numberOfInstallments) &&
        Objects.equals(this.originatingMessageFormat, clearingDetail.originatingMessageFormat) &&
        Objects.equals(this.partnerIdCode, clearingDetail.partnerIdCode) &&
        Objects.equals(this.pinCaptureCapability, clearingDetail.pinCaptureCapability) &&
        Objects.equals(this.primaryAccountNumber, clearingDetail.primaryAccountNumber) &&
        Objects.equals(this.processingCode, clearingDetail.processingCode) &&
        Objects.equals(this.productOverrideIndicator, clearingDetail.productOverrideIndicator) &&
        Objects.equals(this.programRegistrationId, clearingDetail.programRegistrationId) &&
        Objects.equals(this.qpsPaypassEligibilityIndicator, clearingDetail.qpsPaypassEligibilityIndicator) &&
        Objects.equals(this.rateIndicator, clearingDetail.rateIndicator) &&
        Objects.equals(this.receivingInstitutionIdCode, clearingDetail.receivingInstitutionIdCode) &&
        Objects.equals(this.reconciliationAmount, clearingDetail.reconciliationAmount) &&
        Objects.equals(this.reconciliationCurrencyCode, clearingDetail.reconciliationCurrencyCode) &&
        Objects.equals(this.remotePaymentsProgramData, clearingDetail.remotePaymentsProgramData) &&
        Objects.equals(this.serviceCode, clearingDetail.serviceCode) &&
        Objects.equals(this.settlementData, clearingDetail.settlementData) &&
        Objects.equals(this.settlementIndicator, clearingDetail.settlementIndicator) &&
        Objects.equals(this.specialConditionsIndicator, clearingDetail.specialConditionsIndicator) &&
        Objects.equals(this.terminalDataOutputCapability, clearingDetail.terminalDataOutputCapability) &&
        Objects.equals(this.terminalOperatingEnvironment, clearingDetail.terminalOperatingEnvironment) &&
        Objects.equals(this.terminalType, clearingDetail.terminalType) &&
        Objects.equals(this.tokenRequestorId, clearingDetail.tokenRequestorId) &&
        Objects.equals(this.totalTransactionAmount, clearingDetail.totalTransactionAmount) &&
        Objects.equals(this.transactionAmountLocal, clearingDetail.transactionAmountLocal) &&
        Objects.equals(this.transactionCategoryIndicator, clearingDetail.transactionCategoryIndicator) &&
        Objects.equals(this.transactionCurrencyCode, clearingDetail.transactionCurrencyCode) &&
        Objects.equals(this.transactionDestinationInstitutionIdCode, clearingDetail.transactionDestinationInstitutionIdCode) &&
        Objects.equals(this.transactionLifeCycleId, clearingDetail.transactionLifeCycleId) &&
        Objects.equals(this.transactionOriginatorInstitutionIdCode, clearingDetail.transactionOriginatorInstitutionIdCode) &&
        Objects.equals(this.transactionType, clearingDetail.transactionType) &&
        Objects.equals(this.transitProgramCode, clearingDetail.transitProgramCode) &&
        Objects.equals(this.walletIdentifierMdes, clearingDetail.walletIdentifierMdes) &&
        Objects.equals(this.currencyConversionAssessmentAmount, clearingDetail.currencyConversionAssessmentAmount) &&
        Objects.equals(this.japanCommonMerchantCode, clearingDetail.japanCommonMerchantCode) &&
        Objects.equals(this.installmentData, clearingDetail.installmentData) &&
        Objects.equals(this.flexCode, clearingDetail.flexCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountLevelManagementAccountCategoryCode, acquirerReferenceData, acquiringInstitutionIdCode, approvalCode, businessCycle, businessServiceArrangementTypeCode, businessServiceIdCode, cardAcceptorBusinessCode, cardAcceptorCity, cardAcceptorClassificationOverrideIndicator, cardAcceptorCountry, cardAcceptorIdCode, cardAcceptorName, cardAcceptorPostalCode, cardAcceptorState, cardAcceptorStreetAddress, cardAcceptorTerminalId, cardAcceptorUrl, cardCaptureCapability, cardDataInputCapability, cardDataInputMode, cardDataOutputCapability, cardholderAuthenticationCapability, cardholderAuthenticationEntity, cardholderAuthenticationMethod, cardholderBillingAmount, cardholderBillingCurrencyCode, cardholderFromAccountCode, cardholderPresentData, cardholderToAccountCode, cardIssuerReferenceData, cardPresentData, cardProgramIdentifier, centralSiteBusinessDate, centralSiteProcessingDateOriginalMessage, currencyCodeCardholderBilling, currencyCodeReconciliation, currencyCodeTransaction, currencyExponentCardholderBilling, currencyExponentReconciliation, currencyExponentTransaction, dataRecord, electronicCommerceCardAuth, electronicCommerceSecurityLevelIndicator, electronicCommerceUcafCollectionIndicator, forwardingInstitutionIdCode, installmentAmount, installmentFee, installmentNumber, installmentPaymentDataBrazil, additionalAmountDataCode, installmentParameters, originalInformationInstallments, installmentPlanType, functionCode, gcmsProductIndentifier, installmentPaymentData, installmentPaymentDataAnnualPercentageRate, installmentPaymentDataFirstInstallmentAmount, installmentPaymentDataInstallmentFee, installmentPaymentDataInterestRate, installmentPaymentDataNumberInstallments, installmentPaymentDataSubsequentInstallmentAmount, integratedCircuitCardRelatedData, interchangeRateDesignator, licensedProductIndentifier, legalCorporateName, localMessageReasonCode, localTax1IVA, localTransactionDateTime, mastercardAssignedId, mastercardAssignedIdOverrideIndicator, mastercardMappingServiceAccountNumber, masterPassIncentiveIndicator, messageReasonCode, messageReversalIndicator, numberOfInstallments, originatingMessageFormat, partnerIdCode, pinCaptureCapability, primaryAccountNumber, processingCode, productOverrideIndicator, programRegistrationId, qpsPaypassEligibilityIndicator, rateIndicator, receivingInstitutionIdCode, reconciliationAmount, reconciliationCurrencyCode, remotePaymentsProgramData, serviceCode, settlementData, settlementIndicator, specialConditionsIndicator, terminalDataOutputCapability, terminalOperatingEnvironment, terminalType, tokenRequestorId, totalTransactionAmount, transactionAmountLocal, transactionCategoryIndicator, transactionCurrencyCode, transactionDestinationInstitutionIdCode, transactionLifeCycleId, transactionOriginatorInstitutionIdCode, transactionType, transitProgramCode, walletIdentifierMdes, currencyConversionAssessmentAmount, japanCommonMerchantCode, installmentData, flexCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearingDetail {\n");
    sb.append("    accountLevelManagementAccountCategoryCode: ").append(toIndentedString(accountLevelManagementAccountCategoryCode)).append("\n");
    sb.append("    acquirerReferenceData: ").append(toIndentedString(acquirerReferenceData)).append("\n");
    sb.append("    acquiringInstitutionIdCode: ").append(toIndentedString(acquiringInstitutionIdCode)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    businessCycle: ").append(toIndentedString(businessCycle)).append("\n");
    sb.append("    businessServiceArrangementTypeCode: ").append(toIndentedString(businessServiceArrangementTypeCode)).append("\n");
    sb.append("    businessServiceIdCode: ").append(toIndentedString(businessServiceIdCode)).append("\n");
    sb.append("    cardAcceptorBusinessCode: ").append(toIndentedString(cardAcceptorBusinessCode)).append("\n");
    sb.append("    cardAcceptorCity: ").append(toIndentedString(cardAcceptorCity)).append("\n");
    sb.append("    cardAcceptorClassificationOverrideIndicator: ").append(toIndentedString(cardAcceptorClassificationOverrideIndicator)).append("\n");
    sb.append("    cardAcceptorCountry: ").append(toIndentedString(cardAcceptorCountry)).append("\n");
    sb.append("    cardAcceptorIdCode: ").append(toIndentedString(cardAcceptorIdCode)).append("\n");
    sb.append("    cardAcceptorName: ").append(toIndentedString(cardAcceptorName)).append("\n");
    sb.append("    cardAcceptorPostalCode: ").append(toIndentedString(cardAcceptorPostalCode)).append("\n");
    sb.append("    cardAcceptorState: ").append(toIndentedString(cardAcceptorState)).append("\n");
    sb.append("    cardAcceptorStreetAddress: ").append(toIndentedString(cardAcceptorStreetAddress)).append("\n");
    sb.append("    cardAcceptorTerminalId: ").append(toIndentedString(cardAcceptorTerminalId)).append("\n");
    sb.append("    cardAcceptorUrl: ").append(toIndentedString(cardAcceptorUrl)).append("\n");
    sb.append("    cardCaptureCapability: ").append(toIndentedString(cardCaptureCapability)).append("\n");
    sb.append("    cardDataInputCapability: ").append(toIndentedString(cardDataInputCapability)).append("\n");
    sb.append("    cardDataInputMode: ").append(toIndentedString(cardDataInputMode)).append("\n");
    sb.append("    cardDataOutputCapability: ").append(toIndentedString(cardDataOutputCapability)).append("\n");
    sb.append("    cardholderAuthenticationCapability: ").append(toIndentedString(cardholderAuthenticationCapability)).append("\n");
    sb.append("    cardholderAuthenticationEntity: ").append(toIndentedString(cardholderAuthenticationEntity)).append("\n");
    sb.append("    cardholderAuthenticationMethod: ").append(toIndentedString(cardholderAuthenticationMethod)).append("\n");
    sb.append("    cardholderBillingAmount: ").append(toIndentedString(cardholderBillingAmount)).append("\n");
    sb.append("    cardholderBillingCurrencyCode: ").append(toIndentedString(cardholderBillingCurrencyCode)).append("\n");
    sb.append("    cardholderFromAccountCode: ").append(toIndentedString(cardholderFromAccountCode)).append("\n");
    sb.append("    cardholderPresentData: ").append(toIndentedString(cardholderPresentData)).append("\n");
    sb.append("    cardholderToAccountCode: ").append(toIndentedString(cardholderToAccountCode)).append("\n");
    sb.append("    cardIssuerReferenceData: ").append(toIndentedString(cardIssuerReferenceData)).append("\n");
    sb.append("    cardPresentData: ").append(toIndentedString(cardPresentData)).append("\n");
    sb.append("    cardProgramIdentifier: ").append(toIndentedString(cardProgramIdentifier)).append("\n");
    sb.append("    centralSiteBusinessDate: ").append(toIndentedString(centralSiteBusinessDate)).append("\n");
    sb.append("    centralSiteProcessingDateOriginalMessage: ").append(toIndentedString(centralSiteProcessingDateOriginalMessage)).append("\n");
    sb.append("    currencyCodeCardholderBilling: ").append(toIndentedString(currencyCodeCardholderBilling)).append("\n");
    sb.append("    currencyCodeReconciliation: ").append(toIndentedString(currencyCodeReconciliation)).append("\n");
    sb.append("    currencyCodeTransaction: ").append(toIndentedString(currencyCodeTransaction)).append("\n");
    sb.append("    currencyExponentCardholderBilling: ").append(toIndentedString(currencyExponentCardholderBilling)).append("\n");
    sb.append("    currencyExponentReconciliation: ").append(toIndentedString(currencyExponentReconciliation)).append("\n");
    sb.append("    currencyExponentTransaction: ").append(toIndentedString(currencyExponentTransaction)).append("\n");
    sb.append("    dataRecord: ").append(toIndentedString(dataRecord)).append("\n");
    sb.append("    electronicCommerceCardAuth: ").append(toIndentedString(electronicCommerceCardAuth)).append("\n");
    sb.append("    electronicCommerceSecurityLevelIndicator: ").append(toIndentedString(electronicCommerceSecurityLevelIndicator)).append("\n");
    sb.append("    electronicCommerceUcafCollectionIndicator: ").append(toIndentedString(electronicCommerceUcafCollectionIndicator)).append("\n");
    sb.append("    forwardingInstitutionIdCode: ").append(toIndentedString(forwardingInstitutionIdCode)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    installmentFee: ").append(toIndentedString(installmentFee)).append("\n");
    sb.append("    installmentNumber: ").append(toIndentedString(installmentNumber)).append("\n");
    sb.append("    installmentPaymentDataBrazil: ").append(toIndentedString(installmentPaymentDataBrazil)).append("\n");
    sb.append("    additionalAmountDataCode: ").append(toIndentedString(additionalAmountDataCode)).append("\n");
    sb.append("    installmentParameters: ").append(toIndentedString(installmentParameters)).append("\n");
    sb.append("    originalInformationInstallments: ").append(toIndentedString(originalInformationInstallments)).append("\n");
    sb.append("    installmentPlanType: ").append(toIndentedString(installmentPlanType)).append("\n");
    sb.append("    functionCode: ").append(toIndentedString(functionCode)).append("\n");
    sb.append("    gcmsProductIndentifier: ").append(toIndentedString(gcmsProductIndentifier)).append("\n");
    sb.append("    installmentPaymentData: ").append(toIndentedString(installmentPaymentData)).append("\n");
    sb.append("    installmentPaymentDataAnnualPercentageRate: ").append(toIndentedString(installmentPaymentDataAnnualPercentageRate)).append("\n");
    sb.append("    installmentPaymentDataFirstInstallmentAmount: ").append(toIndentedString(installmentPaymentDataFirstInstallmentAmount)).append("\n");
    sb.append("    installmentPaymentDataInstallmentFee: ").append(toIndentedString(installmentPaymentDataInstallmentFee)).append("\n");
    sb.append("    installmentPaymentDataInterestRate: ").append(toIndentedString(installmentPaymentDataInterestRate)).append("\n");
    sb.append("    installmentPaymentDataNumberInstallments: ").append(toIndentedString(installmentPaymentDataNumberInstallments)).append("\n");
    sb.append("    installmentPaymentDataSubsequentInstallmentAmount: ").append(toIndentedString(installmentPaymentDataSubsequentInstallmentAmount)).append("\n");
    sb.append("    integratedCircuitCardRelatedData: ").append(toIndentedString(integratedCircuitCardRelatedData)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    licensedProductIndentifier: ").append(toIndentedString(licensedProductIndentifier)).append("\n");
    sb.append("    legalCorporateName: ").append(toIndentedString(legalCorporateName)).append("\n");
    sb.append("    localMessageReasonCode: ").append(toIndentedString(localMessageReasonCode)).append("\n");
    sb.append("    localTax1IVA: ").append(toIndentedString(localTax1IVA)).append("\n");
    sb.append("    localTransactionDateTime: ").append(toIndentedString(localTransactionDateTime)).append("\n");
    sb.append("    mastercardAssignedId: ").append(toIndentedString(mastercardAssignedId)).append("\n");
    sb.append("    mastercardAssignedIdOverrideIndicator: ").append(toIndentedString(mastercardAssignedIdOverrideIndicator)).append("\n");
    sb.append("    mastercardMappingServiceAccountNumber: ").append(toIndentedString(mastercardMappingServiceAccountNumber)).append("\n");
    sb.append("    masterPassIncentiveIndicator: ").append(toIndentedString(masterPassIncentiveIndicator)).append("\n");
    sb.append("    messageReasonCode: ").append(toIndentedString(messageReasonCode)).append("\n");
    sb.append("    messageReversalIndicator: ").append(toIndentedString(messageReversalIndicator)).append("\n");
    sb.append("    numberOfInstallments: ").append(toIndentedString(numberOfInstallments)).append("\n");
    sb.append("    originatingMessageFormat: ").append(toIndentedString(originatingMessageFormat)).append("\n");
    sb.append("    partnerIdCode: ").append(toIndentedString(partnerIdCode)).append("\n");
    sb.append("    pinCaptureCapability: ").append(toIndentedString(pinCaptureCapability)).append("\n");
    sb.append("    primaryAccountNumber: ").append(toIndentedString(primaryAccountNumber)).append("\n");
    sb.append("    processingCode: ").append(toIndentedString(processingCode)).append("\n");
    sb.append("    productOverrideIndicator: ").append(toIndentedString(productOverrideIndicator)).append("\n");
    sb.append("    programRegistrationId: ").append(toIndentedString(programRegistrationId)).append("\n");
    sb.append("    qpsPaypassEligibilityIndicator: ").append(toIndentedString(qpsPaypassEligibilityIndicator)).append("\n");
    sb.append("    rateIndicator: ").append(toIndentedString(rateIndicator)).append("\n");
    sb.append("    receivingInstitutionIdCode: ").append(toIndentedString(receivingInstitutionIdCode)).append("\n");
    sb.append("    reconciliationAmount: ").append(toIndentedString(reconciliationAmount)).append("\n");
    sb.append("    reconciliationCurrencyCode: ").append(toIndentedString(reconciliationCurrencyCode)).append("\n");
    sb.append("    remotePaymentsProgramData: ").append(toIndentedString(remotePaymentsProgramData)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    settlementData: ").append(toIndentedString(settlementData)).append("\n");
    sb.append("    settlementIndicator: ").append(toIndentedString(settlementIndicator)).append("\n");
    sb.append("    specialConditionsIndicator: ").append(toIndentedString(specialConditionsIndicator)).append("\n");
    sb.append("    terminalDataOutputCapability: ").append(toIndentedString(terminalDataOutputCapability)).append("\n");
    sb.append("    terminalOperatingEnvironment: ").append(toIndentedString(terminalOperatingEnvironment)).append("\n");
    sb.append("    terminalType: ").append(toIndentedString(terminalType)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    totalTransactionAmount: ").append(toIndentedString(totalTransactionAmount)).append("\n");
    sb.append("    transactionAmountLocal: ").append(toIndentedString(transactionAmountLocal)).append("\n");
    sb.append("    transactionCategoryIndicator: ").append(toIndentedString(transactionCategoryIndicator)).append("\n");
    sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
    sb.append("    transactionDestinationInstitutionIdCode: ").append(toIndentedString(transactionDestinationInstitutionIdCode)).append("\n");
    sb.append("    transactionLifeCycleId: ").append(toIndentedString(transactionLifeCycleId)).append("\n");
    sb.append("    transactionOriginatorInstitutionIdCode: ").append(toIndentedString(transactionOriginatorInstitutionIdCode)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transitProgramCode: ").append(toIndentedString(transitProgramCode)).append("\n");
    sb.append("    walletIdentifierMdes: ").append(toIndentedString(walletIdentifierMdes)).append("\n");
    sb.append("    currencyConversionAssessmentAmount: ").append(toIndentedString(currencyConversionAssessmentAmount)).append("\n");
    sb.append("    japanCommonMerchantCode: ").append(toIndentedString(japanCommonMerchantCode)).append("\n");
    sb.append("    installmentData: ").append(toIndentedString(installmentData)).append("\n");
    sb.append("    flexCode: ").append(toIndentedString(flexCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountLevelManagementAccountCategoryCode");
    openapiFields.add("acquirerReferenceData");
    openapiFields.add("acquiringInstitutionIdCode");
    openapiFields.add("approvalCode");
    openapiFields.add("businessCycle");
    openapiFields.add("businessServiceArrangementTypeCode");
    openapiFields.add("businessServiceIdCode");
    openapiFields.add("cardAcceptorBusinessCode");
    openapiFields.add("cardAcceptorCity");
    openapiFields.add("cardAcceptorClassificationOverrideIndicator");
    openapiFields.add("cardAcceptorCountry");
    openapiFields.add("cardAcceptorIdCode");
    openapiFields.add("cardAcceptorName");
    openapiFields.add("cardAcceptorPostalCode");
    openapiFields.add("cardAcceptorState");
    openapiFields.add("cardAcceptorStreetAddress");
    openapiFields.add("cardAcceptorTerminalId");
    openapiFields.add("cardAcceptorUrl");
    openapiFields.add("cardCaptureCapability");
    openapiFields.add("cardDataInputCapability");
    openapiFields.add("cardDataInputMode");
    openapiFields.add("cardDataOutputCapability");
    openapiFields.add("cardholderAuthenticationCapability");
    openapiFields.add("cardholderAuthenticationEntity");
    openapiFields.add("cardholderAuthenticationMethod");
    openapiFields.add("cardholderBillingAmount");
    openapiFields.add("cardholderBillingCurrencyCode");
    openapiFields.add("cardholderFromAccountCode");
    openapiFields.add("cardholderPresentData");
    openapiFields.add("cardholderToAccountCode");
    openapiFields.add("cardIssuerReferenceData");
    openapiFields.add("cardPresentData");
    openapiFields.add("cardProgramIdentifier");
    openapiFields.add("centralSiteBusinessDate");
    openapiFields.add("centralSiteProcessingDateOriginalMessage");
    openapiFields.add("currencyCodeCardholderBilling");
    openapiFields.add("currencyCodeReconciliation");
    openapiFields.add("currencyCodeTransaction");
    openapiFields.add("currencyExponentCardholderBilling");
    openapiFields.add("currencyExponentReconciliation");
    openapiFields.add("currencyExponentTransaction");
    openapiFields.add("dataRecord");
    openapiFields.add("electronicCommerceCardAuth");
    openapiFields.add("electronicCommerceSecurityLevelIndicator");
    openapiFields.add("electronicCommerceUcafCollectionIndicator");
    openapiFields.add("forwardingInstitutionIdCode");
    openapiFields.add("installmentAmount");
    openapiFields.add("installmentFee");
    openapiFields.add("installmentNumber");
    openapiFields.add("installmentPaymentDataBrazil");
    openapiFields.add("additionalAmountDataCode");
    openapiFields.add("installmentParameters");
    openapiFields.add("originalInformationInstallments");
    openapiFields.add("installmentPlanType");
    openapiFields.add("functionCode");
    openapiFields.add("gcmsProductIndentifier");
    openapiFields.add("installmentPaymentData");
    openapiFields.add("installmentPaymentDataAnnualPercentageRate");
    openapiFields.add("installmentPaymentDataFirstInstallmentAmount");
    openapiFields.add("installmentPaymentDataInstallmentFee");
    openapiFields.add("installmentPaymentDataInterestRate");
    openapiFields.add("installmentPaymentDataNumberInstallments");
    openapiFields.add("installmentPaymentDataSubsequentInstallmentAmount");
    openapiFields.add("integratedCircuitCardRelatedData");
    openapiFields.add("interchangeRateDesignator");
    openapiFields.add("licensedProductIndentifier");
    openapiFields.add("legalCorporateName");
    openapiFields.add("localMessageReasonCode");
    openapiFields.add("localTax1IVA");
    openapiFields.add("localTransactionDateTime");
    openapiFields.add("mastercardAssignedId");
    openapiFields.add("mastercardAssignedIdOverrideIndicator");
    openapiFields.add("mastercardMappingServiceAccountNumber");
    openapiFields.add("masterPassIncentiveIndicator");
    openapiFields.add("messageReasonCode");
    openapiFields.add("messageReversalIndicator");
    openapiFields.add("numberOfInstallments");
    openapiFields.add("originatingMessageFormat");
    openapiFields.add("partnerIdCode");
    openapiFields.add("pinCaptureCapability");
    openapiFields.add("primaryAccountNumber");
    openapiFields.add("processingCode");
    openapiFields.add("productOverrideIndicator");
    openapiFields.add("programRegistrationId");
    openapiFields.add("qpsPaypassEligibilityIndicator");
    openapiFields.add("rateIndicator");
    openapiFields.add("receivingInstitutionIdCode");
    openapiFields.add("reconciliationAmount");
    openapiFields.add("reconciliationCurrencyCode");
    openapiFields.add("remotePaymentsProgramData");
    openapiFields.add("serviceCode");
    openapiFields.add("settlementData");
    openapiFields.add("settlementIndicator");
    openapiFields.add("specialConditionsIndicator");
    openapiFields.add("terminalDataOutputCapability");
    openapiFields.add("terminalOperatingEnvironment");
    openapiFields.add("terminalType");
    openapiFields.add("tokenRequestorId");
    openapiFields.add("totalTransactionAmount");
    openapiFields.add("transactionAmountLocal");
    openapiFields.add("transactionCategoryIndicator");
    openapiFields.add("transactionCurrencyCode");
    openapiFields.add("transactionDestinationInstitutionIdCode");
    openapiFields.add("transactionLifeCycleId");
    openapiFields.add("transactionOriginatorInstitutionIdCode");
    openapiFields.add("transactionType");
    openapiFields.add("transitProgramCode");
    openapiFields.add("walletIdentifierMdes");
    openapiFields.add("currencyConversionAssessmentAmount");
    openapiFields.add("japanCommonMerchantCode");
    openapiFields.add("installmentData");
    openapiFields.add("flexCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClearingDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClearingDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClearingDetail is not found in the empty JSON string", ClearingDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClearingDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClearingDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountLevelManagementAccountCategoryCode") != null && !jsonObj.get("accountLevelManagementAccountCategoryCode").isJsonNull()) && !jsonObj.get("accountLevelManagementAccountCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountLevelManagementAccountCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountLevelManagementAccountCategoryCode").toString()));
      }
      if ((jsonObj.get("acquirerReferenceData") != null && !jsonObj.get("acquirerReferenceData").isJsonNull()) && !jsonObj.get("acquirerReferenceData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerReferenceData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerReferenceData").toString()));
      }
      if ((jsonObj.get("acquiringInstitutionIdCode") != null && !jsonObj.get("acquiringInstitutionIdCode").isJsonNull()) && !jsonObj.get("acquiringInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiringInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiringInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("approvalCode") != null && !jsonObj.get("approvalCode").isJsonNull()) && !jsonObj.get("approvalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalCode").toString()));
      }
      if ((jsonObj.get("businessCycle") != null && !jsonObj.get("businessCycle").isJsonNull()) && !jsonObj.get("businessCycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessCycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessCycle").toString()));
      }
      if ((jsonObj.get("businessServiceArrangementTypeCode") != null && !jsonObj.get("businessServiceArrangementTypeCode").isJsonNull()) && !jsonObj.get("businessServiceArrangementTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessServiceArrangementTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessServiceArrangementTypeCode").toString()));
      }
      if ((jsonObj.get("businessServiceIdCode") != null && !jsonObj.get("businessServiceIdCode").isJsonNull()) && !jsonObj.get("businessServiceIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessServiceIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessServiceIdCode").toString()));
      }
      if ((jsonObj.get("cardAcceptorBusinessCode") != null && !jsonObj.get("cardAcceptorBusinessCode").isJsonNull()) && !jsonObj.get("cardAcceptorBusinessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorBusinessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorBusinessCode").toString()));
      }
      if ((jsonObj.get("cardAcceptorCity") != null && !jsonObj.get("cardAcceptorCity").isJsonNull()) && !jsonObj.get("cardAcceptorCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorCity").toString()));
      }
      if ((jsonObj.get("cardAcceptorClassificationOverrideIndicator") != null && !jsonObj.get("cardAcceptorClassificationOverrideIndicator").isJsonNull()) && !jsonObj.get("cardAcceptorClassificationOverrideIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorClassificationOverrideIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorClassificationOverrideIndicator").toString()));
      }
      if ((jsonObj.get("cardAcceptorCountry") != null && !jsonObj.get("cardAcceptorCountry").isJsonNull()) && !jsonObj.get("cardAcceptorCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorCountry").toString()));
      }
      if ((jsonObj.get("cardAcceptorIdCode") != null && !jsonObj.get("cardAcceptorIdCode").isJsonNull()) && !jsonObj.get("cardAcceptorIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorIdCode").toString()));
      }
      if ((jsonObj.get("cardAcceptorName") != null && !jsonObj.get("cardAcceptorName").isJsonNull()) && !jsonObj.get("cardAcceptorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorName").toString()));
      }
      if ((jsonObj.get("cardAcceptorPostalCode") != null && !jsonObj.get("cardAcceptorPostalCode").isJsonNull()) && !jsonObj.get("cardAcceptorPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorPostalCode").toString()));
      }
      if ((jsonObj.get("cardAcceptorState") != null && !jsonObj.get("cardAcceptorState").isJsonNull()) && !jsonObj.get("cardAcceptorState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorState").toString()));
      }
      if ((jsonObj.get("cardAcceptorStreetAddress") != null && !jsonObj.get("cardAcceptorStreetAddress").isJsonNull()) && !jsonObj.get("cardAcceptorStreetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorStreetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorStreetAddress").toString()));
      }
      if ((jsonObj.get("cardAcceptorTerminalId") != null && !jsonObj.get("cardAcceptorTerminalId").isJsonNull()) && !jsonObj.get("cardAcceptorTerminalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorTerminalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorTerminalId").toString()));
      }
      if ((jsonObj.get("cardAcceptorUrl") != null && !jsonObj.get("cardAcceptorUrl").isJsonNull()) && !jsonObj.get("cardAcceptorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardAcceptorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardAcceptorUrl").toString()));
      }
      if ((jsonObj.get("cardCaptureCapability") != null && !jsonObj.get("cardCaptureCapability").isJsonNull()) && !jsonObj.get("cardCaptureCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCaptureCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCaptureCapability").toString()));
      }
      if ((jsonObj.get("cardDataInputCapability") != null && !jsonObj.get("cardDataInputCapability").isJsonNull()) && !jsonObj.get("cardDataInputCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDataInputCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDataInputCapability").toString()));
      }
      if ((jsonObj.get("cardDataInputMode") != null && !jsonObj.get("cardDataInputMode").isJsonNull()) && !jsonObj.get("cardDataInputMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDataInputMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDataInputMode").toString()));
      }
      if ((jsonObj.get("cardDataOutputCapability") != null && !jsonObj.get("cardDataOutputCapability").isJsonNull()) && !jsonObj.get("cardDataOutputCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDataOutputCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDataOutputCapability").toString()));
      }
      if ((jsonObj.get("cardholderAuthenticationCapability") != null && !jsonObj.get("cardholderAuthenticationCapability").isJsonNull()) && !jsonObj.get("cardholderAuthenticationCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderAuthenticationCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderAuthenticationCapability").toString()));
      }
      if ((jsonObj.get("cardholderAuthenticationEntity") != null && !jsonObj.get("cardholderAuthenticationEntity").isJsonNull()) && !jsonObj.get("cardholderAuthenticationEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderAuthenticationEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderAuthenticationEntity").toString()));
      }
      if ((jsonObj.get("cardholderAuthenticationMethod") != null && !jsonObj.get("cardholderAuthenticationMethod").isJsonNull()) && !jsonObj.get("cardholderAuthenticationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderAuthenticationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderAuthenticationMethod").toString()));
      }
      if ((jsonObj.get("cardholderBillingAmount") != null && !jsonObj.get("cardholderBillingAmount").isJsonNull()) && !jsonObj.get("cardholderBillingAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderBillingAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderBillingAmount").toString()));
      }
      if ((jsonObj.get("cardholderBillingCurrencyCode") != null && !jsonObj.get("cardholderBillingCurrencyCode").isJsonNull()) && !jsonObj.get("cardholderBillingCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderBillingCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderBillingCurrencyCode").toString()));
      }
      if ((jsonObj.get("cardholderFromAccountCode") != null && !jsonObj.get("cardholderFromAccountCode").isJsonNull()) && !jsonObj.get("cardholderFromAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderFromAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderFromAccountCode").toString()));
      }
      if ((jsonObj.get("cardholderPresentData") != null && !jsonObj.get("cardholderPresentData").isJsonNull()) && !jsonObj.get("cardholderPresentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderPresentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderPresentData").toString()));
      }
      if ((jsonObj.get("cardholderToAccountCode") != null && !jsonObj.get("cardholderToAccountCode").isJsonNull()) && !jsonObj.get("cardholderToAccountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholderToAccountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholderToAccountCode").toString()));
      }
      if ((jsonObj.get("cardIssuerReferenceData") != null && !jsonObj.get("cardIssuerReferenceData").isJsonNull()) && !jsonObj.get("cardIssuerReferenceData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardIssuerReferenceData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardIssuerReferenceData").toString()));
      }
      if ((jsonObj.get("cardPresentData") != null && !jsonObj.get("cardPresentData").isJsonNull()) && !jsonObj.get("cardPresentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardPresentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardPresentData").toString()));
      }
      if ((jsonObj.get("cardProgramIdentifier") != null && !jsonObj.get("cardProgramIdentifier").isJsonNull()) && !jsonObj.get("cardProgramIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardProgramIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardProgramIdentifier").toString()));
      }
      if ((jsonObj.get("centralSiteBusinessDate") != null && !jsonObj.get("centralSiteBusinessDate").isJsonNull()) && !jsonObj.get("centralSiteBusinessDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `centralSiteBusinessDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("centralSiteBusinessDate").toString()));
      }
      if ((jsonObj.get("centralSiteProcessingDateOriginalMessage") != null && !jsonObj.get("centralSiteProcessingDateOriginalMessage").isJsonNull()) && !jsonObj.get("centralSiteProcessingDateOriginalMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `centralSiteProcessingDateOriginalMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("centralSiteProcessingDateOriginalMessage").toString()));
      }
      if ((jsonObj.get("currencyCodeCardholderBilling") != null && !jsonObj.get("currencyCodeCardholderBilling").isJsonNull()) && !jsonObj.get("currencyCodeCardholderBilling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCodeCardholderBilling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCodeCardholderBilling").toString()));
      }
      if ((jsonObj.get("currencyCodeReconciliation") != null && !jsonObj.get("currencyCodeReconciliation").isJsonNull()) && !jsonObj.get("currencyCodeReconciliation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCodeReconciliation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCodeReconciliation").toString()));
      }
      if ((jsonObj.get("currencyCodeTransaction") != null && !jsonObj.get("currencyCodeTransaction").isJsonNull()) && !jsonObj.get("currencyCodeTransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCodeTransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCodeTransaction").toString()));
      }
      if ((jsonObj.get("currencyExponentCardholderBilling") != null && !jsonObj.get("currencyExponentCardholderBilling").isJsonNull()) && !jsonObj.get("currencyExponentCardholderBilling").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyExponentCardholderBilling` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyExponentCardholderBilling").toString()));
      }
      if ((jsonObj.get("currencyExponentReconciliation") != null && !jsonObj.get("currencyExponentReconciliation").isJsonNull()) && !jsonObj.get("currencyExponentReconciliation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyExponentReconciliation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyExponentReconciliation").toString()));
      }
      if ((jsonObj.get("currencyExponentTransaction") != null && !jsonObj.get("currencyExponentTransaction").isJsonNull()) && !jsonObj.get("currencyExponentTransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyExponentTransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyExponentTransaction").toString()));
      }
      if ((jsonObj.get("dataRecord") != null && !jsonObj.get("dataRecord").isJsonNull()) && !jsonObj.get("dataRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRecord").toString()));
      }
      if ((jsonObj.get("electronicCommerceCardAuth") != null && !jsonObj.get("electronicCommerceCardAuth").isJsonNull()) && !jsonObj.get("electronicCommerceCardAuth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicCommerceCardAuth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicCommerceCardAuth").toString()));
      }
      if ((jsonObj.get("electronicCommerceSecurityLevelIndicator") != null && !jsonObj.get("electronicCommerceSecurityLevelIndicator").isJsonNull()) && !jsonObj.get("electronicCommerceSecurityLevelIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicCommerceSecurityLevelIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicCommerceSecurityLevelIndicator").toString()));
      }
      if ((jsonObj.get("electronicCommerceUcafCollectionIndicator") != null && !jsonObj.get("electronicCommerceUcafCollectionIndicator").isJsonNull()) && !jsonObj.get("electronicCommerceUcafCollectionIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicCommerceUcafCollectionIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicCommerceUcafCollectionIndicator").toString()));
      }
      if ((jsonObj.get("forwardingInstitutionIdCode") != null && !jsonObj.get("forwardingInstitutionIdCode").isJsonNull()) && !jsonObj.get("forwardingInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardingInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardingInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("installmentAmount") != null && !jsonObj.get("installmentAmount").isJsonNull()) && !jsonObj.get("installmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentAmount").toString()));
      }
      if ((jsonObj.get("installmentFee") != null && !jsonObj.get("installmentFee").isJsonNull()) && !jsonObj.get("installmentFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentFee").toString()));
      }
      if ((jsonObj.get("installmentNumber") != null && !jsonObj.get("installmentNumber").isJsonNull()) && !jsonObj.get("installmentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentNumber").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataBrazil") != null && !jsonObj.get("installmentPaymentDataBrazil").isJsonNull()) && !jsonObj.get("installmentPaymentDataBrazil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataBrazil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataBrazil").toString()));
      }
      if ((jsonObj.get("additionalAmountDataCode") != null && !jsonObj.get("additionalAmountDataCode").isJsonNull()) && !jsonObj.get("additionalAmountDataCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalAmountDataCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalAmountDataCode").toString()));
      }
      // validate the optional field `installmentParameters`
      if (jsonObj.get("installmentParameters") != null && !jsonObj.get("installmentParameters").isJsonNull()) {
        InstallmentParameters.validateJsonElement(jsonObj.get("installmentParameters"));
      }
      // validate the optional field `originalInformationInstallments`
      if (jsonObj.get("originalInformationInstallments") != null && !jsonObj.get("originalInformationInstallments").isJsonNull()) {
        OriginalInformationInstallments.validateJsonElement(jsonObj.get("originalInformationInstallments"));
      }
      if ((jsonObj.get("installmentPlanType") != null && !jsonObj.get("installmentPlanType").isJsonNull()) && !jsonObj.get("installmentPlanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPlanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPlanType").toString()));
      }
      if ((jsonObj.get("functionCode") != null && !jsonObj.get("functionCode").isJsonNull()) && !jsonObj.get("functionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionCode").toString()));
      }
      if ((jsonObj.get("gcmsProductIndentifier") != null && !jsonObj.get("gcmsProductIndentifier").isJsonNull()) && !jsonObj.get("gcmsProductIndentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcmsProductIndentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcmsProductIndentifier").toString()));
      }
      if ((jsonObj.get("installmentPaymentData") != null && !jsonObj.get("installmentPaymentData").isJsonNull()) && !jsonObj.get("installmentPaymentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentData").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataAnnualPercentageRate") != null && !jsonObj.get("installmentPaymentDataAnnualPercentageRate").isJsonNull()) && !jsonObj.get("installmentPaymentDataAnnualPercentageRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataAnnualPercentageRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataAnnualPercentageRate").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataFirstInstallmentAmount") != null && !jsonObj.get("installmentPaymentDataFirstInstallmentAmount").isJsonNull()) && !jsonObj.get("installmentPaymentDataFirstInstallmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataFirstInstallmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataFirstInstallmentAmount").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataInstallmentFee") != null && !jsonObj.get("installmentPaymentDataInstallmentFee").isJsonNull()) && !jsonObj.get("installmentPaymentDataInstallmentFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataInstallmentFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataInstallmentFee").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataInterestRate") != null && !jsonObj.get("installmentPaymentDataInterestRate").isJsonNull()) && !jsonObj.get("installmentPaymentDataInterestRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataInterestRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataInterestRate").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataNumberInstallments") != null && !jsonObj.get("installmentPaymentDataNumberInstallments").isJsonNull()) && !jsonObj.get("installmentPaymentDataNumberInstallments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataNumberInstallments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataNumberInstallments").toString()));
      }
      if ((jsonObj.get("installmentPaymentDataSubsequentInstallmentAmount") != null && !jsonObj.get("installmentPaymentDataSubsequentInstallmentAmount").isJsonNull()) && !jsonObj.get("installmentPaymentDataSubsequentInstallmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentPaymentDataSubsequentInstallmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentPaymentDataSubsequentInstallmentAmount").toString()));
      }
      if ((jsonObj.get("integratedCircuitCardRelatedData") != null && !jsonObj.get("integratedCircuitCardRelatedData").isJsonNull()) && !jsonObj.get("integratedCircuitCardRelatedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integratedCircuitCardRelatedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integratedCircuitCardRelatedData").toString()));
      }
      if ((jsonObj.get("interchangeRateDesignator") != null && !jsonObj.get("interchangeRateDesignator").isJsonNull()) && !jsonObj.get("interchangeRateDesignator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchangeRateDesignator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchangeRateDesignator").toString()));
      }
      if ((jsonObj.get("licensedProductIndentifier") != null && !jsonObj.get("licensedProductIndentifier").isJsonNull()) && !jsonObj.get("licensedProductIndentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licensedProductIndentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licensedProductIndentifier").toString()));
      }
      if ((jsonObj.get("legalCorporateName") != null && !jsonObj.get("legalCorporateName").isJsonNull()) && !jsonObj.get("legalCorporateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalCorporateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalCorporateName").toString()));
      }
      if ((jsonObj.get("localMessageReasonCode") != null && !jsonObj.get("localMessageReasonCode").isJsonNull()) && !jsonObj.get("localMessageReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localMessageReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localMessageReasonCode").toString()));
      }
      if ((jsonObj.get("localTax1IVA") != null && !jsonObj.get("localTax1IVA").isJsonNull()) && !jsonObj.get("localTax1IVA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localTax1IVA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localTax1IVA").toString()));
      }
      if ((jsonObj.get("localTransactionDateTime") != null && !jsonObj.get("localTransactionDateTime").isJsonNull()) && !jsonObj.get("localTransactionDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localTransactionDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localTransactionDateTime").toString()));
      }
      if ((jsonObj.get("mastercardAssignedId") != null && !jsonObj.get("mastercardAssignedId").isJsonNull()) && !jsonObj.get("mastercardAssignedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercardAssignedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercardAssignedId").toString()));
      }
      if ((jsonObj.get("mastercardAssignedIdOverrideIndicator") != null && !jsonObj.get("mastercardAssignedIdOverrideIndicator").isJsonNull()) && !jsonObj.get("mastercardAssignedIdOverrideIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercardAssignedIdOverrideIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercardAssignedIdOverrideIndicator").toString()));
      }
      if ((jsonObj.get("mastercardMappingServiceAccountNumber") != null && !jsonObj.get("mastercardMappingServiceAccountNumber").isJsonNull()) && !jsonObj.get("mastercardMappingServiceAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercardMappingServiceAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercardMappingServiceAccountNumber").toString()));
      }
      if ((jsonObj.get("masterPassIncentiveIndicator") != null && !jsonObj.get("masterPassIncentiveIndicator").isJsonNull()) && !jsonObj.get("masterPassIncentiveIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterPassIncentiveIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterPassIncentiveIndicator").toString()));
      }
      if ((jsonObj.get("messageReasonCode") != null && !jsonObj.get("messageReasonCode").isJsonNull()) && !jsonObj.get("messageReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageReasonCode").toString()));
      }
      if ((jsonObj.get("messageReversalIndicator") != null && !jsonObj.get("messageReversalIndicator").isJsonNull()) && !jsonObj.get("messageReversalIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageReversalIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageReversalIndicator").toString()));
      }
      if ((jsonObj.get("numberOfInstallments") != null && !jsonObj.get("numberOfInstallments").isJsonNull()) && !jsonObj.get("numberOfInstallments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfInstallments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberOfInstallments").toString()));
      }
      if ((jsonObj.get("originatingMessageFormat") != null && !jsonObj.get("originatingMessageFormat").isJsonNull()) && !jsonObj.get("originatingMessageFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatingMessageFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatingMessageFormat").toString()));
      }
      if ((jsonObj.get("partnerIdCode") != null && !jsonObj.get("partnerIdCode").isJsonNull()) && !jsonObj.get("partnerIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerIdCode").toString()));
      }
      if ((jsonObj.get("pinCaptureCapability") != null && !jsonObj.get("pinCaptureCapability").isJsonNull()) && !jsonObj.get("pinCaptureCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinCaptureCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinCaptureCapability").toString()));
      }
      if ((jsonObj.get("primaryAccountNumber") != null && !jsonObj.get("primaryAccountNumber").isJsonNull()) && !jsonObj.get("primaryAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAccountNumber").toString()));
      }
      if ((jsonObj.get("processingCode") != null && !jsonObj.get("processingCode").isJsonNull()) && !jsonObj.get("processingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingCode").toString()));
      }
      if ((jsonObj.get("productOverrideIndicator") != null && !jsonObj.get("productOverrideIndicator").isJsonNull()) && !jsonObj.get("productOverrideIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOverrideIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOverrideIndicator").toString()));
      }
      if ((jsonObj.get("programRegistrationId") != null && !jsonObj.get("programRegistrationId").isJsonNull()) && !jsonObj.get("programRegistrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programRegistrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programRegistrationId").toString()));
      }
      if ((jsonObj.get("qpsPaypassEligibilityIndicator") != null && !jsonObj.get("qpsPaypassEligibilityIndicator").isJsonNull()) && !jsonObj.get("qpsPaypassEligibilityIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qpsPaypassEligibilityIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qpsPaypassEligibilityIndicator").toString()));
      }
      if ((jsonObj.get("rateIndicator") != null && !jsonObj.get("rateIndicator").isJsonNull()) && !jsonObj.get("rateIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateIndicator").toString()));
      }
      if ((jsonObj.get("receivingInstitutionIdCode") != null && !jsonObj.get("receivingInstitutionIdCode").isJsonNull()) && !jsonObj.get("receivingInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("reconciliationAmount") != null && !jsonObj.get("reconciliationAmount").isJsonNull()) && !jsonObj.get("reconciliationAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationAmount").toString()));
      }
      if ((jsonObj.get("reconciliationCurrencyCode") != null && !jsonObj.get("reconciliationCurrencyCode").isJsonNull()) && !jsonObj.get("reconciliationCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationCurrencyCode").toString()));
      }
      if ((jsonObj.get("remotePaymentsProgramData") != null && !jsonObj.get("remotePaymentsProgramData").isJsonNull()) && !jsonObj.get("remotePaymentsProgramData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remotePaymentsProgramData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remotePaymentsProgramData").toString()));
      }
      if ((jsonObj.get("serviceCode") != null && !jsonObj.get("serviceCode").isJsonNull()) && !jsonObj.get("serviceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceCode").toString()));
      }
      if ((jsonObj.get("settlementData") != null && !jsonObj.get("settlementData").isJsonNull()) && !jsonObj.get("settlementData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementData").toString()));
      }
      if ((jsonObj.get("settlementIndicator") != null && !jsonObj.get("settlementIndicator").isJsonNull()) && !jsonObj.get("settlementIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementIndicator").toString()));
      }
      if ((jsonObj.get("specialConditionsIndicator") != null && !jsonObj.get("specialConditionsIndicator").isJsonNull()) && !jsonObj.get("specialConditionsIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialConditionsIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialConditionsIndicator").toString()));
      }
      if ((jsonObj.get("terminalDataOutputCapability") != null && !jsonObj.get("terminalDataOutputCapability").isJsonNull()) && !jsonObj.get("terminalDataOutputCapability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalDataOutputCapability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalDataOutputCapability").toString()));
      }
      if ((jsonObj.get("terminalOperatingEnvironment") != null && !jsonObj.get("terminalOperatingEnvironment").isJsonNull()) && !jsonObj.get("terminalOperatingEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalOperatingEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalOperatingEnvironment").toString()));
      }
      if ((jsonObj.get("terminalType") != null && !jsonObj.get("terminalType").isJsonNull()) && !jsonObj.get("terminalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminalType").toString()));
      }
      if ((jsonObj.get("tokenRequestorId") != null && !jsonObj.get("tokenRequestorId").isJsonNull()) && !jsonObj.get("tokenRequestorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenRequestorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenRequestorId").toString()));
      }
      if ((jsonObj.get("totalTransactionAmount") != null && !jsonObj.get("totalTransactionAmount").isJsonNull()) && !jsonObj.get("totalTransactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTransactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTransactionAmount").toString()));
      }
      if ((jsonObj.get("transactionAmountLocal") != null && !jsonObj.get("transactionAmountLocal").isJsonNull()) && !jsonObj.get("transactionAmountLocal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionAmountLocal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionAmountLocal").toString()));
      }
      if ((jsonObj.get("transactionCategoryIndicator") != null && !jsonObj.get("transactionCategoryIndicator").isJsonNull()) && !jsonObj.get("transactionCategoryIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCategoryIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCategoryIndicator").toString()));
      }
      if ((jsonObj.get("transactionCurrencyCode") != null && !jsonObj.get("transactionCurrencyCode").isJsonNull()) && !jsonObj.get("transactionCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrencyCode").toString()));
      }
      if ((jsonObj.get("transactionDestinationInstitutionIdCode") != null && !jsonObj.get("transactionDestinationInstitutionIdCode").isJsonNull()) && !jsonObj.get("transactionDestinationInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDestinationInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDestinationInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("transactionLifeCycleId") != null && !jsonObj.get("transactionLifeCycleId").isJsonNull()) && !jsonObj.get("transactionLifeCycleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionLifeCycleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionLifeCycleId").toString()));
      }
      if ((jsonObj.get("transactionOriginatorInstitutionIdCode") != null && !jsonObj.get("transactionOriginatorInstitutionIdCode").isJsonNull()) && !jsonObj.get("transactionOriginatorInstitutionIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionOriginatorInstitutionIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionOriginatorInstitutionIdCode").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      if ((jsonObj.get("transitProgramCode") != null && !jsonObj.get("transitProgramCode").isJsonNull()) && !jsonObj.get("transitProgramCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitProgramCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitProgramCode").toString()));
      }
      if ((jsonObj.get("walletIdentifierMdes") != null && !jsonObj.get("walletIdentifierMdes").isJsonNull()) && !jsonObj.get("walletIdentifierMdes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletIdentifierMdes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletIdentifierMdes").toString()));
      }
      if ((jsonObj.get("currencyConversionAssessmentAmount") != null && !jsonObj.get("currencyConversionAssessmentAmount").isJsonNull()) && !jsonObj.get("currencyConversionAssessmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyConversionAssessmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyConversionAssessmentAmount").toString()));
      }
      if ((jsonObj.get("japanCommonMerchantCode") != null && !jsonObj.get("japanCommonMerchantCode").isJsonNull()) && !jsonObj.get("japanCommonMerchantCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `japanCommonMerchantCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("japanCommonMerchantCode").toString()));
      }
      if ((jsonObj.get("installmentData") != null && !jsonObj.get("installmentData").isJsonNull()) && !jsonObj.get("installmentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentData").toString()));
      }
      if ((jsonObj.get("flexCode") != null && !jsonObj.get("flexCode").isJsonNull()) && !jsonObj.get("flexCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flexCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flexCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClearingDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClearingDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClearingDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClearingDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ClearingDetail>() {
           @Override
           public void write(JsonWriter out, ClearingDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClearingDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClearingDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClearingDetail
  * @throws IOException if the JSON string is invalid with respect to ClearingDetail
  */
  public static ClearingDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClearingDetail.class);
  }

 /**
  * Convert an instance of ClearingDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

