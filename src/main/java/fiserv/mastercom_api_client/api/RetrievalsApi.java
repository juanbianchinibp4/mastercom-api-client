/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fiserv.mastercom_api_client.api;

import com.google.gson.reflect.TypeToken;
import fiserv.mastercom_api_client.ApiCallback;
import fiserv.mastercom_api_client.ApiClient;
import fiserv.mastercom_api_client.ApiException;
import fiserv.mastercom_api_client.ApiResponse;
import fiserv.mastercom_api_client.Configuration;
import fiserv.mastercom_api_client.Pair;
import fiserv.mastercom_api_client.model.AcquirerFulfillmentRequest;
import fiserv.mastercom_api_client.model.AcquirerFulfillmentResponse;
import fiserv.mastercom_api_client.model.CreateRetrievalRequest;
import fiserv.mastercom_api_client.model.CreateRetrievalResponse;
import fiserv.mastercom_api_client.model.DocumentResponseStructure;
import fiserv.mastercom_api_client.model.IssuerFulfillmentRequest;
import fiserv.mastercom_api_client.model.LoadDataForRetrievalResponse;
import fiserv.mastercom_api_client.model.RetrievalResponse;
import fiserv.mastercom_api_client.model.RetrievalStatusRequest;
import fiserv.mastercom_api_client.model.RetrievalStatusResponse;
import fiserv.mastercom_api_client.model.RetrievalsImageStatusRequest;
import fiserv.mastercom_api_client.model.RetrievalsImageStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RetrievalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetrievalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RetrievalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acqFulfillRetrievalRequest
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Acquirer Retrieval Fulfillment information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acqFulfillRetrievalRequestCall(String claimId, String requestId, AcquirerFulfillmentRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments"
            .replace("{" + "claim-id" + "}", localVarApiClient.escapeString(claimId.toString()))
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acqFulfillRetrievalRequestValidateBeforeCall(String claimId, String requestId, AcquirerFulfillmentRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling acqFulfillRetrievalRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling acqFulfillRetrievalRequest(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling acqFulfillRetrievalRequest(Async)");
        }

        return acqFulfillRetrievalRequestCall(claimId, requestId, body, _callback);

    }

    /**
     * 
     * After receiving a retrieval request from an issuer, an acquirer uses this endpoint to either provide a copy or substitute draft of the transaction information document (TID) or provide a reason for failing to fulfill the retrieval request.   Note: If the API call to this endpoint times out, customers should use the Retrieval Fulfillment Status or Retrieve Claims endpoint to determine the success or failure of document processing.   NOTE: Below acquirerResponseCd codes will be accepted starting on February 26th, 2023.&lt;br&gt;  A - Funds Movement Request&lt;br&gt;  B - Refunded&lt;br&gt;  C - Initiating Refund&lt;br&gt;  E - Reject Collaboration&lt;br&gt;  F - IIAS Unfulfillable&lt;br&gt;  G - IIAS Invalid request information&lt;br&gt;  H - IIAS Fulfilled outside MasterCom system
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Acquirer Retrieval Fulfillment information (required)
     * @return AcquirerFulfillmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AcquirerFulfillmentResponse acqFulfillRetrievalRequest(String claimId, String requestId, AcquirerFulfillmentRequest body) throws ApiException {
        ApiResponse<AcquirerFulfillmentResponse> localVarResp = acqFulfillRetrievalRequestWithHttpInfo(claimId, requestId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * After receiving a retrieval request from an issuer, an acquirer uses this endpoint to either provide a copy or substitute draft of the transaction information document (TID) or provide a reason for failing to fulfill the retrieval request.   Note: If the API call to this endpoint times out, customers should use the Retrieval Fulfillment Status or Retrieve Claims endpoint to determine the success or failure of document processing.   NOTE: Below acquirerResponseCd codes will be accepted starting on February 26th, 2023.&lt;br&gt;  A - Funds Movement Request&lt;br&gt;  B - Refunded&lt;br&gt;  C - Initiating Refund&lt;br&gt;  E - Reject Collaboration&lt;br&gt;  F - IIAS Unfulfillable&lt;br&gt;  G - IIAS Invalid request information&lt;br&gt;  H - IIAS Fulfilled outside MasterCom system
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Acquirer Retrieval Fulfillment information (required)
     * @return ApiResponse&lt;AcquirerFulfillmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcquirerFulfillmentResponse> acqFulfillRetrievalRequestWithHttpInfo(String claimId, String requestId, AcquirerFulfillmentRequest body) throws ApiException {
        okhttp3.Call localVarCall = acqFulfillRetrievalRequestValidateBeforeCall(claimId, requestId, body, null);
        Type localVarReturnType = new TypeToken<AcquirerFulfillmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * After receiving a retrieval request from an issuer, an acquirer uses this endpoint to either provide a copy or substitute draft of the transaction information document (TID) or provide a reason for failing to fulfill the retrieval request.   Note: If the API call to this endpoint times out, customers should use the Retrieval Fulfillment Status or Retrieve Claims endpoint to determine the success or failure of document processing.   NOTE: Below acquirerResponseCd codes will be accepted starting on February 26th, 2023.&lt;br&gt;  A - Funds Movement Request&lt;br&gt;  B - Refunded&lt;br&gt;  C - Initiating Refund&lt;br&gt;  E - Reject Collaboration&lt;br&gt;  F - IIAS Unfulfillable&lt;br&gt;  G - IIAS Invalid request information&lt;br&gt;  H - IIAS Fulfilled outside MasterCom system
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Acquirer Retrieval Fulfillment information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acqFulfillRetrievalRequestAsync(String claimId, String requestId, AcquirerFulfillmentRequest body, final ApiCallback<AcquirerFulfillmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acqFulfillRetrievalRequestValidateBeforeCall(claimId, requestId, body, _callback);
        Type localVarReturnType = new TypeToken<AcquirerFulfillmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRetrievalRequest
     * @param claimId Claim Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Create Retrieval Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRetrievalRequestCall(String claimId, CreateRetrievalRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/claims/{claim-id}/retrievalrequests"
            .replace("{" + "claim-id" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRetrievalRequestValidateBeforeCall(String claimId, CreateRetrievalRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling createRetrievalRequest(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRetrievalRequest(Async)");
        }

        return createRetrievalRequestCall(claimId, body, _callback);

    }

    /**
     * 
     * Prior to creating a chargeback, an issuer uses this endpoint to create a retrieval request for the acquirer to fulfill by providing a copy of the transaction information document (TID). The TID is used to satisfy a cardholder&#39;s inquiry or to satisfy an issuer&#39;s investigation of an original transaction.   NOTE: an issuer is not required to create a retrieval request in order to create a first chargeback on a claim.   NOTE: Below retrievalRequestReason codes will be accepted until October 23th, 2021.&lt;br&gt;  6305 - Cardholder does not agree with amount billed&lt;br&gt;  6321 - Cardholder does not recognize transaction&lt;br&gt;  6322 - Request Transaction Certificate for a chip transaction&lt;br&gt;  6323 - Cardholder needs information for personal records&lt;br&gt;  6341 - Fraud investigation&lt;br&gt;  6342 - Potential chargeback or compliance documentation is required&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)&lt;br&gt;  6390 - Identifies a syntax error return   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)
     * @param claimId Claim Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Create Retrieval Request (required)
     * @return CreateRetrievalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateRetrievalResponse createRetrievalRequest(String claimId, CreateRetrievalRequest body) throws ApiException {
        ApiResponse<CreateRetrievalResponse> localVarResp = createRetrievalRequestWithHttpInfo(claimId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Prior to creating a chargeback, an issuer uses this endpoint to create a retrieval request for the acquirer to fulfill by providing a copy of the transaction information document (TID). The TID is used to satisfy a cardholder&#39;s inquiry or to satisfy an issuer&#39;s investigation of an original transaction.   NOTE: an issuer is not required to create a retrieval request in order to create a first chargeback on a claim.   NOTE: Below retrievalRequestReason codes will be accepted until October 23th, 2021.&lt;br&gt;  6305 - Cardholder does not agree with amount billed&lt;br&gt;  6321 - Cardholder does not recognize transaction&lt;br&gt;  6322 - Request Transaction Certificate for a chip transaction&lt;br&gt;  6323 - Cardholder needs information for personal records&lt;br&gt;  6341 - Fraud investigation&lt;br&gt;  6342 - Potential chargeback or compliance documentation is required&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)&lt;br&gt;  6390 - Identifies a syntax error return   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)
     * @param claimId Claim Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Create Retrieval Request (required)
     * @return ApiResponse&lt;CreateRetrievalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRetrievalResponse> createRetrievalRequestWithHttpInfo(String claimId, CreateRetrievalRequest body) throws ApiException {
        okhttp3.Call localVarCall = createRetrievalRequestValidateBeforeCall(claimId, body, null);
        Type localVarReturnType = new TypeToken<CreateRetrievalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prior to creating a chargeback, an issuer uses this endpoint to create a retrieval request for the acquirer to fulfill by providing a copy of the transaction information document (TID). The TID is used to satisfy a cardholder&#39;s inquiry or to satisfy an issuer&#39;s investigation of an original transaction.   NOTE: an issuer is not required to create a retrieval request in order to create a first chargeback on a claim.   NOTE: Below retrievalRequestReason codes will be accepted until October 23th, 2021.&lt;br&gt;  6305 - Cardholder does not agree with amount billed&lt;br&gt;  6321 - Cardholder does not recognize transaction&lt;br&gt;  6322 - Request Transaction Certificate for a chip transaction&lt;br&gt;  6323 - Cardholder needs information for personal records&lt;br&gt;  6341 - Fraud investigation&lt;br&gt;  6342 - Potential chargeback or compliance documentation is required&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)&lt;br&gt;  6390 - Identifies a syntax error return   NOTE: Below retrievalRequestReason code will be accepted for creation of retrieval request starting on October 24th, 2021.&lt;br&gt;  6343 - IIAS Audit (for healthcare transactions only)
     * @param claimId Claim Id for the retrieval request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Create Retrieval Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRetrievalRequestAsync(String claimId, CreateRetrievalRequest body, final ApiCallback<CreateRetrievalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRetrievalRequestValidateBeforeCall(claimId, body, _callback);
        Type localVarReturnType = new TypeToken<CreateRetrievalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataForCreateRetrievalRequest
     * @param claimId Claim Id for the retrieval rrequest.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataForCreateRetrievalRequestCall(String claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/claims/{claim-id}/retrievalrequests/loaddataforretrievalrequests"
            .replace("{" + "claim-id" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataForCreateRetrievalRequestValidateBeforeCall(String claimId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling getDataForCreateRetrievalRequest(Async)");
        }

        return getDataForCreateRetrievalRequestCall(claimId, _callback);

    }

    /**
     * 
     * An issuer uses this endpoint to retrieve values associated with a claim in preparation for creating a retrieval request.
     * @param claimId Claim Id for the retrieval rrequest.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @return LoadDataForRetrievalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LoadDataForRetrievalResponse getDataForCreateRetrievalRequest(String claimId) throws ApiException {
        ApiResponse<LoadDataForRetrievalResponse> localVarResp = getDataForCreateRetrievalRequestWithHttpInfo(claimId);
        return localVarResp.getData();
    }

    /**
     * 
     * An issuer uses this endpoint to retrieve values associated with a claim in preparation for creating a retrieval request.
     * @param claimId Claim Id for the retrieval rrequest.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @return ApiResponse&lt;LoadDataForRetrievalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadDataForRetrievalResponse> getDataForCreateRetrievalRequestWithHttpInfo(String claimId) throws ApiException {
        okhttp3.Call localVarCall = getDataForCreateRetrievalRequestValidateBeforeCall(claimId, null);
        Type localVarReturnType = new TypeToken<LoadDataForRetrievalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * An issuer uses this endpoint to retrieve values associated with a claim in preparation for creating a retrieval request.
     * @param claimId Claim Id for the retrieval rrequest.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataForCreateRetrievalRequestAsync(String claimId, final ApiCallback<LoadDataForRetrievalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataForCreateRetrievalRequestValidateBeforeCall(claimId, _callback);
        Type localVarReturnType = new TypeToken<LoadDataForRetrievalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetrievalDoc
     * @param claimId The Claim Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId The Request Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetrievalDocCall(String claimId, String requestId, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/claims/{claim-id}/retrievalrequests/{request-id}/documents"
            .replace("{" + "claim-id" + "}", localVarApiClient.escapeString(claimId.toString()))
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetrievalDocValidateBeforeCall(String claimId, String requestId, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling getRetrievalDoc(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getRetrievalDoc(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getRetrievalDoc(Async)");
        }

        return getRetrievalDocCall(claimId, requestId, format, _callback);

    }

    /**
     * 
     * Issuers and acquirers use this endpoint to retrieve all documents from acquirers associated with retrieval request fulfillment.
     * @param claimId The Claim Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId The Request Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF (required)
     * @return DocumentResponseStructure
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponseStructure getRetrievalDoc(String claimId, String requestId, String format) throws ApiException {
        ApiResponse<DocumentResponseStructure> localVarResp = getRetrievalDocWithHttpInfo(claimId, requestId, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Issuers and acquirers use this endpoint to retrieve all documents from acquirers associated with retrieval request fulfillment.
     * @param claimId The Claim Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId The Request Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF (required)
     * @return ApiResponse&lt;DocumentResponseStructure&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponseStructure> getRetrievalDocWithHttpInfo(String claimId, String requestId, String format) throws ApiException {
        okhttp3.Call localVarCall = getRetrievalDocValidateBeforeCall(claimId, requestId, format, null);
        Type localVarReturnType = new TypeToken<DocumentResponseStructure>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Issuers and acquirers use this endpoint to retrieve all documents from acquirers associated with retrieval request fulfillment.
     * @param claimId The Claim Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId The Request Id.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param format File Format.   Length: 8-11   Valid Values/Format: ORIGINAL, MERGED_TIFF, MERGED_PDF (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetrievalDocAsync(String claimId, String requestId, String format, final ApiCallback<DocumentResponseStructure> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetrievalDocValidateBeforeCall(claimId, requestId, format, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponseStructure>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuerResponseRetrievalRequest
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Issuer Fulfillment Response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issuerResponseRetrievalRequestCall(String claimId, String requestId, IssuerFulfillmentRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments/response"
            .replace("{" + "claim-id" + "}", localVarApiClient.escapeString(claimId.toString()))
            .replace("{" + "request-id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuerResponseRetrievalRequestValidateBeforeCall(String claimId, String requestId, IssuerFulfillmentRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling issuerResponseRetrievalRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling issuerResponseRetrievalRequest(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling issuerResponseRetrievalRequest(Async)");
        }

        return issuerResponseRetrievalRequestCall(claimId, requestId, body, _callback);

    }

    /**
     * 
     * After an acquirer fulfills a retrieval request, an issuer uses this endpoint to approve or reject a retrieval request fulfillment. The issuer approves the fulfillment or rejects the fulfillment if the documentation does not meet requirements.
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Issuer Fulfillment Response (required)
     * @return RetrievalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrievalResponse issuerResponseRetrievalRequest(String claimId, String requestId, IssuerFulfillmentRequest body) throws ApiException {
        ApiResponse<RetrievalResponse> localVarResp = issuerResponseRetrievalRequestWithHttpInfo(claimId, requestId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * After an acquirer fulfills a retrieval request, an issuer uses this endpoint to approve or reject a retrieval request fulfillment. The issuer approves the fulfillment or rejects the fulfillment if the documentation does not meet requirements.
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Issuer Fulfillment Response (required)
     * @return ApiResponse&lt;RetrievalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrievalResponse> issuerResponseRetrievalRequestWithHttpInfo(String claimId, String requestId, IssuerFulfillmentRequest body) throws ApiException {
        okhttp3.Call localVarCall = issuerResponseRetrievalRequestValidateBeforeCall(claimId, requestId, body, null);
        Type localVarReturnType = new TypeToken<RetrievalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * After an acquirer fulfills a retrieval request, an issuer uses this endpoint to approve or reject a retrieval request fulfillment. The issuer approves the fulfillment or rejects the fulfillment if the documentation does not meet requirements.
     * @param claimId Claim Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param requestId Request Id for the Retrieval Request.   Length: 1-19   Valid Values/Format: Numeric (required)
     * @param body Issuer Fulfillment Response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issuerResponseRetrievalRequestAsync(String claimId, String requestId, IssuerFulfillmentRequest body, final ApiCallback<RetrievalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuerResponseRetrievalRequestValidateBeforeCall(claimId, requestId, body, _callback);
        Type localVarReturnType = new TypeToken<RetrievalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveFulfillmentImageStatus
     * @param body Retrieval information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFulfillmentImageStatusCall(RetrievalsImageStatusRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/retrievalrequests/imagestatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveFulfillmentImageStatusValidateBeforeCall(RetrievalsImageStatusRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveFulfillmentImageStatus(Async)");
        }

        return retrieveFulfillmentImageStatusCall(body, _callback);

    }

    /**
     * 
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for retrieval requests.   Note: For customers with high volumes of fulfillments or large numbers of BINs, Mastercom recommends using the Retrieval Fullfilment Status endpoint rather than the Retrieval Fullfilment Image Status endpoint.
     * @param body Retrieval information (required)
     * @return RetrievalsImageStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrievalsImageStatusResponse retrieveFulfillmentImageStatus(RetrievalsImageStatusRequest body) throws ApiException {
        ApiResponse<RetrievalsImageStatusResponse> localVarResp = retrieveFulfillmentImageStatusWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for retrieval requests.   Note: For customers with high volumes of fulfillments or large numbers of BINs, Mastercom recommends using the Retrieval Fullfilment Status endpoint rather than the Retrieval Fullfilment Image Status endpoint.
     * @param body Retrieval information (required)
     * @return ApiResponse&lt;RetrievalsImageStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrievalsImageStatusResponse> retrieveFulfillmentImageStatusWithHttpInfo(RetrievalsImageStatusRequest body) throws ApiException {
        okhttp3.Call localVarCall = retrieveFulfillmentImageStatusValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RetrievalsImageStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Issuers and acquirers use this endpoint to search for documents that have a specific status (completed, pending, failed, unavailable, and document not applicable) for retrieval requests.   Note: For customers with high volumes of fulfillments or large numbers of BINs, Mastercom recommends using the Retrieval Fullfilment Status endpoint rather than the Retrieval Fullfilment Image Status endpoint.
     * @param body Retrieval information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFulfillmentImageStatusAsync(RetrievalsImageStatusRequest body, final ApiCallback<RetrievalsImageStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveFulfillmentImageStatusValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RetrievalsImageStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveFulfillmentStatus
     * @param body Retrieval information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFulfillmentStatusCall(RetrievalStatusRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v6/retrievalrequests/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveFulfillmentStatusValidateBeforeCall(RetrievalStatusRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveFulfillmentStatus(Async)");
        }

        return retrieveFulfillmentStatusCall(body, _callback);

    }

    /**
     * 
     * Issuers and acquirers use this endpoint to search for the status of documents that are associated with a specific list of retrieval requests.   Note: issuers and acquirers may send a maximum of 2,000 retrieval fulfillment IDs within a single request.
     * @param body Retrieval information (required)
     * @return RetrievalStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public RetrievalStatusResponse retrieveFulfillmentStatus(RetrievalStatusRequest body) throws ApiException {
        ApiResponse<RetrievalStatusResponse> localVarResp = retrieveFulfillmentStatusWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Issuers and acquirers use this endpoint to search for the status of documents that are associated with a specific list of retrieval requests.   Note: issuers and acquirers may send a maximum of 2,000 retrieval fulfillment IDs within a single request.
     * @param body Retrieval information (required)
     * @return ApiResponse&lt;RetrievalStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrievalStatusResponse> retrieveFulfillmentStatusWithHttpInfo(RetrievalStatusRequest body) throws ApiException {
        okhttp3.Call localVarCall = retrieveFulfillmentStatusValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RetrievalStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Issuers and acquirers use this endpoint to search for the status of documents that are associated with a specific list of retrieval requests.   Note: issuers and acquirers may send a maximum of 2,000 retrieval fulfillment IDs within a single request.
     * @param body Retrieval information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveFulfillmentStatusAsync(RetrievalStatusRequest body, final ApiCallback<RetrievalStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveFulfillmentStatusValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RetrievalStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
